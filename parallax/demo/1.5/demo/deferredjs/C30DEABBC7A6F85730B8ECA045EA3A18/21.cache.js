function wKb(){}
function AKb(){}
function DKb(){}
function sKb(){sKb=jKc;rKb=new wKb}
function FKb(){FKb=jKc;uKb=new AKb}
function GKb(){GKb=jKc;vKb=new DKb}
function pKb(){GIb.call(this,(sKb(),rKb))}
function alc(){N9b.call(this);this.d=0;this.e=0}
mU(749,725,JLc,pKb);_.Od=function qKb(){uIb(this,'mRefractionRatio',new WMb((nNb(),_Mb),new Tjb(1.02)));uIb(this,'mFresnelBias',new WMb(_Mb,new Tjb(0.1)));uIb(this,'mFresnelPower',new WMb(_Mb,new Tjb(2)));uIb(this,'mFresnelScale',new WMb(_Mb,new Tjb(1)));uIb(this,ZRc,new VMb(fNb))};var rKb;mU(750,1,{},wKb);_.Rd=function xKb(){return FKb(),uKb};_.Sd=function yKb(){return GKb(),vKb};var uKb,vKb;mU(751,1,{},AKb);_.qc=function BKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};mU(752,1,{},DKb);_.qc=function EKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};mU(1133,1,WLc);_.Db=function $kc(){n9b(this.c,new alc(this.b))};mU(1134,967,{327:1},alc);_.ob=function blc(){var a,b,c,d,e,f,g,i,j;this.b=new tQb(60,JGb(this.H.n),1,100000);d6b(this.b.ab,3200);this.c=new tQb(60,JGb(this.H.n),1,100000);this.f=new s8b;a=new SWb(100,32,16);j=new cOb('./static/textures/cube/park2/*.jpg');DNb(j,(FCb(),DCb));g=new pKb;UMb(Eu(VRb(g.j,ZRc),225),j);c=new y2b(g);this.g=new Hqb;for(b=0;b<500;b++){e=new F7b(a,c);q5b(e.ab,$kb()*10000-5000);r5b(e.ab,$kb()*10000-5000);d6b(e.ab,$kb()*10000-5000);a6b(e.fb,$kb()*3+1);qPb(this.I,e);xqb(this.g,e)}this.I.X=false;i=new gJb;UMb(Eu(VRb(i.j,ZRc),225),j);f=new y2b(i);BZb(f,(n_b(),k_b));d=new F7b(new bWb(100000,100000,100000),f);qPb(this.f,d);bHb(this.H.n,false)};_.pb=function clc(a){var b,c,d,e;e=1.0E-4*a;l5b(this.b.ab,(this.d-this.b.ab.d)*0.05);m5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);PPb(this.b,this.I.ab);t3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Eu(Aqb(this.g,b),304);q5b(d.ab,5000*Math.cos(e+b));r5b(d.ab,5000*Math.sin(e+b*1.1))}CGb(this.H.n,true);VGb(this.H.n,this.f,this.c,null,false);VGb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var NM=Hjb(SQc,'MaterialsCubemapFresnel$DemoScene',1134),nG=Hjb($Rc,'FresnelShader',749),mG=Hjb($Rc,'FresnelShader_Resources_default_InlineClientBundleGenerator',750),kG=Hjb($Rc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',751),lG=Hjb($Rc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',752);iMc(Hi)(21);