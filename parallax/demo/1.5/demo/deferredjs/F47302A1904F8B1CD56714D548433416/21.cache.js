function lKb(){}
function pKb(){}
function sKb(){}
function hKb(){hKb=$Jc;gKb=new lKb}
function uKb(){uKb=$Jc;jKb=new pKb}
function vKb(){vKb=$Jc;kKb=new sKb}
function eKb(){vIb.call(this,(hKb(),gKb))}
function Rkc(){C9b.call(this);this.c=0;this.d=0}
fU(752,728,wLc,eKb);_.Ld=function fKb(){jIb(this,'mRefractionRatio',new LMb((cNb(),QMb),new Ijb(1.02)));jIb(this,'mFresnelBias',new LMb(QMb,new Ijb(0.1)));jIb(this,'mFresnelPower',new LMb(QMb,new Ijb(2)));jIb(this,'mFresnelScale',new LMb(QMb,new Ijb(1)));jIb(this,SRc,new KMb(WMb))};var gKb;fU(753,1,{},lKb);_.Od=function mKb(){return uKb(),jKb};_.Pd=function nKb(){return vKb(),kKb};var jKb,kKb;fU(754,1,{},pKb);_.nc=function qKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};fU(755,1,{},sKb);_.nc=function tKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};fU(1136,1,JLc);_.zb=function Pkc(){c9b(this.b,new Rkc(this.a))};fU(1137,970,{327:1},Rkc);_.nb=function Skc(){var a,b,c,d,e,f,g,i,j;this.a=new iQb(60,yGb(this.G.k),1,100000);U5b(this.a._,3200);this.b=new iQb(60,yGb(this.G.k),1,100000);this.e=new h8b;a=new HWb(100,32,16);j=new TNb('./static/textures/cube/park2/*.jpg');sNb(j,(uCb(),sCb));g=new eKb;JMb(zu(KRb(g.i,SRc),225),j);c=new n2b(g);this.f=new wqb;for(b=0;b<500;b++){e=new u7b(a,c);f5b(e._,Pkb()*10000-5000);g5b(e._,Pkb()*10000-5000);U5b(e._,Pkb()*10000-5000);R5b(e.eb,Pkb()*3+1);fPb(this.H,e);mqb(this.f,e)}this.H.W=false;i=new XIb;JMb(zu(KRb(i.i,SRc),225),j);f=new n2b(i);qZb(f,(c_b(),_$b));d=new u7b(new SVb(100000,100000,100000),f);fPb(this.e,d);SGb(this.G.k,false)};_.ob=function Tkc(a){var b,c,d,e;e=1.0E-4*a;a5b(this.a._,(this.c-this.a._.c)*0.05);b5b(this.a._,(-this.d-this.a._.d)*0.05);EPb(this.a,this.H._);i3b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=zu(pqb(this.f,b),304);f5b(d._,5000*Math.cos(e+b));g5b(d._,5000*Math.sin(e+b*1.1))}rGb(this.G.k,true);KGb(this.G.k,this.e,this.b,null,false);KGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var GM=wjb(LQc,'MaterialsCubemapFresnel$DemoScene',1137),gG=wjb(TRc,'FresnelShader',752),fG=wjb(TRc,'FresnelShader_Resources_default_InlineClientBundleGenerator',753),dG=wjb(TRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',754),eG=wjb(TRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',755);XLc(xi)(21);