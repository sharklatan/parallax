function msc(){}
function qsc(){}
function tsc(){}
function Hvc(){}
function Lvc(){}
function Ovc(){}
function uGc(){}
function yGc(){}
function BGc(){}
function QHc(){}
function UHc(){}
function XHc(){}
function XIc(){}
function hIc(){}
function lIc(){}
function oIc(){}
function AIc(){}
function EIc(){}
function HIc(){}
function TIc(){}
function $Ic(){}
function BYb(a,b){a.b=b}
function w7b(a,b){a.k=b}
function $Fc(a,b){gqb(a.b,b)}
function _rc(a){this.a=a}
function csc(a){this.a=a}
function fsc(a){this.a=a}
function isc(){isc=UJc;hsc=new msc}
function vsc(){vsc=UJc;ksc=new qsc}
function wsc(){wsc=UJc;lsc=new tsc}
function Dvc(){Dvc=UJc;Cvc=new Hvc}
function Qvc(){Qvc=UJc;Fvc=new Lvc}
function Rvc(){Rvc=UJc;Gvc=new Ovc}
function qGc(){qGc=UJc;pGc=new uGc}
function DGc(){DGc=UJc;sGc=new yGc}
function EGc(){EGc=UJc;tGc=new BGc}
function MHc(){MHc=UJc;LHc=new QHc}
function ZHc(){ZHc=UJc;OHc=new UHc}
function $Hc(){$Hc=UJc;PHc=new XHc}
function aJc(){aJc=UJc;RIc=new XIc}
function bJc(){bJc=UJc;SIc=new $Ic}
function dIc(){dIc=UJc;cIc=new hIc}
function qIc(){qIc=UJc;fIc=new lIc}
function rIc(){rIc=UJc;gIc=new oIc}
function wIc(){wIc=UJc;vIc=new AIc}
function JIc(){JIc=UJc;yIc=new EIc}
function KIc(){KIc=UJc;zIc=new HIc}
function PIc(){PIc=UJc;OIc=new TIc}
function aIc(){pIb.call(this,(dIc(),cIc))}
function tIc(){pIb.call(this,(wIc(),vIc))}
function MIc(){pIb.call(this,(PIc(),OIc))}
function yvc(){pIb.call(this,(Dvc(),Cvc))}
function nGc(){pIb.call(this,(qGc(),pGc))}
function JHc(){pIb.call(this,(MHc(),LHc))}
function Yrc(a,b){this.a=a;this.b=b}
function Rrc(a){a.w+=1;a.w==3&&kPb(a.v,true)}
function Src(){w9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Qrc(a,b,c,d){var e,f,g;g=new h2b(b);DMb(pu(ERb(_Yb(g).i,gRc),225),c);f=new b8b;e=new o7b(new tWb(a.u,a.t),g);O5b(e._,-500);_Ob(f,e);EGb(a.G.k,f,a.c,d,true)}
function Prc(a,b,c,d,e,f){var g,i;g=new __b;U_b(g,new X2b(16755285));g.j=true;Z_b(g,(TZb(),QZb));i=new y7b(b,g);i.d=c;w7b(i,xu(600*Jkb()));M5b(i._,d,e,f);j3b(i.cb,1.5707963267948966);i.S=true;i.U=true;_Ob(a.H,i);gqb(a.n,i)}
var wSc='enableDiffuse1',xSc='enableDiffuse2',pSc='h',rSc='heightMap',CSc='heightmap',BSc='offset',DSc='r',vSc='tDetail',tSc='tDiffuse1',uSc='tDiffuse2',zSc='uRepeatOverlay',qSc='v';YT(1236,1,DLc);_.zb=function Nrc(){Y8b(this.b,new Src(this.a))};YT(1237,971,{78:1,186:1,338:1},Src);_.Ud=function Trc(a){Rrc(this)};_.Gd=function Urc(a){this.u=a.a.Z;this.t=a.a.Y;DMb(pu(ERb(_Yb(this.f.b).i,pSc),225),new Cjb(6/this.u));DMb(pu(ERb(_Yb(this.D.b).i,qSc),225),new Cjb(6/this.t))};_.nb=function Vrc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;et((wxb(),vxb),(Gxb(),Fxb),this);this.b=new cQb(40,sGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new PPb(this.u,this.t,-10000,10000);M5b(this.b._,-1200,800,1200);O5b(this.c._,100);this.s=new b8b;_Ob(this.s,this.c);this.d=new Bwb(this.b,this.G.c);L5b(this.d.v,0);this.d.s=1;this.d.A=1.2;ywb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;wwb(this.d,0.15);_7b(this.H,new R7b(328965,2000,4000));_Ob(this.H,new JXb(1118481));this.e=new kYb(16777215,1.15);M5b(this.e._,500,2000,0);_Ob(this.H,this.e);this.q=new DYb(16729088,1.5,0);L5b(this.q._,0);_Ob(this.H,this.q);this.g=new _Nb(256,256);rNb(this.g,(dEb(),$Db));pNb(this.g,(UDb(),SDb));mNb(this.g,(oCb(),mCb));nNb(this.g,false);this.o=new _Nb(256,256);rNb(this.o,$Db);pNb(this.o,SDb);mNb(this.o,mCb);nNb(this.o,false);n=new tIc;u=n.i;DMb(pu(u.a[ZNc],225),new Cjb(0.05));$4b(pu(pu(u.a[MRc],225).d,297),256,256);DMb(pu(u.a[rSc],225),this.g);s=new _Nb(2048,2048);rNb(s,$Db);pNb(s,SDb);mNb(s,mCb);s.r=false;yNb(s,(vFb(),uFb));zNb(s,uFb);c=new FNb('./static/textures/terrain/grasslight-big.jpg',new Yrc(this,s));yNb(c,uFb);zNb(c,uFb);d=new FNb('./static/textures/terrain/backgrounddetailed6.jpg',this);yNb(d,uFb);zNb(d,uFb);b=new FNb('./static/textures/terrain/grasslight-big-nm.jpg',this);yNb(b,uFb);zNb(b,uFb);t=new yvc;this.B=t.i;DMb(pu(ERb(this.B,GRc),225),this.o);DMb(pu(ERb(this.B,HRc),225),new Cjb(3.5));DMb(pu(ERb(this.B,sSc),225),this.g);DMb(pu(ERb(this.B,tSc),225),c);DMb(pu(ERb(this.B,uSc),225),d);DMb(pu(ERb(this.B,IRc),225),s);DMb(pu(ERb(this.B,vSc),225),b);DMb(pu(ERb(this.B,wSc),225),(Dib(),Dib(),Cib));DMb(pu(ERb(this.B,xSc),225),Cib);DMb(pu(ERb(this.B,eRc),225),Cib);U2b(pu(pu(ERb(this.B,kRc),225).d,293),16777215);U2b(pu(pu(ERb(this.B,lRc),225).d,293),16777215);U2b(pu(pu(ERb(this.B,jRc),225).d,293),1118481);DMb(pu(ERb(this.B,LRc),225),new Cjb(30));DMb(pu(ERb(this.B,ySc),225),new Cjb(375));$4b(pu(pu(ERb(this.B,zSc),225).d,297),6,6);this.A=new $sb;wob(this.A,PRc,new FMb((YMb(),KMb),new Cjb(1)));wob(this.A,ASc,new FMb(SMb,new c5b(1.5,1.5)));wob(this.A,BSc,new FMb(SMb,new c5b(0,0)));this.k=new $sb;i=new g2b((isc(),hsc));kIb(_Yb(i),this.A);i.c=false;i.b=true;wob(this.k,CSc,i);j=new h2b(n);kIb(_Yb(j),u);j.c=false;j.b=true;wob(this.k,aRc,j);k=new h2b(t);kIb(_Yb(k),this.B);k.c=true;k.b=true;wob(this.k,'terrain',k);o=new tWb(this.u,this.t);p=new g_b;a_b(p,new X2b(0));this.r=new o7b(o,p);O5b(this.r._,-500);_Ob(this.s,this.r);g=new uWb(6000,6000,64,64);JQb(g);this.v=new o7b(g,k);M5b(this.v._,0,-125,0);i3b(this.v.cb,-1.5707963267948966);kPb(this.v,false);_Ob(this.H,this.v);QGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;MGb(this.G.k,false);q=new hGc(this.H,this.b);f=new UFc(0.6);e=new kGc(new nGc);DMb(pu(ERb(_Yb(e.b).i,qRc),225),new Cjb(0.65));this.f=new kGc(new JHc);this.D=new kGc(new MIc);DMb(pu(ERb(_Yb(this.f.b).i,pSc),225),new Cjb(6/this.u));DMb(pu(ERb(_Yb(this.D.b).i,qSc),225),new Cjb(6/this.t));DMb(pu(ERb(_Yb(this.f.b).i,DSc),225),new Cjb(0.5));DMb(pu(ERb(_Yb(this.D.b).i,DSc),225),new Cjb(0.5));this.D.a=true;r=new _Nb(this.u,this.t);rNb(s,ZDb);pNb(s,SDb);mNb(s,mCb);s.f=false;s.r=false;a=new aGc(this.G.k,r);gqb(a.b,q);gqb(a.b,f);gqb(a.b,e);$Fc(a,this.f);$Fc(a,this.D);this.n=new qqb;new Gwc('./static/models/animated/parrot.js',new _rc(this));new Gwc(oSc,new csc(this));new Gwc('./static/models/animated/stork.js',new fsc(this));this.p=rh()};_.ob=function Wrc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){zwb(this.d);this.j=s3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;T2b(this.H.a.c,0.1,e,this.j);QGb(this.G.k,this.H.a.c,1);TXb(this.e,0.1+f*1.0499999999999998);BYb(this.q,0.9+f*0.6);DMb(pu(ERb(this.B,HRc),225),new Cjb(0.6+f*2.9));if(this.C){this.a=s3b(this.a+-7.5E-4,0,0.05);DMb(pu(rob(this.A,PRc),225),new Cjb(pu(pu(rob(this.A,PRc),225).d,150).a+b*this.a));W4b(pu(pu(rob(this.A,BSc),225).d,297),b*0.05);_4b(pu(pu(ERb(this.B,ESc),225).d,297),4*pu(pu(rob(this.A,BSc),225).d,297).c);OSb(this.r,pu(rob(this.k,CSc),282));EGb(this.G.k,this.s,this.c,this.g,true);OSb(this.r,pu(rob(this.k,aRc),282));EGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=pu(jqb(this.n,c),305);x7b(d,xu(1000*b));W4b(d._,d.d*b);d._.c>2000&&_4b(d._,-1500-Jkb()*500)}EGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;YT(1238,1,{},Yrc);_.Ud=function Zrc(a){Rrc(this.a);Qrc(this.a,new aIc,a,this.b)};YT(1239,1,{},_rc);_.Af=function asc(a,b){Bwc((pu(a,339),pu(b,242)));Prc(this.a,pu(b,242),500,-3500,500,700);Prc(this.a,pu(b,242),500,-3000-Jkb()*500,500,-200);Prc(this.a,pu(b,242),500,-3000-Jkb()*500,500,200);Prc(this.a,pu(b,242),500,-3000-Jkb()*500,500,1000)};YT(1240,1,{},csc);_.Af=function dsc(a,b){Bwc((pu(a,339),pu(b,242)));Prc(this.a,pu(b,242),1000,-3000-Jkb()*500,350,40)};YT(1241,1,{},fsc);_.Af=function gsc(a,b){Bwc((pu(a,339),pu(b,242)));Prc(this.a,pu(b,242),1000,-3000-Jkb()*500,350,340)};var hsc;YT(1242,1,{},msc);_.Od=function nsc(){return vsc(),ksc};_.Pd=function osc(){return wsc(),lsc};var ksc,lsc;YT(1243,1,{},qsc);_.nc=function rsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};YT(1244,1,{},tsc);_.nc=function usc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};YT(1302,729,qLc,yvc);_.Ld=function zvc(){kIb(this,aNb());kIb(this,bNb());kIb(this,cNb());dIb(this,wSc,new FMb((YMb(),NMb),(Dib(),Dib(),Bib)));dIb(this,xSc,new FMb(NMb,Bib));dIb(this,eRc,new FMb(NMb,Bib));dIb(this,FSc,new FMb(NMb,Bib));dIb(this,tSc,new EMb(QMb));dIb(this,uSc,new EMb(QMb));dIb(this,vSc,new EMb(QMb));dIb(this,GRc,new EMb(QMb));dIb(this,IRc,new EMb(QMb));dIb(this,sSc,new EMb(QMb));dIb(this,HRc,new FMb(KMb,new Cjb(1)));dIb(this,GSc,new FMb(KMb,new Cjb(0)));dIb(this,ySc,new FMb(KMb,new Cjb(1)));dIb(this,kRc,new FMb(JMb,new X2b(15658734)));dIb(this,lRc,new FMb(JMb,new X2b(1118481)));dIb(this,jRc,new FMb(JMb,new X2b(328965)));dIb(this,LRc,new FMb(KMb,new Cjb(30)));dIb(this,qRc,new FMb(KMb,new Cjb(1)));dIb(this,'uRepeatBase',new FMb(SMb,new c5b(1,1)));dIb(this,zSc,new FMb(SMb,new c5b(1,1)));dIb(this,ESc,new FMb(SMb,new c5b(0,0)))};_.Md=function Avc(a){var b,c;c=new Oqb(fu(VR,ZJc,1,[rRc,sRc]));b=new Oqb(fu(VR,ZJc,1,[uRc,vRc,wRc]));mIb(this,uIb(a,fu(YR,ZJc,173,[c,b])))};_.Nd=function Bvc(a){var b,c;c=new Oqb(fu(VR,ZJc,1,[xRc]));b=new Oqb(fu(VR,ZJc,1,[yRc]));nIb(this,uIb(a,fu(YR,ZJc,173,[c,b])))};var Cvc;YT(1303,1,{},Hvc);_.Od=function Ivc(){return Qvc(),Fvc};_.Pd=function Jvc(){return Rvc(),Gvc};var Fvc,Gvc;YT(1304,1,{},Lvc);_.nc=function Mvc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1305,1,{},Ovc);_.nc=function Pvc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1397,729,qLc,nGc);_.Ld=function oGc(){dIb(this,gRc,new EMb((YMb(),QMb)));dIb(this,qRc,new FMb(KMb,new Cjb(1)))};var pGc;YT(1398,1,{},uGc);_.Od=function vGc(){return DGc(),sGc};_.Pd=function wGc(){return EGc(),tGc};var sGc,tGc;YT(1399,1,{},yGc);_.nc=function zGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};YT(1400,1,{},BGc);_.nc=function CGc(){return XRc};YT(1421,729,qLc,JHc);_.Ld=function KHc(){dIb(this,gRc,new EMb((YMb(),QMb)));dIb(this,pSc,new FMb(KMb,new Cjb(0.001953125)));dIb(this,DSc,new FMb(KMb,new Cjb(0.35)))};var LHc;YT(1422,1,{},QHc);_.Od=function RHc(){return ZHc(),OHc};_.Pd=function SHc(){return $Hc(),PHc};var OHc,PHc;YT(1423,1,{},UHc);_.nc=function VHc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1424,1,{},XHc);_.nc=function YHc(){return XRc};YT(1427,729,qLc,aIc);_.Ld=function bIc(){dIb(this,gRc,new EMb((YMb(),QMb)))};var cIc;YT(1428,1,{},hIc);_.Od=function iIc(){return qIc(),fIc};_.Pd=function jIc(){return rIc(),gIc};var fIc,gIc;YT(1429,1,{},lIc);_.nc=function mIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};YT(1430,1,{},oIc);_.nc=function pIc(){return XRc};YT(1433,729,qLc,tIc);_.Ld=function uIc(){dIb(this,rSc,new EMb((YMb(),QMb)));dIb(this,MRc,new FMb(SMb,new c5b(512,512)));dIb(this,ASc,new FMb(SMb,new c5b(1,1)));dIb(this,ZNc,new FMb(KMb,new Cjb(0.05)))};var vIc;YT(1434,1,{},AIc);_.Od=function BIc(){return JIc(),yIc};_.Pd=function CIc(){return KIc(),zIc};var yIc,zIc;YT(1435,1,{},EIc);_.nc=function FIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};YT(1436,1,{},HIc);_.nc=function IIc(){return XRc};YT(1439,729,qLc,MIc);_.Ld=function NIc(){dIb(this,gRc,new EMb((YMb(),QMb)));dIb(this,qSc,new FMb(KMb,new Cjb(0.001953125)));dIb(this,DSc,new FMb(KMb,new Cjb(0.35)))};var OIc;YT(1440,1,{},TIc);_.Od=function UIc(){return aJc(),RIc};_.Pd=function VIc(){return bJc(),SIc};var RIc,SIc;YT(1441,1,{},XIc);_.nc=function YIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1442,1,{},$Ic);_.nc=function _Ic(){return XRc};var kO=qjb(xQc,'TerrainDynamic$DemoScene',1237),gO=qjb(xQc,'TerrainDynamic$DemoScene$1',1238),hO=qjb(xQc,'TerrainDynamic$DemoScene$2',1239),iO=qjb(xQc,'TerrainDynamic$DemoScene$3',1240),jO=qjb(xQc,'TerrainDynamic$DemoScene$4',1241),ZQ=qjb(ZRc,HSc,1433),XO=qjb(nQc,'TerrainShader',1302),BQ=qjb(ZRc,'BleachBypassShader',1397),RQ=qjb(ZRc,'HorizontalTiltShiftShader',1421),bR=qjb(ZRc,'VerticalTiltShiftShader',1439),nO=qjb(xQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1242),lO=qjb(xQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1243),mO=qjb(xQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1244),YQ=qjb(ZRc,ISc,1434),WQ=qjb(ZRc,JSc,1435),XQ=qjb(ZRc,KSc,1436),WO=qjb(nQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1303),UO=qjb(nQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1304),VO=qjb(nQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1305),AQ=qjb(ZRc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1398),yQ=qjb(ZRc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1399),zQ=qjb(ZRc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1400),QQ=qjb(ZRc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1422),OQ=qjb(ZRc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1423),PQ=qjb(ZRc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1424),aR=qjb(ZRc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1440),$Q=qjb(ZRc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1441),_Q=qjb(ZRc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1442),VQ=qjb(ZRc,'LuminosityShader',1427),UQ=qjb(ZRc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1428),SQ=qjb(ZRc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1429),TQ=qjb(ZRc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1430);RLc(xi)(38);