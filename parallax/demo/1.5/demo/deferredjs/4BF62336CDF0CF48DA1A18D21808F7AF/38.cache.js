function ysc(){}
function Csc(){}
function Fsc(){}
function Tvc(){}
function Xvc(){}
function $vc(){}
function GGc(){}
function KGc(){}
function NGc(){}
function aIc(){}
function eIc(){}
function hIc(){}
function tIc(){}
function xIc(){}
function AIc(){}
function MIc(){}
function QIc(){}
function TIc(){}
function dJc(){}
function hJc(){}
function kJc(){}
function MYb(a,b){a.b=b}
function H7b(a,b){a.k=b}
function kGc(a,b){rqb(a.b,b)}
function lsc(a){this.a=a}
function osc(a){this.a=a}
function rsc(a){this.a=a}
function usc(){usc=eKc;tsc=new ysc}
function Hsc(){Hsc=eKc;wsc=new Csc}
function Isc(){Isc=eKc;xsc=new Fsc}
function Pvc(){Pvc=eKc;Ovc=new Tvc}
function awc(){awc=eKc;Rvc=new Xvc}
function bwc(){bwc=eKc;Svc=new $vc}
function CGc(){CGc=eKc;BGc=new GGc}
function PGc(){PGc=eKc;EGc=new KGc}
function QGc(){QGc=eKc;FGc=new NGc}
function YHc(){YHc=eKc;XHc=new aIc}
function jIc(){jIc=eKc;$Hc=new eIc}
function kIc(){kIc=eKc;_Hc=new hIc}
function pIc(){pIc=eKc;oIc=new tIc}
function CIc(){CIc=eKc;rIc=new xIc}
function DIc(){DIc=eKc;sIc=new AIc}
function IIc(){IIc=eKc;HIc=new MIc}
function VIc(){VIc=eKc;KIc=new QIc}
function WIc(){WIc=eKc;LIc=new TIc}
function _Ic(){_Ic=eKc;$Ic=new dJc}
function mJc(){mJc=eKc;bJc=new hJc}
function nJc(){nJc=eKc;cJc=new kJc}
function isc(a,b){this.a=a;this.b=b}
function Kvc(){AIb.call(this,(Pvc(),Ovc))}
function zGc(){AIb.call(this,(CGc(),BGc))}
function VHc(){AIb.call(this,(YHc(),XHc))}
function mIc(){AIb.call(this,(pIc(),oIc))}
function FIc(){AIb.call(this,(IIc(),HIc))}
function YIc(){AIb.call(this,(_Ic(),$Ic))}
function bsc(a){a.w+=1;a.w==3&&vPb(a.v,true)}
function csc(){H9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function asc(a,b,c,d){var e,f,g;g=new s2b(b);OMb(ru(PRb(kZb(g).i,vRc),225),c);f=new m8b;e=new z7b(new EWb(a.u,a.t),g);Z5b(e._,-500);kPb(f,e);PGb(a.G.k,f,a.c,d,true)}
function _rc(a,b,c,d,e,f){var g,i;g=new k0b;d0b(g,new g3b(16755285));g.j=true;i0b(g,(c$b(),_Zb));i=new J7b(b,g);i.d=c;H7b(i,zu(600*Ukb()));X5b(i._,d,e,f);u3b(i.cb,1.5707963267948966);i.S=true;i.U=true;kPb(a.H,i);rqb(a.n,i)}
var LSc='enableDiffuse1',MSc='enableDiffuse2',ESc='h',GSc='heightMap',RSc='heightmap',QSc='offset',SSc='r',KSc='tDetail',ISc='tDiffuse1',JSc='tDiffuse2',OSc='uRepeatOverlay',FSc='v';aU(1239,1,PLc);_.zb=function Zrc(){h9b(this.b,new csc(this.a))};aU(1240,973,{78:1,186:1,338:1},csc);_.Ud=function dsc(a){bsc(this)};_.Gd=function esc(a){this.u=a.a.Z;this.t=a.a.Y;OMb(ru(PRb(kZb(this.f.b).i,ESc),225),new Njb(6/this.u));OMb(ru(PRb(kZb(this.D.b).i,FSc),225),new Njb(6/this.t))};_.nb=function fsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((Hxb(),Gxb),(Rxb(),Qxb),this);this.b=new nQb(40,DGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new $Pb(this.u,this.t,-10000,10000);X5b(this.b._,-1200,800,1200);Z5b(this.c._,100);this.s=new m8b;kPb(this.s,this.c);this.d=new Mwb(this.b,this.G.c);W5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Jwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Hwb(this.d,0.15);k8b(this.H,new a8b(328965,2000,4000));kPb(this.H,new UXb(1118481));this.e=new vYb(16777215,1.15);X5b(this.e._,500,2000,0);kPb(this.H,this.e);this.q=new OYb(16729088,1.5,0);W5b(this.q._,0);kPb(this.H,this.q);this.g=new kOb(256,256);CNb(this.g,(oEb(),jEb));ANb(this.g,(dEb(),bEb));xNb(this.g,(zCb(),xCb));yNb(this.g,false);this.o=new kOb(256,256);CNb(this.o,jEb);ANb(this.o,bEb);xNb(this.o,xCb);yNb(this.o,false);n=new FIc;u=n.i;OMb(ru(u.a[jOc],225),new Njb(0.05));j5b(ru(ru(u.a[_Rc],225).d,297),256,256);OMb(ru(u.a[GSc],225),this.g);s=new kOb(2048,2048);CNb(s,jEb);ANb(s,bEb);xNb(s,xCb);s.r=false;JNb(s,(GFb(),FFb));KNb(s,FFb);c=new QNb('./static/textures/terrain/grasslight-big.jpg',new isc(this,s));JNb(c,FFb);KNb(c,FFb);d=new QNb('./static/textures/terrain/backgrounddetailed6.jpg',this);JNb(d,FFb);KNb(d,FFb);b=new QNb('./static/textures/terrain/grasslight-big-nm.jpg',this);JNb(b,FFb);KNb(b,FFb);t=new Kvc;this.B=t.i;OMb(ru(PRb(this.B,VRc),225),this.o);OMb(ru(PRb(this.B,WRc),225),new Njb(3.5));OMb(ru(PRb(this.B,HSc),225),this.g);OMb(ru(PRb(this.B,ISc),225),c);OMb(ru(PRb(this.B,JSc),225),d);OMb(ru(PRb(this.B,XRc),225),s);OMb(ru(PRb(this.B,KSc),225),b);OMb(ru(PRb(this.B,LSc),225),(Oib(),Oib(),Nib));OMb(ru(PRb(this.B,MSc),225),Nib);OMb(ru(PRb(this.B,tRc),225),Nib);d3b(ru(ru(PRb(this.B,zRc),225).d,293),16777215);d3b(ru(ru(PRb(this.B,ARc),225).d,293),16777215);d3b(ru(ru(PRb(this.B,yRc),225).d,293),1118481);OMb(ru(PRb(this.B,$Rc),225),new Njb(30));OMb(ru(PRb(this.B,NSc),225),new Njb(375));j5b(ru(ru(PRb(this.B,OSc),225).d,297),6,6);this.A=new jtb;Hob(this.A,cSc,new QMb((hNb(),VMb),new Njb(1)));Hob(this.A,PSc,new QMb(bNb,new n5b(1.5,1.5)));Hob(this.A,QSc,new QMb(bNb,new n5b(0,0)));this.k=new jtb;i=new r2b((usc(),tsc));vIb(kZb(i),this.A);i.c=false;i.b=true;Hob(this.k,RSc,i);j=new s2b(n);vIb(kZb(j),u);j.c=false;j.b=true;Hob(this.k,pRc,j);k=new s2b(t);vIb(kZb(k),this.B);k.c=true;k.b=true;Hob(this.k,'terrain',k);o=new EWb(this.u,this.t);p=new r_b;l_b(p,new g3b(0));this.r=new z7b(o,p);Z5b(this.r._,-500);kPb(this.s,this.r);g=new FWb(6000,6000,64,64);UQb(g);this.v=new z7b(g,k);X5b(this.v._,0,-125,0);t3b(this.v.cb,-1.5707963267948966);vPb(this.v,false);kPb(this.H,this.v);_Gb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;XGb(this.G.k,false);q=new tGc(this.H,this.b);f=new eGc(0.6);e=new wGc(new zGc);OMb(ru(PRb(kZb(e.b).i,FRc),225),new Njb(0.65));this.f=new wGc(new VHc);this.D=new wGc(new YIc);OMb(ru(PRb(kZb(this.f.b).i,ESc),225),new Njb(6/this.u));OMb(ru(PRb(kZb(this.D.b).i,FSc),225),new Njb(6/this.t));OMb(ru(PRb(kZb(this.f.b).i,SSc),225),new Njb(0.5));OMb(ru(PRb(kZb(this.D.b).i,SSc),225),new Njb(0.5));this.D.a=true;r=new kOb(this.u,this.t);CNb(s,iEb);ANb(s,bEb);xNb(s,xCb);s.f=false;s.r=false;a=new mGc(this.G.k,r);rqb(a.b,q);rqb(a.b,f);rqb(a.b,e);kGc(a,this.f);kGc(a,this.D);this.n=new Bqb;new Swc('./static/models/animated/parrot.js',new lsc(this));new Swc(DSc,new osc(this));new Swc('./static/models/animated/stork.js',new rsc(this));this.p=rh()};_.ob=function gsc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Kwb(this.d);this.j=D3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;c3b(this.H.a.c,0.1,e,this.j);_Gb(this.G.k,this.H.a.c,1);cYb(this.e,0.1+f*1.0499999999999998);MYb(this.q,0.9+f*0.6);OMb(ru(PRb(this.B,WRc),225),new Njb(0.6+f*2.9));if(this.C){this.a=D3b(this.a+-7.5E-4,0,0.05);OMb(ru(Cob(this.A,cSc),225),new Njb(ru(ru(Cob(this.A,cSc),225).d,150).a+b*this.a));f5b(ru(ru(Cob(this.A,QSc),225).d,297),b*0.05);k5b(ru(ru(PRb(this.B,TSc),225).d,297),4*ru(ru(Cob(this.A,QSc),225).d,297).c);ZSb(this.r,ru(Cob(this.k,RSc),282));PGb(this.G.k,this.s,this.c,this.g,true);ZSb(this.r,ru(Cob(this.k,pRc),282));PGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=ru(uqb(this.n,c),305);I7b(d,zu(1000*b));f5b(d._,d.d*b);d._.c>2000&&k5b(d._,-1500-Ukb()*500)}PGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;aU(1241,1,{},isc);_.Ud=function jsc(a){bsc(this.a);asc(this.a,new mIc,a,this.b)};aU(1242,1,{},lsc);_.Af=function msc(a,b){Nwc((ru(a,339),ru(b,242)));_rc(this.a,ru(b,242),500,-3500,500,700);_rc(this.a,ru(b,242),500,-3000-Ukb()*500,500,-200);_rc(this.a,ru(b,242),500,-3000-Ukb()*500,500,200);_rc(this.a,ru(b,242),500,-3000-Ukb()*500,500,1000)};aU(1243,1,{},osc);_.Af=function psc(a,b){Nwc((ru(a,339),ru(b,242)));_rc(this.a,ru(b,242),1000,-3000-Ukb()*500,350,40)};aU(1244,1,{},rsc);_.Af=function ssc(a,b){Nwc((ru(a,339),ru(b,242)));_rc(this.a,ru(b,242),1000,-3000-Ukb()*500,350,340)};var tsc;aU(1245,1,{},ysc);_.Od=function zsc(){return Hsc(),wsc};_.Pd=function Asc(){return Isc(),xsc};var wsc,xsc;aU(1246,1,{},Csc);_.nc=function Dsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};aU(1247,1,{},Fsc);_.nc=function Gsc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};aU(1305,731,CLc,Kvc);_.Ld=function Lvc(){vIb(this,lNb());vIb(this,mNb());vIb(this,nNb());oIb(this,LSc,new QMb((hNb(),YMb),(Oib(),Oib(),Mib)));oIb(this,MSc,new QMb(YMb,Mib));oIb(this,tRc,new QMb(YMb,Mib));oIb(this,USc,new QMb(YMb,Mib));oIb(this,ISc,new PMb(_Mb));oIb(this,JSc,new PMb(_Mb));oIb(this,KSc,new PMb(_Mb));oIb(this,VRc,new PMb(_Mb));oIb(this,XRc,new PMb(_Mb));oIb(this,HSc,new PMb(_Mb));oIb(this,WRc,new QMb(VMb,new Njb(1)));oIb(this,VSc,new QMb(VMb,new Njb(0)));oIb(this,NSc,new QMb(VMb,new Njb(1)));oIb(this,zRc,new QMb(UMb,new g3b(15658734)));oIb(this,ARc,new QMb(UMb,new g3b(1118481)));oIb(this,yRc,new QMb(UMb,new g3b(328965)));oIb(this,$Rc,new QMb(VMb,new Njb(30)));oIb(this,FRc,new QMb(VMb,new Njb(1)));oIb(this,'uRepeatBase',new QMb(bNb,new n5b(1,1)));oIb(this,OSc,new QMb(bNb,new n5b(1,1)));oIb(this,TSc,new QMb(bNb,new n5b(0,0)))};_.Md=function Mvc(a){var b,c;c=new Zqb(hu(ZR,jKc,1,[GRc,HRc]));b=new Zqb(hu(ZR,jKc,1,[JRc,KRc,LRc]));xIb(this,FIb(a,hu(aS,jKc,173,[c,b])))};_.Nd=function Nvc(a){var b,c;c=new Zqb(hu(ZR,jKc,1,[MRc]));b=new Zqb(hu(ZR,jKc,1,[NRc]));yIb(this,FIb(a,hu(aS,jKc,173,[c,b])))};var Ovc;aU(1306,1,{},Tvc);_.Od=function Uvc(){return awc(),Rvc};_.Pd=function Vvc(){return bwc(),Svc};var Rvc,Svc;aU(1307,1,{},Xvc);_.nc=function Yvc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};aU(1308,1,{},$vc);_.nc=function _vc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};aU(1400,731,CLc,zGc);_.Ld=function AGc(){oIb(this,vRc,new PMb((hNb(),_Mb)));oIb(this,FRc,new QMb(VMb,new Njb(1)))};var BGc;aU(1401,1,{},GGc);_.Od=function HGc(){return PGc(),EGc};_.Pd=function IGc(){return QGc(),FGc};var EGc,FGc;aU(1402,1,{},KGc);_.nc=function LGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};aU(1403,1,{},NGc);_.nc=function OGc(){return kSc};aU(1424,731,CLc,VHc);_.Ld=function WHc(){oIb(this,vRc,new PMb((hNb(),_Mb)));oIb(this,ESc,new QMb(VMb,new Njb(0.001953125)));oIb(this,SSc,new QMb(VMb,new Njb(0.35)))};var XHc;aU(1425,1,{},aIc);_.Od=function bIc(){return jIc(),$Hc};_.Pd=function cIc(){return kIc(),_Hc};var $Hc,_Hc;aU(1426,1,{},eIc);_.nc=function fIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};aU(1427,1,{},hIc);_.nc=function iIc(){return kSc};aU(1430,731,CLc,mIc);_.Ld=function nIc(){oIb(this,vRc,new PMb((hNb(),_Mb)))};var oIc;aU(1431,1,{},tIc);_.Od=function uIc(){return CIc(),rIc};_.Pd=function vIc(){return DIc(),sIc};var rIc,sIc;aU(1432,1,{},xIc);_.nc=function yIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};aU(1433,1,{},AIc);_.nc=function BIc(){return kSc};aU(1436,731,CLc,FIc);_.Ld=function GIc(){oIb(this,GSc,new PMb((hNb(),_Mb)));oIb(this,_Rc,new QMb(bNb,new n5b(512,512)));oIb(this,PSc,new QMb(bNb,new n5b(1,1)));oIb(this,jOc,new QMb(VMb,new Njb(0.05)))};var HIc;aU(1437,1,{},MIc);_.Od=function NIc(){return VIc(),KIc};_.Pd=function OIc(){return WIc(),LIc};var KIc,LIc;aU(1438,1,{},QIc);_.nc=function RIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};aU(1439,1,{},TIc);_.nc=function UIc(){return kSc};aU(1442,731,CLc,YIc);_.Ld=function ZIc(){oIb(this,vRc,new PMb((hNb(),_Mb)));oIb(this,FSc,new QMb(VMb,new Njb(0.001953125)));oIb(this,SSc,new QMb(VMb,new Njb(0.35)))};var $Ic;aU(1443,1,{},dJc);_.Od=function eJc(){return mJc(),bJc};_.Pd=function fJc(){return nJc(),cJc};var bJc,cJc;aU(1444,1,{},hJc);_.nc=function iJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};aU(1445,1,{},kJc);_.nc=function lJc(){return kSc};var oO=Bjb(MQc,'TerrainDynamic$DemoScene',1240),kO=Bjb(MQc,'TerrainDynamic$DemoScene$1',1241),lO=Bjb(MQc,'TerrainDynamic$DemoScene$2',1242),mO=Bjb(MQc,'TerrainDynamic$DemoScene$3',1243),nO=Bjb(MQc,'TerrainDynamic$DemoScene$4',1244),bR=Bjb(mSc,WSc,1436),_O=Bjb(CQc,'TerrainShader',1305),FQ=Bjb(mSc,'BleachBypassShader',1400),VQ=Bjb(mSc,'HorizontalTiltShiftShader',1424),fR=Bjb(mSc,'VerticalTiltShiftShader',1442),rO=Bjb(MQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1245),pO=Bjb(MQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1246),qO=Bjb(MQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1247),aR=Bjb(mSc,XSc,1437),$Q=Bjb(mSc,YSc,1438),_Q=Bjb(mSc,ZSc,1439),$O=Bjb(CQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1306),YO=Bjb(CQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1307),ZO=Bjb(CQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1308),EQ=Bjb(mSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1401),CQ=Bjb(mSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1402),DQ=Bjb(mSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1403),UQ=Bjb(mSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1425),SQ=Bjb(mSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1426),TQ=Bjb(mSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1427),eR=Bjb(mSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1443),cR=Bjb(mSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1444),dR=Bjb(mSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1445),ZQ=Bjb(mSc,'LuminosityShader',1430),YQ=Bjb(mSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1431),WQ=Bjb(mSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1432),XQ=Bjb(mSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1433);bMc(xi)(38);