function rpc(){}
function vpc(){}
function ypc(){}
function Gsc(){}
function Ksc(){}
function Nsc(){}
function vhc(a){this.a=a}
function npc(){npc=NEc;mpc=new rpc}
function Apc(){Apc=NEc;ppc=new vpc}
function Bpc(){Bpc=NEc;qpc=new ypc}
function Csc(){Csc=NEc;Bsc=new Gsc}
function Psc(){Psc=NEc;Esc=new Ksc}
function Qsc(){Qsc=NEc;Fsc=new Nsc}
function xsc(){PGb.call(this,(Csc(),Bsc))}
function kpc(){PGb.call(this,(npc(),mpc))}
function rhc(){_6b.call(this);this.d=0;this.e=0}
function qhc(a,b){var c,d,e,f,g,i;d=new JLb(TLc);d.k=4;H2b(d.B,0.998,0.998);H2b(d.A,0.001,0.001);DLb(d,(WDb(),VDb));ELb(d,VDb);rLb(d,(PAb(),NAb));e=new JLb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');H2b(e.B,0.998,0.998);H2b(e.A,0.001,0.001);DLb(e,VDb);ELb(e,VDb);rLb(e,NAb);c=new JLb('./static/models/obj/leeperrysmith/Map-COL.jpg');H2b(c.B,0.998,0.998);H2b(c.A,0.001,0.001);DLb(c,VDb);ELb(c,VDb);rLb(c,NAb);g=new xsc;i=g.i;IKb(qu(i.a[VLc],225),(ghb(),ghb(),fhb));IKb(qu(i.a[WLc],225),fhb);IKb(qu(i.a[XLc],225),a.b.e);IKb(qu(i.a[YLc],225),c);IKb(qu(i.a[ZLc],225),d);IKb(qu(i.a[$Lc],225),e);B0b(qu(qu(i.a[_Lc],225).d,292),10526880);B0b(qu(qu(i.a[aMc],225).d,292),10526880);B0b(qu(qu(i.a[bMc],225).d,292),10526880);IKb(qu(i.a[cMc],225),new fib(0.145));IKb(qu(i.a[dMc],225),new fib(0.75));IKb(qu(i.a[eMc],225),new fib(16));g4b(qu(qu(i.a[fMc],225).d,300),0.001,0.001,0.998,0.998);f=new Q_b(g);f.c=true;a.c=new W4b(b,f);J2b(a.c._,-50);r3b(a.c.eb,100);jNb(a.c,true);a.c.U=true;eNb(a.F,a.c)}
var VLc='enableBump',XLc='tBeckmann',cMc='uRoughness',dMc='uSpecularBrightness';NS(1104,1,vGc);_.zb=function ohc(){B6b(this.b,new rhc(this.a))};NS(1105,959,{322:1},rhc);_.nb=function shc(){var a,b,c,d,e,f,g;this.a=new eOb(27,SEb(this.D.k),1,10000);u3b(this.a._,1200);eNb(this.F,new FVb(5592405));d=new yWb(16777215,1.5,1000);s3b(d._,0,0,600);eNb(this.F,d);f=new GWb(1);s3b(f._,0.05,0.05,1);eNb(this.F,f);f._.hf(700);f.S=true;f.t=true;f.I=2048;f.G=2048;f.A=200;f.w=1500;f.d=40;f.u=-0.005;f.D=0.15;a=new gWb(16777215,0.85);s3b(a._,1,-0.5,1);A0b(a.L,0.6,1,0.85);eNb(this.F,a);a._.hf(500);a.S=true;a.I=2048;a.G=2048;a.A=200;a.w=1500;a.e=-500;a.f=500;a.g=500;a.d=-500;a.u=-0.005;a.D=0.15;b=new gWb(16777215,0.85);s3b(b._,1,-0.5,-1);eNb(this.F,b);new SCc(new kpc);c=new SCc(new mDc);c.a=true;g=new eMb(512,512);wLb(g,(ECb(),yCb));uLb(g,(tCb(),rCb));rLb(g,(PAb(),NAb));g.f=false;this.b=new ICc(this.D.k,g);new Ftc(ULc,new vhc(this));oFb(this.D.k,new E0b(5001561),1);e=new iEb(this.D.k,this.F);e.g=false;kFb(this.D.k,false);this.D.k.ab=true;this.D.k.bb=true};_.ob=function thc(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){K0b(this.c.cb,0.05*(b-this.c.cb.d));J0b(this.c.cb,0.05*(c-this.c.cb.c))}MEb(this.D.k);cFb(this.D.k,this.F,this.a,null,false)};_.d=0;_.e=0;NS(1106,1,{},vhc);_.vf=function whc(a,b){qhc(this.a,qu(b,241))};NS(1212,724,iGc,kpc);_.Jd=function lpc(){};var mpc;NS(1213,1,{},rpc);_.Md=function spc(){return Apc(),ppc};_.Nd=function tpc(){return Bpc(),qpc};var ppc,qpc;NS(1214,1,{},vpc);_.ac=function wpc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};NS(1215,1,{},ypc);_.ac=function zpc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};NS(1288,724,iGc,xsc);_.Jd=function ysc(){KGb(this,fLb());KGb(this,gLb());KGb(this,hLb());DGb(this,VLc,new KKb((bLb(),SKb),Nib(0)));DGb(this,WLc,new KKb(SKb,Nib(0)));DGb(this,YLc,new JKb(VKb));DGb(this,XLc,new JKb(VKb));DGb(this,aMc,new KKb(OKb,new E0b(15658734)));DGb(this,bMc,new KKb(OKb,new E0b(1118481)));DGb(this,_Lc,new KKb(OKb,new E0b(328965)));DGb(this,gMc,new KKb(PKb,new fib(1)));DGb(this,cMc,new KKb(PKb,new fib(0.15)));DGb(this,dMc,new KKb(PKb,new fib(0.75)));DGb(this,ZLc,new JKb(VKb));DGb(this,eMc,new KKb(PKb,new fib(1)));DGb(this,$Lc,new JKb(VKb));DGb(this,fMc,new KKb(_Kb,new k4b(0,0,1,1)));DGb(this,'uWrapRGB',new KKb(ZKb,new y3b(0.75,0.375,0.1875)))};_.Kd=function zsc(a){var b,c;c=new qpb(gu(KQ,SEc,1,[hMc,iMc,jMc]));b=new qpb(gu(KQ,SEc,1,[kMc,lMc,mMc]));MGb(this,UGb(a,gu(NQ,SEc,173,[c,b])))};_.Ld=function Asc(a){var b,c;c=new qpb(gu(KQ,SEc,1,[nMc]));b=new qpb(gu(KQ,SEc,1,[oMc]));NGb(this,UGb(a,gu(NQ,SEc,173,[c,b])))};var Bsc;NS(1289,1,{},Gsc);_.Md=function Hsc(){return Psc(),Esc};_.Nd=function Isc(){return Qsc(),Fsc};var Esc,Fsc;NS(1290,1,{},Ksc);_.ac=function Lsc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};NS(1291,1,{},Nsc);_.ac=function Osc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var VL=Vhb(jLc,'MaterialsBumpmapSkin$DemoScene',1105),UL=Vhb(jLc,'MaterialsBumpmapSkin$DemoScene$1',1106),RN=Vhb(cLc,'BeckmannShader',1212),QN=Vhb(cLc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1213),ON=Vhb(cLc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1214),PN=Vhb(cLc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1215),eO=Vhb(cLc,'SkinSimpleShader',1288),dO=Vhb(cLc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1289),bO=Vhb(cLc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1290),cO=Vhb(cLc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1291);IGc(xi)(18);