function kIb(){}
function oIb(){}
function rIb(){}
function gIb(){gIb=NEc;fIb=new kIb}
function tIb(){tIb=NEc;iIb=new oIb}
function uIb(){uIb=NEc;jIb=new rIb}
function dIb(){PGb.call(this,(gIb(),fIb))}
function Mic(){_6b.call(this);this.c=0;this.d=0}
NS(742,724,iGc,dIb);_.Jd=function eIb(){DGb(this,'mRefractionRatio',new KKb((bLb(),PKb),new fib(1.02)));DGb(this,'mFresnelBias',new KKb(PKb,new fib(0.1)));DGb(this,'mFresnelPower',new KKb(PKb,new fib(2)));DGb(this,'mFresnelScale',new KKb(PKb,new fib(1)));DGb(this,rMc,new JKb(VKb))};var fIb;NS(743,1,{},kIb);_.Md=function lIb(){return tIb(),iIb};_.Nd=function mIb(){return uIb(),jIb};var iIb,jIb;NS(744,1,{},oIb);_.ac=function pIb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};NS(745,1,{},rIb);_.ac=function sIb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};NS(1124,1,vGc);_.zb=function Kic(){B6b(this.b,new Mic(this.a))};NS(1125,959,{326:1},Mic);_.nb=function Nic(){var a,b,c,d,e,f,g,i,j;this.a=new eOb(60,SEb(this.D.k),1,100000);u3b(this.a._,3200);this.b=new eOb(60,SEb(this.D.k),1,100000);this.e=new H5b;a=new xUb(100,32,16);j=new SLb('./static/textures/cube/park2/*.jpg');rLb(j,(PAb(),NAb));g=new dIb;IKb(qu(CPb(g.i,rMc),225),j);c=new Q_b(g);this.f=new Uob;for(b=0;b<500;b++){d=new W4b(a,c);I2b(d._,mjb()*10000-5000);J2b(d._,mjb()*10000-5000);u3b(d._,mjb()*10000-5000);r3b(d.eb,mjb()*3+1);eNb(this.F,d);Kob(this.f,d)}this.F.W=false;i=new pHb;IKb(qu(CPb(i.i,rMc),225),j);f=new Q_b(i);fXb(f,(SYb(),PYb));e=new W4b(new ITb(100000,100000,100000),f);eNb(this.e,e);kFb(this.D.k,false)};_.ob=function Oic(a){var b,c,d,e;e=1.0E-4*a;D2b(this.a._,(this.c-this.a._.c)*0.05);E2b(this.a._,(-this.d-this.a._.d)*0.05);CNb(this.a,this.F._);L0b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(Nob(this.f,b),303);I2b(d._,5000*Math.cos(e+b));J2b(d._,5000*Math.sin(e+b*1.1))}MEb(this.D.k);cFb(this.D.k,this.e,this.b,null,false);cFb(this.D.k,this.F,this.a,null,false)};_.c=0;_.d=0;var nM=Vhb(jLc,'MaterialsCubemapFresnel$DemoScene',1125),SF=Vhb(sMc,'FresnelShader',742),RF=Vhb(sMc,'FresnelShader_Resources_default_InlineClientBundleGenerator',743),PF=Vhb(sMc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',744),QF=Vhb(sMc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',745);IGc(xi)(21);