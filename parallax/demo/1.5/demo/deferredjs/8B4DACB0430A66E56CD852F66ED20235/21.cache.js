function mKb(){}
function qKb(){}
function tKb(){}
function iKb(){iKb=aKc;hKb=new mKb}
function vKb(){vKb=aKc;kKb=new qKb}
function wKb(){wKb=aKc;lKb=new tKb}
function fKb(){wIb.call(this,(iKb(),hKb))}
function Tkc(){D9b.call(this);this.c=0;this.d=0}
fU(752,728,yLc,fKb);_.Ld=function gKb(){kIb(this,'mRefractionRatio',new MMb((dNb(),RMb),new Jjb(1.02)));kIb(this,'mFresnelBias',new MMb(RMb,new Jjb(0.1)));kIb(this,'mFresnelPower',new MMb(RMb,new Jjb(2)));kIb(this,'mFresnelScale',new MMb(RMb,new Jjb(1)));kIb(this,VRc,new LMb(XMb))};var hKb;fU(753,1,{},mKb);_.Od=function nKb(){return vKb(),kKb};_.Pd=function oKb(){return wKb(),lKb};var kKb,lKb;fU(754,1,{},qKb);_.nc=function rKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};fU(755,1,{},tKb);_.nc=function uKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};fU(1137,1,LLc);_.zb=function Rkc(){d9b(this.b,new Tkc(this.a))};fU(1138,970,{327:1},Tkc);_.nb=function Ukc(){var a,b,c,d,e,f,g,i,j;this.a=new jQb(60,zGb(this.G.k),1,100000);V5b(this.a._,3200);this.b=new jQb(60,zGb(this.G.k),1,100000);this.e=new i8b;a=new IWb(100,32,16);j=new UNb('./static/textures/cube/park2/*.jpg');tNb(j,(vCb(),tCb));g=new fKb;KMb(zu(LRb(g.i,VRc),225),j);c=new o2b(g);this.f=new xqb;for(b=0;b<500;b++){d=new v7b(a,c);g5b(d._,Qkb()*10000-5000);h5b(d._,Qkb()*10000-5000);V5b(d._,Qkb()*10000-5000);S5b(d.eb,Qkb()*3+1);gPb(this.H,d);nqb(this.f,d)}this.H.W=false;i=new YIb;KMb(zu(LRb(i.i,VRc),225),j);f=new o2b(i);rZb(f,(d_b(),a_b));e=new v7b(new TVb(100000,100000,100000),f);gPb(this.e,e);TGb(this.G.k,false)};_.ob=function Vkc(a){var b,c,d,e;e=1.0E-4*a;b5b(this.a._,(this.c-this.a._.c)*0.05);c5b(this.a._,(-this.d-this.a._.d)*0.05);FPb(this.a,this.H._);j3b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=zu(qqb(this.f,b),304);g5b(d._,5000*Math.cos(e+b));h5b(d._,5000*Math.sin(e+b*1.1))}sGb(this.G.k,true);LGb(this.G.k,this.e,this.b,null,false);LGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var GM=xjb(OQc,'MaterialsCubemapFresnel$DemoScene',1138),gG=xjb(WRc,'FresnelShader',752),fG=xjb(WRc,'FresnelShader_Resources_default_InlineClientBundleGenerator',753),dG=xjb(WRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',754),eG=xjb(WRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',755);ZLc(xi)(21);