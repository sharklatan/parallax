function SLb(){}
function WLb(){}
function ZLb(){}
function OLb(){OLb=$Mc;NLb=new SLb}
function _Lb(){_Lb=$Mc;QLb=new WLb}
function aMb(){aMb=$Mc;RLb=new ZLb}
function LLb(){aKb.call(this,(OLb(),NLb))}
function qnc(){acc.call(this);this.d=0;this.e=0}
kW(766,742,yOc,LLb);_.Td=function MLb(){QJb(this,'mRefractionRatio',new qOb((JOb(),vOb),new Tkb(1.02)));QJb(this,'mFresnelBias',new qOb(vOb,new Tkb(0.1)));QJb(this,'mFresnelPower',new qOb(vOb,new Tkb(2)));QJb(this,'mFresnelScale',new qOb(vOb,new Tkb(1)));QJb(this,XUc,new pOb(BOb))};var NLb;kW(767,1,{},SLb);_.Wd=function TLb(){return _Lb(),QLb};_.Xd=function ULb(){return aMb(),RLb};var QLb,RLb;kW(768,1,{},WLb);_.uc=function XLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};kW(769,1,{},ZLb);_.uc=function $Lb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};kW(1157,1,MOc);_.Qb=function onc(){Cbc(this.c,new qnc(this.b))};kW(1158,990,{331:1},qnc);_.ob=function rnc(){var a,b,c,d,e,f,g,i,j;this.b=new QRb(60,UGb(this.H.n),1,100000);Z8b(this.b.ab,3200);this.c=new QRb(60,UGb(this.H.n),1,100000);this.f=new Gac;a=new oYb(100,32,16);j=new yPb('./static/textures/cube/park2/*.jpg');ZOb(j,(JDb(),HDb));g=new LLb;oOb(bw(sTb(g.j,XUc),226),j);c=new M4b(g);this.g=new Irb;for(b=0;b<500;b++){d=new SZb(a,c);p8b(d.ab,$lb()*10000-5000);q8b(d.ab,$lb()*10000-5000);Z8b(d.ab,$lb()*10000-5000);W8b(d.fb,$lb()*3+1);MQb(this.I,d);yrb(this.g,d)}this.I.X=false;i=new CKb;oOb(bw(sTb(i.j,XUc),226),j);f=new M4b(i);P_b(f,(B1b(),y1b));e=new SZb(new zXb(100000,100000,100000),f);MQb(this.f,e);VGb(this.H.n,false)};_.pb=function snc(a){var b,c,d,e;e=1.0E-4*a;j8b(this.b.ab,(this.d-this.b.ab.d)*0.05);k8b(this.b.ab,(-this.e-this.b.ab.e)*0.05);kRb(this.b,this.I.ab);P5b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=bw(Brb(this.g,b),308);p8b(d.ab,5000*Math.cos(e+b));q8b(d.ab,5000*Math.sin(e+b*1.1))}_Hb(this.H.n,true);rIb(this.H.n,this.f,this.c,null,false);rIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var DO=Hkb(PTc,'MaterialsCubemapFresnel$DemoScene',1158),ZH=Hkb(YUc,'FresnelShader',766),YH=Hkb(YUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',767),WH=Hkb(YUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',768),XH=Hkb(YUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',769);$Oc(Pj)(21);