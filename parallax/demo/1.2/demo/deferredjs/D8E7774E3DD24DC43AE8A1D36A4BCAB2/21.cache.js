function U2b(){}
function a3b(){}
function gbc(){}
function pbc(){}
function mbc(){}
function ubc(){}
function tbc(){}
function ybc(){}
function xbc(){}
function xdc(){}
function hdc(){}
function sdc(){}
function pdc(){}
function wdc(){}
function Bdc(){}
function Adc(){}
function W2b(){iTb.call(this)}
function b3b(a,b){this.a=a;this.b=b}
function lbc(){lbc=Phc;kbc=new pbc}
function Bbc(){Bbc=Phc;nbc=new ubc}
function Cbc(){Cbc=Phc;obc=new ybc}
function odc(){odc=Phc;ndc=new sdc}
function Edc(){Edc=Phc;qdc=new xdc}
function Fdc(){Fdc=Phc;rdc=new Bdc}
function idc(){Vqb.call(this,(odc(),ndc))}
function hbc(){Vqb.call(this,(lbc(),kbc))}
function V2b(a,b){var c,d,e,f,g,i;d=(hSb(),jSb(Qlc,(oxb(),nxb),null));d.k=4;bEb(d.x,0.998,0.998);bEb(d.w,0.001,0.001);Gwb(d,(oob(),nob));Hwb(d,nob);xwb(d,(Nnb(),Lnb));e=jSb('./static/models/obj/leeperrysmith/Map-SPEC.jpg',nxb,null);bEb(e.x,0.998,0.998);bEb(e.w,0.001,0.001);Gwb(e,nob);Hwb(e,nob);xwb(e,Lnb);c=jSb('./static/models/obj/leeperrysmith/Map-COL.jpg',nxb,null);bEb(c.x,0.998,0.998);bEb(c.w,0.001,0.001);Gwb(c,nob);Hwb(c,nob);xwb(c,Lnb);g=new idc;i=g.i;Rvb(ms(i.a[Slc],133),(C3(),C3(),B3));Rvb(ms(i.a[Tlc],133),B3);Rvb(ms(i.a[Ulc],133),a.a.e);Rvb(ms(i.a[Vlc],133),c);Rvb(ms(i.a[Wlc],133),d);Rvb(ms(i.a[Xlc],133),e);qzb(ms(ms(i.a[Ylc],133).d,142),10526880);qzb(ms(ms(i.a[Zlc],133).d,142),10526880);qzb(ms(ms(i.a[$lc],133).d,142),10526880);Rvb(ms(i.a[_lc],133),new $3(0.145));Rvb(ms(i.a[amc],133),new $3(0.75));Rvb(ms(i.a[bmc],133),new $3(16));rFb(ms(ms(i.a[cmc],133).d,157),0.001,0.001,0.998,0.998);f=new yQb(g);f.c=true;a.b=new hRb(b,f);a.b.W.d=-50;GEb(a.b._,100);a.b.M=true;a.b.N=true;hyb(a.B,a.b)}
var Slc='enableBump',Ulc='tBeckmann',_lc='uRoughness',amc='uSpecularBrightness';_=P2b.prototype;_.pb=function T2b(){eTb(this.b,new W2b(this.a))};_=W2b.prototype=U2b.prototype=new hTb;_.gC=function X2b(){return CF};_.md=function Y2b(){Mdb(this,new bzb(27,Eeb(this.A.D),1,10000))};_.gb=function Z2b(){var a,b,c,d,e,f,g,i;this.z.W.b=1200;hyb(this.B,this.z);hyb(this.B,new ELb(5592405));f=new QLb(16777215,1.5,1000);FEb(f.W,0,0,600);hyb(this.B,f);g=new TLb(1);FEb(g.W,0.05,0.05,1);hyb(this.B,g);g.W.fe(700);g.M=true;g.u=true;g.E=2048;g.C=2048;g.y=200;g.x=1500;g.c=40;g.v=-0.005;g.A=0.15;b=new MLb(16777215,0.85);FEb(b.W,1,-0.5,1);pzb(b.H,0.6,0.3,1);hyb(this.B,b);b.W.fe(500);b.M=true;b.E=2048;b.C=2048;b.y=200;b.x=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.v=-0.005;b.A=0.15;c=new MLb(16777215,0.85);FEb(c.W,1,-0.5,-1);hyb(this.B,c);new Qfc(new hbc);d=new Qfc(new pgc);d.a=true;i=new Ywb(512,512);Awb(i,(fob(),_nb));zwb(i,(Vnb(),Tnb));xwb(i,(Nnb(),Lnb));i.f=false;this.a=new Hfc(this.A,i);e=new Xdc;try{Idc(e,Rlc,new b3b(this,e))}catch(a){a=cJ(a);if(os(a,41)){Yxb();EM(Xxb,(kM(),iM),Alc)}else throw a}Lpb(this.A,5001561,1);this.A.P=true;this.A.O=false;this.A.I=false;this.A.K=true;this.A.L=true;this.A.N=true};_.ld=function $2b(){};_.hb=function _2b(a){var b,c;b=this.c*0.001;c=this.d*0.001;if(this.b){ZDb(this.b.Z,0.05*(b-this.b.Z.d));YDb(this.b.Z,0.05*(c-this.b.Z.c))}rpb(this.A)};_.cM={223:1};_.a=null;_.b=null;_.c=0;_.d=0;_=b3b.prototype=a3b.prototype=new Kb;_.gC=function c3b(){return BF};_.Xe=function d3b(){V2b(this.a,this.b.b)};_.a=null;_.b=null;_=hbc.prototype=gbc.prototype=new Hqb;_.gC=function ibc(){return dH};_.qd=function jbc(){};_.cM={131:1};var kbc;_=pbc.prototype=mbc.prototype=new Kb;_.gC=function qbc(){return cH};_.td=function rbc(){return Bbc(),nbc};_.ud=function sbc(){return Cbc(),obc};var nbc=null,obc=null;_=ubc.prototype=tbc.prototype=new Kb;_.gC=function vbc(){return aH};_.Vb=function wbc(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=ybc.prototype=xbc.prototype=new Kb;_.gC=function zbc(){return bH};_.Vb=function Abc(){return dmc};_=idc.prototype=hdc.prototype=new Hqb;_.gC=function jdc(){return iH};_.qd=function kdc(){Rqb(this,qwb());Rqb(this,rwb());Rqb(this,swb());Kqb(this,Slc,new Tvb((lwb(),awb),C4(0)));Kqb(this,Tlc,new Tvb(awb,C4(0)));Kqb(this,Vlc,new Svb(dwb));Kqb(this,Ulc,new Svb(dwb));Kqb(this,Zlc,new Tvb(Yvb,new vzb(15658734)));Kqb(this,$lc,new Tvb(Yvb,new vzb(1118481)));Kqb(this,Ylc,new Tvb(Yvb,new vzb(328965)));Kqb(this,emc,new Tvb(Zvb,new $3(1)));Kqb(this,_lc,new Tvb(Zvb,new $3(0.15)));Kqb(this,amc,new Tvb(Zvb,new $3(0.75)));Kqb(this,Wlc,new Svb(dwb));Kqb(this,bmc,new Tvb(Zvb,new $3(1)));Kqb(this,Xlc,new Svb(dwb));Kqb(this,cmc,new Tvb(jwb,new uFb(0,0,1,1)));Kqb(this,'uWrapRGB',new Tvb(hwb,new LEb(0.75,0.375,0.1875)))};_.rd=function ldc(a){var b,c;c=new bab(ds(oI,{87:1,99:1},1,[fmc,gmc,hmc]));b=new bab(ds(oI,{87:1,99:1},1,[imc,jmc,kmc]));Tqb(this,_qb(a,ds(qI,{87:1,99:1},106,[c,b])))};_.sd=function mdc(a){var b,c;c=new bab(ds(oI,{87:1,99:1},1,[lmc]));b=new bab(ds(oI,{87:1,99:1},1,[mmc]));Uqb(this,_qb(a,ds(qI,{87:1,99:1},106,[c,b])))};_.cM={131:1};var ndc;_=sdc.prototype=pdc.prototype=new Kb;_.gC=function tdc(){return hH};_.td=function udc(){return Edc(),qdc};_.ud=function vdc(){return Fdc(),rdc};var qdc=null,rdc=null;_=xdc.prototype=wdc.prototype=new Kb;_.gC=function ydc(){return fH};_.Vb=function zdc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=Bdc.prototype=Adc.prototype=new Kb;_.gC=function Cdc(){return gH};_.Vb=function Ddc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var CF=O3(qlc,'MaterialsBumpmapSkin$DemoScene'),BF=O3(qlc,'MaterialsBumpmapSkin$DemoScene$1'),dH=O3(tlc,'BeckmannShader'),cH=O3(tlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator'),aH=O3(tlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1'),bH=O3(tlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2'),iH=O3(tlc,'SkinSimpleShader'),hH=O3(tlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator'),fH=O3(tlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1'),gH=O3(tlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2');Rhc(Vd)(21);