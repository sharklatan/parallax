function w2b(){}
function E2b(){}
function Kac(){}
function Tac(){}
function Qac(){}
function Yac(){}
function Xac(){}
function _ac(){}
function _cc(){}
function Lcc(){}
function Wcc(){}
function Tcc(){}
function $cc(){}
function abc(){}
function ddc(){}
function cdc(){}
function y2b(){MSb.call(this)}
function F2b(a,b){this.b=a;this.c=b}
function dbc(){dbc=rhc;Rac=new Yac}
function ebc(){ebc=rhc;Sac=new abc}
function Pac(){Pac=rhc;Oac=new Tac}
function Scc(){Scc=rhc;Rcc=new Wcc}
function gdc(){gdc=rhc;Ucc=new _cc}
function hdc(){hdc=rhc;Vcc=new ddc}
function Mcc(){xqb.call(this,(Scc(),Rcc))}
function Lac(){xqb.call(this,(Pac(),Oac))}
function x2b(a,b){var c,d,e,f,g,i;d=(LRb(),NRb(nlc,(Swb(),Rwb),null));d.n=4;FDb(d.y,0.998,0.998);FDb(d.x,0.001,0.001);iwb(d,(Snb(),Rnb));jwb(d,Rnb);_vb(d,(pnb(),nnb));e=NRb('./static/models/obj/leeperrysmith/Map-SPEC.jpg',Rwb,null);FDb(e.y,0.998,0.998);FDb(e.x,0.001,0.001);iwb(e,Rnb);jwb(e,Rnb);_vb(e,nnb);c=NRb('./static/models/obj/leeperrysmith/Map-COL.jpg',Rwb,null);FDb(c.y,0.998,0.998);FDb(c.x,0.001,0.001);iwb(c,Rnb);jwb(c,Rnb);_vb(c,nnb);g=new Mcc;i=g.j;tvb(is(i.b[plc],133),(e3(),e3(),d3));tvb(is(i.b[qlc],133),d3);tvb(is(i.b[rlc],133),a.b.f);tvb(is(i.b[slc],133),c);tvb(is(i.b[tlc],133),d);tvb(is(i.b[ulc],133),e);Uyb(is(is(i.b[vlc],133).e,142),10526880);Uyb(is(is(i.b[wlc],133).e,142),10526880);Uyb(is(is(i.b[xlc],133).e,142),10526880);tvb(is(i.b[ylc],133),new C3(0.145));tvb(is(i.b[zlc],133),new C3(0.75));tvb(is(i.b[Alc],133),new C3(16));VEb(is(is(i.b[Blc],133).e,157),0.001,0.001,0.998,0.998);f=new aQb(g);f.d=true;a.c=new LQb(b,f);a.c.X.e=-50;iEb(a.c.ab,100);a.c.N=true;a.c.O=true;Lxb(a.C,a.c)}
var plc='enableBump',rlc='tBeckmann',ylc='uRoughness',zlc='uSpecularBrightness';_=r2b.prototype;_.qb=function v2b(){ISb(this.c,new y2b(this.b))};_=y2b.prototype=w2b.prototype=new LSb;_.gC=function z2b(){return wF};_.md=function A2b(){odb(this,new Fyb(27,geb(this.B.E),1,10000))};_.hb=function B2b(){var a,b,c,d,e,f,g,i;this.A.X.c=1200;Lxb(this.C,this.A);Lxb(this.C,new gLb(5592405));f=new sLb(16777215,1.5,1000);hEb(f.X,0,0,600);Lxb(this.C,f);g=new vLb(1);hEb(g.X,0.05,0.05,1);Lxb(this.C,g);g.X.fe(700);g.N=true;g.v=true;g.F=2048;g.D=2048;g.z=200;g.y=1500;g.d=40;g.w=-0.005;g.B=0.15;b=new oLb(16777215,0.85);hEb(b.X,1,-0.5,1);Tyb(b.I,0.6,0.3,1);Lxb(this.C,b);b.X.fe(500);b.N=true;b.F=2048;b.D=2048;b.z=200;b.y=1500;b.f=-500;b.g=500;b.i=500;b.e=-500;b.w=-0.005;b.B=0.15;c=new oLb(16777215,0.85);hEb(c.X,1,-0.5,-1);Lxb(this.C,c);new sfc(new Lac);d=new sfc(new Tfc);d.b=true;i=new Awb(512,512);cwb(i,(Jnb(),Dnb));bwb(i,(xnb(),vnb));_vb(i,(pnb(),nnb));i.g=false;this.b=new jfc(this.B,i);e=new zdc;try{kdc(e,olc,new F2b(this,e))}catch(a){a=YI(a);if(ks(a,41)){Axb();sM(zxb,($L(),YL),Zkc)}else throw a}npb(this.B,5001561,1);this.B.Q=true;this.B.P=false;this.B.J=false;this.B.L=true;this.B.M=true;this.B.O=true};_.ld=function C2b(){};_.ib=function D2b(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){BDb(this.c.$,0.05*(b-this.c.$.e));ADb(this.c.$,0.05*(c-this.c.$.d))}Vob(this.B)};_.cM={223:1};_.b=null;_.c=null;_.d=0;_.e=0;_=F2b.prototype=E2b.prototype=new Kb;_.gC=function G2b(){return vF};_.Xe=function H2b(){x2b(this.b,this.c.c)};_.b=null;_.c=null;_=Lac.prototype=Kac.prototype=new jqb;_.gC=function Mac(){return ZG};_.qd=function Nac(){};_.cM={131:1};var Oac;_=Tac.prototype=Qac.prototype=new Kb;_.gC=function Uac(){return YG};_.td=function Vac(){return dbc(),Rac};_.ud=function Wac(){return ebc(),Sac};var Rac=null,Sac=null;_=Yac.prototype=Xac.prototype=new Kb;_.gC=function Zac(){return WG};_.Vb=function $ac(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=abc.prototype=_ac.prototype=new Kb;_.gC=function bbc(){return XG};_.Vb=function cbc(){return Clc};_=Mcc.prototype=Lcc.prototype=new jqb;_.gC=function Ncc(){return cH};_.qd=function Occ(){tqb(this,Uvb());tqb(this,Vvb());tqb(this,Wvb());mqb(this,plc,new vvb((Pvb(),Evb),e4(0)));mqb(this,qlc,new vvb(Evb,e4(0)));mqb(this,slc,new uvb(Hvb));mqb(this,rlc,new uvb(Hvb));mqb(this,wlc,new vvb(Avb,new Zyb(15658734)));mqb(this,xlc,new vvb(Avb,new Zyb(1118481)));mqb(this,vlc,new vvb(Avb,new Zyb(328965)));mqb(this,Dlc,new vvb(Bvb,new C3(1)));mqb(this,ylc,new vvb(Bvb,new C3(0.15)));mqb(this,zlc,new vvb(Bvb,new C3(0.75)));mqb(this,tlc,new uvb(Hvb));mqb(this,Alc,new vvb(Bvb,new C3(1)));mqb(this,ulc,new uvb(Hvb));mqb(this,Blc,new vvb(Nvb,new YEb(0,0,1,1)));mqb(this,'uWrapRGB',new vvb(Lvb,new nEb(0.75,0.375,0.1875)))};_.rd=function Pcc(a){var b,c;c=new F9(_r(iI,{87:1,99:1},1,[Elc,Flc,Glc]));b=new F9(_r(iI,{87:1,99:1},1,[Hlc,Ilc,Jlc]));vqb(this,Dqb(a,_r(kI,{87:1,99:1},106,[c,b])))};_.sd=function Qcc(a){var b,c;c=new F9(_r(iI,{87:1,99:1},1,[Klc]));b=new F9(_r(iI,{87:1,99:1},1,[Llc]));wqb(this,Dqb(a,_r(kI,{87:1,99:1},106,[c,b])))};_.cM={131:1};var Rcc;_=Wcc.prototype=Tcc.prototype=new Kb;_.gC=function Xcc(){return bH};_.td=function Ycc(){return gdc(),Ucc};_.ud=function Zcc(){return hdc(),Vcc};var Ucc=null,Vcc=null;_=_cc.prototype=$cc.prototype=new Kb;_.gC=function adc(){return _G};_.Vb=function bdc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=ddc.prototype=cdc.prototype=new Kb;_.gC=function edc(){return aH};_.Vb=function fdc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var wF=q3(Pkc,'MaterialsBumpmapSkin$DemoScene'),vF=q3(Pkc,'MaterialsBumpmapSkin$DemoScene$1'),ZG=q3(Skc,'BeckmannShader'),YG=q3(Skc,'BeckmannShader_Resources_default_InlineClientBundleGenerator'),WG=q3(Skc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1'),XG=q3(Skc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2'),cH=q3(Skc,'SkinSimpleShader'),bH=q3(Skc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator'),_G=q3(Skc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1'),aH=q3(Skc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2');thc(Vd)(21);