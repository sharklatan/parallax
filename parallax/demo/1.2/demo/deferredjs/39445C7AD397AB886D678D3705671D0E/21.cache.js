function j3b(){}
function r3b(){}
function xbc(){}
function Gbc(){}
function Dbc(){}
function Lbc(){}
function Kbc(){}
function Pbc(){}
function Obc(){}
function Odc(){}
function ydc(){}
function Jdc(){}
function Gdc(){}
function Ndc(){}
function Sdc(){}
function Rdc(){}
function l3b(){zTb.call(this)}
function s3b(a,b){this.a=a;this.b=b}
function Cbc(){Cbc=eic;Bbc=new Gbc}
function Sbc(){Sbc=eic;Ebc=new Lbc}
function Tbc(){Tbc=eic;Fbc=new Pbc}
function Fdc(){Fdc=eic;Edc=new Jdc}
function Vdc(){Vdc=eic;Hdc=new Odc}
function Wdc(){Wdc=eic;Idc=new Sdc}
function zdc(){krb.call(this,(Fdc(),Edc))}
function ybc(){krb.call(this,(Cbc(),Bbc))}
function k3b(a,b){var c,d,e,f,g,i;d=(ySb(),ASb(imc,(Fxb(),Exb),null));d.k=4;sEb(d.x,0.998,0.998);sEb(d.w,0.001,0.001);Xwb(d,(Fob(),Eob));Ywb(d,Eob);Owb(d,(cob(),aob));e=ASb('./static/models/obj/leeperrysmith/Map-SPEC.jpg',Exb,null);sEb(e.x,0.998,0.998);sEb(e.w,0.001,0.001);Xwb(e,Eob);Ywb(e,Eob);Owb(e,aob);c=ASb('./static/models/obj/leeperrysmith/Map-COL.jpg',Exb,null);sEb(c.x,0.998,0.998);sEb(c.w,0.001,0.001);Xwb(c,Eob);Ywb(c,Eob);Owb(c,aob);g=new zdc;i=g.i;gwb(ws(i.a[kmc],133),(T3(),T3(),S3));gwb(ws(i.a[lmc],133),S3);gwb(ws(i.a[mmc],133),a.a.e);gwb(ws(i.a[nmc],133),c);gwb(ws(i.a[omc],133),d);gwb(ws(i.a[pmc],133),e);Hzb(ws(ws(i.a[qmc],133).d,142),10526880);Hzb(ws(ws(i.a[rmc],133).d,142),10526880);Hzb(ws(ws(i.a[smc],133).d,142),10526880);gwb(ws(i.a[tmc],133),new p4(0.145));gwb(ws(i.a[umc],133),new p4(0.75));gwb(ws(i.a[vmc],133),new p4(16));IFb(ws(ws(i.a[wmc],133).d,157),0.001,0.001,0.998,0.998);f=new PQb(g);f.c=true;a.b=new yRb(b,f);a.b.W.d=-50;XEb(a.b._,100);a.b.M=true;a.b.N=true;yyb(a.B,a.b)}
var kmc='enableBump',mmc='tBeckmann',tmc='uRoughness',umc='uSpecularBrightness';_=e3b.prototype;_.pb=function i3b(){vTb(this.b,new l3b(this.a))};_=l3b.prototype=j3b.prototype=new yTb;_.gC=function m3b(){return MF};_.md=function n3b(){beb(this,new szb(27,Veb(this.A.D),1,10000))};_.gb=function o3b(){var a,b,c,d,e,f,g,i;this.z.W.b=1200;yyb(this.B,this.z);yyb(this.B,new VLb(5592405));f=new fMb(16777215,1.5,1000);WEb(f.W,0,0,600);yyb(this.B,f);g=new iMb(1);WEb(g.W,0.05,0.05,1);yyb(this.B,g);g.W.fe(700);g.M=true;g.u=true;g.E=2048;g.C=2048;g.y=200;g.x=1500;g.c=40;g.v=-0.005;g.A=0.15;b=new bMb(16777215,0.85);WEb(b.W,1,-0.5,1);Gzb(b.H,0.6,0.3,1);yyb(this.B,b);b.W.fe(500);b.M=true;b.E=2048;b.C=2048;b.y=200;b.x=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.v=-0.005;b.A=0.15;c=new bMb(16777215,0.85);WEb(c.W,1,-0.5,-1);yyb(this.B,c);new fgc(new ybc);d=new fgc(new Ggc);d.a=true;i=new nxb(512,512);Rwb(i,(wob(),qob));Qwb(i,(kob(),iob));Owb(i,(cob(),aob));i.f=false;this.a=new Yfc(this.A,i);e=new mec;try{Zdc(e,jmc,new s3b(this,e))}catch(a){a=mJ(a);if(ys(a,41)){nyb();OM(myb,(uM(),sM),Ulc)}else throw a}aqb(this.A,5001561,1);this.A.P=true;this.A.O=false;this.A.I=false;this.A.K=true;this.A.L=true;this.A.N=true};_.ld=function p3b(){};_.hb=function q3b(a){var b,c;b=this.c*0.001;c=this.d*0.001;if(this.b){oEb(this.b.Z,0.05*(b-this.b.Z.d));nEb(this.b.Z,0.05*(c-this.b.Z.c))}Ipb(this.A)};_.cM={223:1};_.a=null;_.b=null;_.c=0;_.d=0;_=s3b.prototype=r3b.prototype=new Kb;_.gC=function t3b(){return LF};_.Xe=function u3b(){k3b(this.a,this.b.b)};_.a=null;_.b=null;_=ybc.prototype=xbc.prototype=new Yqb;_.gC=function zbc(){return nH};_.qd=function Abc(){};_.cM={131:1};var Bbc;_=Gbc.prototype=Dbc.prototype=new Kb;_.gC=function Hbc(){return mH};_.td=function Ibc(){return Sbc(),Ebc};_.ud=function Jbc(){return Tbc(),Fbc};var Ebc=null,Fbc=null;_=Lbc.prototype=Kbc.prototype=new Kb;_.gC=function Mbc(){return kH};_.Vb=function Nbc(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=Pbc.prototype=Obc.prototype=new Kb;_.gC=function Qbc(){return lH};_.Vb=function Rbc(){return xmc};_=zdc.prototype=ydc.prototype=new Yqb;_.gC=function Adc(){return sH};_.qd=function Bdc(){grb(this,Hwb());grb(this,Iwb());grb(this,Jwb());_qb(this,kmc,new iwb((Cwb(),rwb),T4(0)));_qb(this,lmc,new iwb(rwb,T4(0)));_qb(this,nmc,new hwb(uwb));_qb(this,mmc,new hwb(uwb));_qb(this,rmc,new iwb(nwb,new Mzb(15658734)));_qb(this,smc,new iwb(nwb,new Mzb(1118481)));_qb(this,qmc,new iwb(nwb,new Mzb(328965)));_qb(this,ymc,new iwb(owb,new p4(1)));_qb(this,tmc,new iwb(owb,new p4(0.15)));_qb(this,umc,new iwb(owb,new p4(0.75)));_qb(this,omc,new hwb(uwb));_qb(this,vmc,new iwb(owb,new p4(1)));_qb(this,pmc,new hwb(uwb));_qb(this,wmc,new iwb(Awb,new LFb(0,0,1,1)));_qb(this,'uWrapRGB',new iwb(ywb,new aFb(0.75,0.375,0.1875)))};_.rd=function Cdc(a){var b,c;c=new sab(ns(yI,{87:1,99:1},1,[zmc,Amc,Bmc]));b=new sab(ns(yI,{87:1,99:1},1,[Cmc,Dmc,Emc]));irb(this,qrb(a,ns(AI,{87:1,99:1},106,[c,b])))};_.sd=function Ddc(a){var b,c;c=new sab(ns(yI,{87:1,99:1},1,[Fmc]));b=new sab(ns(yI,{87:1,99:1},1,[Gmc]));jrb(this,qrb(a,ns(AI,{87:1,99:1},106,[c,b])))};_.cM={131:1};var Edc;_=Jdc.prototype=Gdc.prototype=new Kb;_.gC=function Kdc(){return rH};_.td=function Ldc(){return Vdc(),Hdc};_.ud=function Mdc(){return Wdc(),Idc};var Hdc=null,Idc=null;_=Odc.prototype=Ndc.prototype=new Kb;_.gC=function Pdc(){return pH};_.Vb=function Qdc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=Sdc.prototype=Rdc.prototype=new Kb;_.gC=function Tdc(){return qH};_.Vb=function Udc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var MF=d4(Klc,'MaterialsBumpmapSkin$DemoScene'),LF=d4(Klc,'MaterialsBumpmapSkin$DemoScene$1'),nH=d4(Nlc,'BeckmannShader'),mH=d4(Nlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator'),kH=d4(Nlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1'),lH=d4(Nlc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2'),sH=d4(Nlc,'SkinSimpleShader'),rH=d4(Nlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator'),pH=d4(Nlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1'),qH=d4(Nlc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2');gic(Vd)(21);