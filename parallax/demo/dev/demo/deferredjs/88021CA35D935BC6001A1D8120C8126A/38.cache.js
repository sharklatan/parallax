function vtc(){}
function ztc(){}
function Ctc(){}
function Eyc(){}
function Iyc(){}
function Lyc(){}
function rJc(){}
function vJc(){}
function yJc(){}
function NKc(){}
function RKc(){}
function UKc(){}
function ULc(){}
function eLc(){}
function iLc(){}
function lLc(){}
function xLc(){}
function BLc(){}
function ELc(){}
function QLc(){}
function XLc(){}
function RYb(a,b){a.c=b}
function M7b(a,b){a.n=b}
function XIc(a,b){wqb(a.c,b)}
function itc(a){this.b=a}
function ltc(a){this.b=a}
function otc(a){this.b=a}
function rtc(){rtc=RMc;qtc=new vtc}
function Etc(){Etc=RMc;ttc=new ztc}
function Ftc(){Ftc=RMc;utc=new Ctc}
function Ayc(){Ayc=RMc;zyc=new Eyc}
function Nyc(){Nyc=RMc;Cyc=new Iyc}
function Oyc(){Oyc=RMc;Dyc=new Lyc}
function nJc(){nJc=RMc;mJc=new rJc}
function AJc(){AJc=RMc;pJc=new vJc}
function BJc(){BJc=RMc;qJc=new yJc}
function JKc(){JKc=RMc;IKc=new NKc}
function WKc(){WKc=RMc;LKc=new RKc}
function XKc(){XKc=RMc;MKc=new UKc}
function aLc(){aLc=RMc;_Kc=new eLc}
function nLc(){nLc=RMc;cLc=new iLc}
function oLc(){oLc=RMc;dLc=new lLc}
function tLc(){tLc=RMc;sLc=new xLc}
function GLc(){GLc=RMc;vLc=new BLc}
function HLc(){HLc=RMc;wLc=new ELc}
function MLc(){MLc=RMc;LLc=new QLc}
function ZLc(){ZLc=RMc;OLc=new ULc}
function $Lc(){$Lc=RMc;PLc=new XLc}
function ftc(a,b){this.b=a;this.c=b}
function qLc(){FIb.call(this,(tLc(),sLc))}
function JLc(){FIb.call(this,(MLc(),LLc))}
function ZKc(){FIb.call(this,(aLc(),_Kc))}
function GKc(){FIb.call(this,(JKc(),IKc))}
function vyc(){FIb.call(this,(Ayc(),zyc))}
function kJc(){FIb.call(this,(nJc(),mJc))}
function $sc(a){a.A+=1;a.A==3&&APb(a.w,true)}
function _sc(){L9b.call(this);this.b=0;this.k=0;this.j=1;this.v=1000;this.u=1000;this.D=true}
function Zsc(a,b,c,d){var e,f,g;g=new x2b(b);TMb(Eu(URb(pZb(g).j,jUc),225),c);f=new r8b;e=new E7b(new JWb(a.v,a.u),g);c6b(e.ab,-500);pPb(f,e);UGb(a.H.n,f,a.d,d,true)}
function Ysc(a,b,c,d,e,f){var g,i;g=new p0b;i0b(g,new l3b(16755285));g.k=true;n0b(g,(h$b(),e$b));i=new O7b(b,g);i.e=c;M7b(i,Mu(600*$kb()));a6b(i.ab,d,e,f);z3b(i.db,1.5707963267948966);i.T=true;i.V=true;pPb(a.I,i);wqb(a.o,i)}
var zVc='enableDiffuse1',AVc='enableDiffuse2',sVc='h',uVc='heightMap',FVc='heightmap',EVc='offset',GVc='r',yVc='tDetail',wVc='tDiffuse1',xVc='tDiffuse2',CVc='uRepeatOverlay',tVc='v';mU(1232,1,COc);_.Db=function Wsc(){l9b(this.c,new _sc(this.b))};mU(1233,967,{78:1,186:1,338:1},_sc);_.Xd=function atc(a){$sc(this)};_.Jd=function btc(a){this.v=a.b.$;this.u=a.b.Z;TMb(Eu(URb(pZb(this.g.c).j,sVc),225),new Tjb(6/this.v));TMb(Eu(URb(pZb(this.F.c).j,tVc),225),new Tjb(6/this.u))};_.ob=function ctc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;tt((Mxb(),Lxb),(Wxb(),Vxb),this);this.c=new sQb(40,IGb(this.H.n),2,4000);this.v=this.H.n.$;this.u=this.H.n.Z;this.d=new dQb(this.v,this.u,-10000,10000);a6b(this.c.ab,-1200,800,1200);c6b(this.d.ab,100);this.t=new r8b;pPb(this.t,this.d);this.e=new Rwb(this.c,this.H.d);_5b(this.e.w,0);this.e.t=1;this.e.B=1.2;Owb(this.e,0.8);this.e.i=true;this.e.f=true;this.e.g=true;Mwb(this.e,0.15);p8b(this.I,new f8b(328965,2000,4000));pPb(this.I,new ZXb(1118481));this.f=new AYb(16777215,1.15);a6b(this.f.ab,500,2000,0);pPb(this.I,this.f);this.r=new TYb(16729088,1.5,0);_5b(this.r.ab,0);pPb(this.I,this.r);this.i=new pOb(256,256);HNb(this.i,(tEb(),oEb));FNb(this.i,(iEb(),gEb));CNb(this.i,(ECb(),CCb));DNb(this.i,false);this.p=new pOb(256,256);HNb(this.p,oEb);FNb(this.p,gEb);CNb(this.p,CCb);DNb(this.p,false);n=new qLc;u=n.j;TMb(Eu(u.b[aRc],225),new Tjb(0.05));o5b(Eu(Eu(u.b[PUc],225).e,297),256,256);TMb(Eu(u.b[uVc],225),this.i);s=new pOb(2048,2048);HNb(s,oEb);FNb(s,gEb);CNb(s,CCb);s.s=false;ONb(s,(LFb(),KFb));PNb(s,KFb);c=new VNb('./static/textures/terrain/grasslight-big.jpg',new ftc(this,s));ONb(c,KFb);PNb(c,KFb);d=new VNb('./static/textures/terrain/backgrounddetailed6.jpg',this);ONb(d,KFb);PNb(d,KFb);b=new VNb('./static/textures/terrain/grasslight-big-nm.jpg',this);ONb(b,KFb);PNb(b,KFb);t=new vyc;this.C=t.j;TMb(Eu(URb(this.C,JUc),225),this.p);TMb(Eu(URb(this.C,KUc),225),new Tjb(3.5));TMb(Eu(URb(this.C,vVc),225),this.i);TMb(Eu(URb(this.C,wVc),225),c);TMb(Eu(URb(this.C,xVc),225),d);TMb(Eu(URb(this.C,LUc),225),s);TMb(Eu(URb(this.C,yVc),225),b);TMb(Eu(URb(this.C,zVc),225),(Uib(),Uib(),Tib));TMb(Eu(URb(this.C,AVc),225),Tib);TMb(Eu(URb(this.C,hUc),225),Tib);i3b(Eu(Eu(URb(this.C,nUc),225).e,293),16777215);i3b(Eu(Eu(URb(this.C,oUc),225).e,293),16777215);i3b(Eu(Eu(URb(this.C,mUc),225).e,293),1118481);TMb(Eu(URb(this.C,OUc),225),new Tjb(30));TMb(Eu(URb(this.C,BVc),225),new Tjb(375));o5b(Eu(Eu(URb(this.C,CVc),225).e,297),6,6);this.B=new otb;Mob(this.B,SUc,new VMb((mNb(),$Mb),new Tjb(1)));Mob(this.B,DVc,new VMb(gNb,new s5b(1.5,1.5)));Mob(this.B,EVc,new VMb(gNb,new s5b(0,0)));this.n=new otb;i=new w2b((rtc(),qtc));AIb(pZb(i),this.B);i.d=false;i.c=true;Mob(this.n,FVc,i);j=new x2b(n);AIb(pZb(j),u);j.d=false;j.c=true;Mob(this.n,dUc,j);k=new x2b(t);AIb(pZb(k),this.C);k.d=true;k.c=true;Mob(this.n,'terrain',k);o=new JWb(this.v,this.u);p=new w_b;q_b(p,new l3b(0));this.s=new E7b(o,p);c6b(this.s.ab,-500);pPb(this.t,this.s);g=new KWb(6000,6000,64,64);ZQb(g);this.w=new E7b(g,k);a6b(this.w.ab,0,-125,0);y3b(this.w.db,-1.5707963267948966);APb(this.w,false);pPb(this.I,this.w);eHb(this.H.n,this.I.b.d,1);this.H.n.bb=true;this.H.n.cb=true;aHb(this.H.n,false);q=new eJc(this.I,this.c);f=new RIc(0.6);e=new hJc(new kJc);TMb(Eu(URb(pZb(e.c).j,tUc),225),new Tjb(0.65));this.g=new hJc(new GKc);this.F=new hJc(new JLc);TMb(Eu(URb(pZb(this.g.c).j,sVc),225),new Tjb(6/this.v));TMb(Eu(URb(pZb(this.F.c).j,tVc),225),new Tjb(6/this.u));TMb(Eu(URb(pZb(this.g.c).j,GVc),225),new Tjb(0.5));TMb(Eu(URb(pZb(this.F.c).j,GVc),225),new Tjb(0.5));this.F.b=true;r=new pOb(this.v,this.u);HNb(s,nEb);FNb(s,gEb);CNb(s,CCb);s.g=false;s.s=false;a=new ZIc(this.H.n,r);wqb(a.c,q);wqb(a.c,f);wqb(a.c,e);XIc(a,this.g);XIc(a,this.F);this.o=new Gqb;new Dzc('./static/models/animated/parrot.js',new itc(this));new Dzc(rVc,new ltc(this));new Dzc('./static/models/animated/stork.js',new otc(this));this.q=Bh()};_.pb=function dtc(a){var b,c,d,e,f;b=(Bh()-this.q)*0.001;if(this.w.hb){Pwb(this.e);this.k=I3b(this.k+0.5*b*this.j,0.4,0.825);f=(this.k-0.4)/0.42499999999999993;e=0.95+f*-0.7;h3b(this.I.b.d,0.1,e,this.k);eHb(this.H.n,this.I.b.d,1);hYb(this.f,0.1+f*1.0499999999999998);RYb(this.r,0.9+f*0.6);TMb(Eu(URb(this.C,KUc),225),new Tjb(0.6+f*2.9));if(this.D){this.b=I3b(this.b+-7.5E-4,0,0.05);TMb(Eu(Hob(this.B,SUc),225),new Tjb(Eu(Eu(Hob(this.B,SUc),225).e,150).b+b*this.b));k5b(Eu(Eu(Hob(this.B,EVc),225).e,297),b*0.05);p5b(Eu(Eu(URb(this.C,HVc),225).e,297),4*Eu(Eu(Hob(this.B,EVc),225).e,297).d);cTb(this.s,Eu(Hob(this.n,FVc),282));UGb(this.H.n,this.t,this.d,this.i,true);cTb(this.s,Eu(Hob(this.n,dUc),282));UGb(this.H.n,this.t,this.d,this.p,true);this.D=false}for(c=0;c<this.o.c;c++){d=Eu(zqb(this.o,c),305);N7b(d,Mu(1000*b));k5b(d.ab,d.e*b);d.ab.d>2000&&p5b(d.ab,-1500-$kb()*500)}UGb(this.H.n,this.I,this.c,null,false)}this.q=Bh()};_.b=0;_.j=0;_.k=0;_.q=0;_.u=0;_.v=0;_.A=0;_.D=false;mU(1234,1,{},ftc);_.Xd=function gtc(a){$sc(this.b);Zsc(this.b,new ZKc,a,this.c)};mU(1235,1,{},itc);_.Ef=function jtc(a,b){yzc((Eu(a,339),Eu(b,242)));Ysc(this.b,Eu(b,242),500,-3500,500,700);Ysc(this.b,Eu(b,242),500,-3000-$kb()*500,500,-200);Ysc(this.b,Eu(b,242),500,-3000-$kb()*500,500,200);Ysc(this.b,Eu(b,242),500,-3000-$kb()*500,500,1000)};mU(1236,1,{},ltc);_.Ef=function mtc(a,b){yzc((Eu(a,339),Eu(b,242)));Ysc(this.b,Eu(b,242),1000,-3000-$kb()*500,350,40)};mU(1237,1,{},otc);_.Ef=function ptc(a,b){yzc((Eu(a,339),Eu(b,242)));Ysc(this.b,Eu(b,242),1000,-3000-$kb()*500,350,340)};var qtc;mU(1238,1,{},vtc);_.Rd=function wtc(){return Etc(),ttc};_.Sd=function xtc(){return Ftc(),utc};var ttc,utc;mU(1239,1,{},ztc);_.qc=function Atc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};mU(1240,1,{},Ctc);_.qc=function Dtc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};mU(1346,725,pOc,vyc);_.Od=function wyc(){AIb(this,qNb());AIb(this,rNb());AIb(this,sNb());tIb(this,zVc,new VMb((mNb(),bNb),(Uib(),Uib(),Sib)));tIb(this,AVc,new VMb(bNb,Sib));tIb(this,hUc,new VMb(bNb,Sib));tIb(this,IVc,new VMb(bNb,Sib));tIb(this,wVc,new UMb(eNb));tIb(this,xVc,new UMb(eNb));tIb(this,yVc,new UMb(eNb));tIb(this,JUc,new UMb(eNb));tIb(this,LUc,new UMb(eNb));tIb(this,vVc,new UMb(eNb));tIb(this,KUc,new VMb($Mb,new Tjb(1)));tIb(this,JVc,new VMb($Mb,new Tjb(0)));tIb(this,BVc,new VMb($Mb,new Tjb(1)));tIb(this,nUc,new VMb(ZMb,new l3b(15658734)));tIb(this,oUc,new VMb(ZMb,new l3b(1118481)));tIb(this,mUc,new VMb(ZMb,new l3b(328965)));tIb(this,OUc,new VMb($Mb,new Tjb(30)));tIb(this,tUc,new VMb($Mb,new Tjb(1)));tIb(this,'uRepeatBase',new VMb(gNb,new s5b(1,1)));tIb(this,CVc,new VMb(gNb,new s5b(1,1)));tIb(this,HVc,new VMb(gNb,new s5b(0,0)))};_.Pd=function xyc(a){var b,c;c=new crb(uu(jS,XMc,1,[uUc,vUc]));b=new crb(uu(jS,XMc,1,[xUc,yUc,zUc]));CIb(this,KIb(a,uu(mS,XMc,173,[c,b])))};_.Qd=function yyc(a){var b,c;c=new crb(uu(jS,XMc,1,[AUc]));b=new crb(uu(jS,XMc,1,[BUc]));DIb(this,KIb(a,uu(mS,XMc,173,[c,b])))};var zyc;mU(1347,1,{},Eyc);_.Rd=function Fyc(){return Nyc(),Cyc};_.Sd=function Gyc(){return Oyc(),Dyc};var Cyc,Dyc;mU(1348,1,{},Iyc);_.qc=function Jyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};mU(1349,1,{},Lyc);_.qc=function Myc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};mU(1441,725,pOc,kJc);_.Od=function lJc(){tIb(this,jUc,new UMb((mNb(),eNb)));tIb(this,tUc,new VMb($Mb,new Tjb(1)))};var mJc;mU(1442,1,{},rJc);_.Rd=function sJc(){return AJc(),pJc};_.Sd=function tJc(){return BJc(),qJc};var pJc,qJc;mU(1443,1,{},vJc);_.qc=function wJc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};mU(1444,1,{},yJc);_.qc=function zJc(){return $Uc};mU(1465,725,pOc,GKc);_.Od=function HKc(){tIb(this,jUc,new UMb((mNb(),eNb)));tIb(this,sVc,new VMb($Mb,new Tjb(0.001953125)));tIb(this,GVc,new VMb($Mb,new Tjb(0.35)))};var IKc;mU(1466,1,{},NKc);_.Rd=function OKc(){return WKc(),LKc};_.Sd=function PKc(){return XKc(),MKc};var LKc,MKc;mU(1467,1,{},RKc);_.qc=function SKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};mU(1468,1,{},UKc);_.qc=function VKc(){return $Uc};mU(1471,725,pOc,ZKc);_.Od=function $Kc(){tIb(this,jUc,new UMb((mNb(),eNb)))};var _Kc;mU(1472,1,{},eLc);_.Rd=function fLc(){return nLc(),cLc};_.Sd=function gLc(){return oLc(),dLc};var cLc,dLc;mU(1473,1,{},iLc);_.qc=function jLc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};mU(1474,1,{},lLc);_.qc=function mLc(){return $Uc};mU(1477,725,pOc,qLc);_.Od=function rLc(){tIb(this,uVc,new UMb((mNb(),eNb)));tIb(this,PUc,new VMb(gNb,new s5b(512,512)));tIb(this,DVc,new VMb(gNb,new s5b(1,1)));tIb(this,aRc,new VMb($Mb,new Tjb(0.05)))};var sLc;mU(1478,1,{},xLc);_.Rd=function yLc(){return GLc(),vLc};_.Sd=function zLc(){return HLc(),wLc};var vLc,wLc;mU(1479,1,{},BLc);_.qc=function CLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};mU(1480,1,{},ELc);_.qc=function FLc(){return $Uc};mU(1483,725,pOc,JLc);_.Od=function KLc(){tIb(this,jUc,new UMb((mNb(),eNb)));tIb(this,tVc,new VMb($Mb,new Tjb(0.001953125)));tIb(this,GVc,new VMb($Mb,new Tjb(0.35)))};var LLc;mU(1484,1,{},QLc);_.Rd=function RLc(){return ZLc(),OLc};_.Sd=function SLc(){return $Lc(),PLc};var OLc,PLc;mU(1485,1,{},ULc);_.qc=function VLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};mU(1486,1,{},XLc);_.qc=function YLc(){return $Uc};var AO=Hjb(ATc,'TerrainDynamic$DemoScene',1233),wO=Hjb(ATc,'TerrainDynamic$DemoScene$1',1234),xO=Hjb(ATc,'TerrainDynamic$DemoScene$2',1235),yO=Hjb(ATc,'TerrainDynamic$DemoScene$3',1236),zO=Hjb(ATc,'TerrainDynamic$DemoScene$4',1237),nR=Hjb(aVc,KVc,1477),lP=Hjb(qTc,'TerrainShader',1346),RQ=Hjb(aVc,'BleachBypassShader',1441),fR=Hjb(aVc,'HorizontalTiltShiftShader',1465),rR=Hjb(aVc,'VerticalTiltShiftShader',1483),DO=Hjb(ATc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1238),BO=Hjb(ATc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1239),CO=Hjb(ATc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1240),mR=Hjb(aVc,LVc,1478),kR=Hjb(aVc,MVc,1479),lR=Hjb(aVc,NVc,1480),kP=Hjb(qTc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1347),iP=Hjb(qTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1348),jP=Hjb(qTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1349),QQ=Hjb(aVc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1442),OQ=Hjb(aVc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1443),PQ=Hjb(aVc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1444),eR=Hjb(aVc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1466),cR=Hjb(aVc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1467),dR=Hjb(aVc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1468),qR=Hjb(aVc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1484),oR=Hjb(aVc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1485),pR=Hjb(aVc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1486),jR=Hjb(aVc,'LuminosityShader',1471),iR=Hjb(aVc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1472),gR=Hjb(aVc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1473),hR=Hjb(aVc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1474);QOc(Hi)(38);