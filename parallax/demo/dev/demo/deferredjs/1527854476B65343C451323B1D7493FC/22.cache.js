function fKb(){}
function jKb(){}
function mKb(){}
function bKb(){bKb=tLc;aKb=new fKb}
function oKb(){oKb=tLc;dKb=new jKb}
function pKb(){pKb=tLc;eKb=new mKb}
function $Jb(){KIb.call(this,(bKb(),aKb))}
function Xkc(){k9b.call(this);this.d=0;this.e=0}
vU(749,731,SMc,$Jb);_.Rd=function _Jb(){yIb(this,'mRefractionRatio',new FMb((YMb(),KMb),new Yjb(1.02)));yIb(this,'mFresnelBias',new FMb(KMb,new Yjb(0.1)));yIb(this,'mFresnelPower',new FMb(KMb,new Yjb(2)));yIb(this,'mFresnelScale',new FMb(KMb,new Yjb(1)));yIb(this,pTc,new EMb(QMb))};var aKb;vU(750,1,{},fKb);_.Ud=function gKb(){return oKb(),dKb};_.Vd=function hKb(){return pKb(),eKb};var dKb,eKb;vU(751,1,{},jKb);_.tc=function kKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};vU(752,1,{},mKb);_.tc=function nKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};vU(1132,1,dNc);_.Db=function Vkc(){M8b(this.c,new Xkc(this.b))};vU(1133,967,{327:1},Xkc);_.ob=function Ykc(){var a,b,c,d,e,f,g,i,j;this.b=new _Pb(60,NGb(this.H.n),1,100000);D5b(this.b.ab,3200);this.c=new _Pb(60,NGb(this.H.n),1,100000);this.f=new S7b;a=new sWb(100,32,16);j=new NNb('./static/textures/cube/park2/*.jpg');mNb(j,(JCb(),HCb));g=new $Jb;DMb(Xu(xRb(g.j,pTc),225),j);c=new Z1b(g);this.g=new Mqb;for(b=0;b<500;b++){d=new d7b(a,c);R4b(d.ab,dlb()*10000-5000);S4b(d.ab,dlb()*10000-5000);D5b(d.ab,dlb()*10000-5000);A5b(d.fb,dlb()*3+1);_Ob(this.I,d);Cqb(this.g,d)}this.I.X=false;i=new kJb;DMb(Xu(xRb(i.j,pTc),225),j);f=new Z1b(i);bZb(f,(P$b(),M$b));e=new d7b(new DVb(100000,100000,100000),f);_Ob(this.f,e);fHb(this.H.n,false)};_.pb=function Zkc(a){var b,c,d,e;e=1.0E-4*a;M4b(this.b.ab,(this.d-this.b.ab.d)*0.05);N4b(this.b.ab,(-this.e-this.b.ab.e)*0.05);xPb(this.b,this.I.ab);U2b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Xu(Fqb(this.g,b),304);R4b(d.ab,5000*Math.cos(e+b));S4b(d.ab,5000*Math.sin(e+b*1.1))}HGb(this.H.n);ZGb(this.H.n,this.f,this.c,null,false);ZGb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var eN=Mjb(dSc,'MaterialsCubemapFresnel$DemoScene',1133),HG=Mjb(qTc,'FresnelShader',749),GG=Mjb(qTc,'FresnelShader_Resources_default_InlineClientBundleGenerator',750),EG=Mjb(qTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',751),FG=Mjb(qTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',752);rNc(Ii)(22);