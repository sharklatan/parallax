function qsc(){}
function usc(){}
function xsc(){}
function wwc(){}
function Awc(){}
function Dwc(){}
function jHc(){}
function nHc(){}
function qHc(){}
function FIc(){}
function JIc(){}
function MIc(){}
function YIc(){}
function aJc(){}
function dJc(){}
function pJc(){}
function tJc(){}
function wJc(){}
function IJc(){}
function MJc(){}
function PJc(){}
function IXb(a,b){a.b=b}
function B6b(a,b){a.k=b}
function PGc(a,b){Spb(a.b,b)}
function dsc(a){this.a=a}
function gsc(a){this.a=a}
function jsc(a){this.a=a}
function msc(){msc=JKc;lsc=new qsc}
function zsc(){zsc=JKc;osc=new usc}
function Asc(){Asc=JKc;psc=new xsc}
function swc(){swc=JKc;rwc=new wwc}
function Fwc(){Fwc=JKc;uwc=new Awc}
function Gwc(){Gwc=JKc;vwc=new Dwc}
function fHc(){fHc=JKc;eHc=new jHc}
function sHc(){sHc=JKc;hHc=new nHc}
function tHc(){tHc=JKc;iHc=new qHc}
function BIc(){BIc=JKc;AIc=new FIc}
function OIc(){OIc=JKc;DIc=new JIc}
function PIc(){PIc=JKc;EIc=new MIc}
function UIc(){UIc=JKc;TIc=new YIc}
function fJc(){fJc=JKc;WIc=new aJc}
function gJc(){gJc=JKc;XIc=new dJc}
function lJc(){lJc=JKc;kJc=new pJc}
function yJc(){yJc=JKc;nJc=new tJc}
function zJc(){zJc=JKc;oJc=new wJc}
function EJc(){EJc=JKc;DJc=new IJc}
function RJc(){RJc=JKc;GJc=new MJc}
function SJc(){SJc=JKc;HJc=new PJc}
function asc(a,b){this.a=a;this.b=b}
function nwc(){$Hb.call(this,(swc(),rwc))}
function cHc(){$Hb.call(this,(fHc(),eHc))}
function yIc(){$Hb.call(this,(BIc(),AIc))}
function RIc(){$Hb.call(this,(UIc(),TIc))}
function iJc(){$Hb.call(this,(lJc(),kJc))}
function BJc(){$Hb.call(this,(EJc(),DJc))}
function Vrc(a){a.w+=1;a.w==3&&zOb(a.v,true)}
function Wrc(){A8b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Urc(a,b,c,d){var e,f,g;g=new n1b(b);TLb(qu(NQb(gYb(g).i,WRc),225),c);f=new g7b;e=new t6b(new AVb(a.u,a.t),g);T4b(e._,-500);pOb(f,e);nGb(a.G.k,f,a.c,d,true)}
function Trc(a,b,c,d,e,f){var g,i;g=new f_b;$$b(g,new b2b(16755285));g.j=true;d_b(g,($Yb(),XYb));i=new D6b(b,g);i.d=c;B6b(i,yu(600*ukb()));R4b(i._,d,e,f);p2b(i.cb,1.5707963267948966);i.S=true;i.U=true;pOb(a.H,i);Spb(a.n,i)}
var oTc='enableDiffuse1',pTc='enableDiffuse2',hTc='h',jTc='heightMap',tTc='heightmap',uTc='r',nTc='tDetail',lTc='tDiffuse1',mTc='tDiffuse2',rTc='uRepeatOverlay',iTc='v';KT(1233,1,rMc);_.zb=function Rrc(){a8b(this.b,new Wrc(this.a))};KT(1234,965,{78:1,186:1,337:1},Wrc);_.Td=function Xrc(a){Vrc(this)};_.Fd=function Yrc(a){this.u=a.a.Z;this.t=a.a.Y;TLb(qu(NQb(gYb(this.f.b).i,hTc),225),new njb(6/this.u));TLb(qu(NQb(gYb(this.D.b).i,iTc),225),new njb(6/this.t))};_.nb=function Zrc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((fxb(),exb),(pxb(),oxb),this);this.b=new pPb(40,bGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new cPb(this.u,this.t,-10000,10000);R4b(this.b._,-1200,800,1200);T4b(this.c._,100);this.s=new g7b;pOb(this.s,this.c);this.d=new kwb(this.b,this.G.c);Q4b(this.d.v,0);this.d.s=1;this.d.A=1.2;hwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;fwb(this.d,0.15);f7b(this.H,new X6b(328965,2000,4000));pOb(this.H,new QWb(1118481));this.e=new rXb(16777215,1.15);R4b(this.e._,500,2000,0);pOb(this.H,this.e);this.q=new KXb(16729088,1.5,0);Q4b(this.q._,0);pOb(this.H,this.q);this.g=new pNb(256,256);HMb(this.g,(ODb(),JDb));FMb(this.g,(DDb(),BDb));CMb(this.g,(ZBb(),XBb));DMb(this.g,false);this.o=new pNb(256,256);HMb(this.o,JDb);FMb(this.o,BDb);CMb(this.o,XBb);DMb(this.o,false);n=new iJc;u=n.i;TLb(qu(u.a[NOc],225),new njb(0.05));e4b(qu(qu(u.a[FSc],225).d,297),256,256);TLb(qu(u.a[jTc],225),this.g);s=new pNb(2048,2048);HMb(s,JDb);FMb(s,BDb);CMb(s,XBb);s.r=false;OMb(s,(eFb(),dFb));PMb(s,dFb);c=new VMb('./static/textures/terrain/grasslight-big.jpg',new asc(this,s));OMb(c,dFb);PMb(c,dFb);d=new VMb('./static/textures/terrain/backgrounddetailed6.jpg',this);OMb(d,dFb);PMb(d,dFb);b=new VMb('./static/textures/terrain/grasslight-big-nm.jpg',this);OMb(b,dFb);PMb(b,dFb);t=new nwc;this.B=t.i;TLb(qu(NQb(this.B,zSc),225),this.o);TLb(qu(NQb(this.B,ASc),225),new njb(3.5));TLb(qu(NQb(this.B,kTc),225),this.g);TLb(qu(NQb(this.B,lTc),225),c);TLb(qu(NQb(this.B,mTc),225),d);TLb(qu(NQb(this.B,BSc),225),s);TLb(qu(NQb(this.B,nTc),225),b);TLb(qu(NQb(this.B,oTc),225),(oib(),oib(),nib));TLb(qu(NQb(this.B,pTc),225),nib);TLb(qu(NQb(this.B,URc),225),nib);$1b(qu(qu(NQb(this.B,$Rc),225).d,293),16777215);$1b(qu(qu(NQb(this.B,_Rc),225).d,293),16777215);$1b(qu(qu(NQb(this.B,ZRc),225).d,293),1118481);TLb(qu(NQb(this.B,ESc),225),new njb(30));TLb(qu(NQb(this.B,qTc),225),new njb(375));e4b(qu(qu(NQb(this.B,rTc),225).d,297),6,6);this.A=new Ksb;gob(this.A,ISc,new VLb((mMb(),$Lb),new njb(1)));gob(this.A,sTc,new VLb(gMb,new i4b(1.5,1.5)));gob(this.A,pSc,new VLb(gMb,new i4b(0,0)));this.k=new Ksb;i=new m1b((msc(),lsc));VHb(gYb(i),this.A);i.c=false;i.b=true;gob(this.k,tTc,i);j=new n1b(n);VHb(gYb(j),u);j.c=false;j.b=true;gob(this.k,PRc,j);k=new n1b(t);VHb(gYb(k),this.B);k.c=true;k.b=true;gob(this.k,'terrain',k);o=new AVb(this.u,this.t);p=new n$b;h$b(p,new b2b(0));this.r=new t6b(o,p);T4b(this.r._,-500);pOb(this.s,this.r);g=new BVb(6000,6000,64,64);SPb(g);this.v=new t6b(g,k);R4b(this.v._,0,-125,0);o2b(this.v.cb,-1.5707963267948966);zOb(this.v,false);pOb(this.H,this.v);zGb(this.G.k,this.H.b.c,1);this.G.k.ab=true;this.G.k.bb=true;vGb(this.G.k,false);q=new YGc(this.H,this.b);f=new JGc(0.6);e=new _Gc(new cHc);TLb(qu(NQb(gYb(e.b).i,eSc),225),new njb(0.65));this.f=new _Gc(new yIc);this.D=new _Gc(new BJc);TLb(qu(NQb(gYb(this.f.b).i,hTc),225),new njb(6/this.u));TLb(qu(NQb(gYb(this.D.b).i,iTc),225),new njb(6/this.t));TLb(qu(NQb(gYb(this.f.b).i,uTc),225),new njb(0.5));TLb(qu(NQb(gYb(this.D.b).i,uTc),225),new njb(0.5));this.D.a=true;r=new pNb(this.u,this.t);HMb(s,IDb);FMb(s,BDb);CMb(s,XBb);s.f=false;s.r=false;a=new RGc(this.G.k,r);Spb(a.b,q);Spb(a.b,f);Spb(a.b,e);PGc(a,this.f);PGc(a,this.D);this.n=new aqb;new vxc('./static/models/animated/parrot.js',new dsc(this));new vxc(gTc,new gsc(this));new vxc('./static/models/animated/stork.js',new jsc(this));this.p=rh()};_.ob=function $rc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){iwb(this.d);this.j=y2b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;Z1b(this.H.b.c,0.1,e,this.j);zGb(this.G.k,this.H.b.c,1);$Wb(this.e,0.1+f*1.0499999999999998);IXb(this.q,0.9+f*0.6);TLb(qu(NQb(this.B,ASc),225),new njb(0.6+f*2.9));if(this.C){this.a=y2b(this.a+-7.5E-4,0,0.05);TLb(qu(bob(this.A,ISc),225),new njb(qu(qu(bob(this.A,ISc),225).d,150).a+b*this.a));a4b(qu(qu(bob(this.A,pSc),225).d,297),b*0.05);f4b(qu(qu(NQb(this.B,vTc),225).d,297),4*qu(qu(bob(this.A,pSc),225).d,297).c);VRb(this.r,qu(bob(this.k,tTc),281));nGb(this.G.k,this.s,this.c,this.g,true);VRb(this.r,qu(bob(this.k,PRc),281));nGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=qu(Vpb(this.n,c),305);C6b(d,yu(1000*b));a4b(d._,d.d*b);d._.c>2000&&f4b(d._,-1500-ukb()*500)}nGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;KT(1235,1,{},asc);_.Td=function bsc(a){Vrc(this.a);Urc(this.a,new RIc,a,this.b)};KT(1236,1,{},dsc);_.yf=function esc(a,b){qxc((qu(a,338),qu(b,241)));Trc(this.a,qu(b,241),500,-3500,500,700);Trc(this.a,qu(b,241),500,-3000-ukb()*500,500,-200);Trc(this.a,qu(b,241),500,-3000-ukb()*500,500,200);Trc(this.a,qu(b,241),500,-3000-ukb()*500,500,1000)};KT(1237,1,{},gsc);_.yf=function hsc(a,b){qxc((qu(a,338),qu(b,241)));Trc(this.a,qu(b,241),1000,-3000-ukb()*500,350,40)};KT(1238,1,{},jsc);_.yf=function ksc(a,b){qxc((qu(a,338),qu(b,241)));Trc(this.a,qu(b,241),1000,-3000-ukb()*500,350,340)};var lsc;KT(1239,1,{},qsc);_.Nd=function rsc(){return zsc(),osc};_.Od=function ssc(){return Asc(),psc};var osc,psc;KT(1240,1,{},usc);_.mc=function vsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};KT(1241,1,{},xsc);_.mc=function ysc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};KT(1329,729,eMc,nwc);_.Kd=function owc(){VHb(this,qMb());VHb(this,rMb());VHb(this,sMb());OHb(this,oTc,new VLb((mMb(),bMb),(oib(),oib(),mib)));OHb(this,pTc,new VLb(bMb,mib));OHb(this,URc,new VLb(bMb,mib));OHb(this,wTc,new VLb(bMb,mib));OHb(this,lTc,new ULb(eMb));OHb(this,mTc,new ULb(eMb));OHb(this,nTc,new ULb(eMb));OHb(this,zSc,new ULb(eMb));OHb(this,BSc,new ULb(eMb));OHb(this,kTc,new ULb(eMb));OHb(this,ASc,new VLb($Lb,new njb(1)));OHb(this,xTc,new VLb($Lb,new njb(0)));OHb(this,qTc,new VLb($Lb,new njb(1)));OHb(this,$Rc,new VLb(ZLb,new b2b(15658734)));OHb(this,_Rc,new VLb(ZLb,new b2b(1118481)));OHb(this,ZRc,new VLb(ZLb,new b2b(328965)));OHb(this,ESc,new VLb($Lb,new njb(30)));OHb(this,eSc,new VLb($Lb,new njb(1)));OHb(this,'uRepeatBase',new VLb(gMb,new i4b(1,1)));OHb(this,rTc,new VLb(gMb,new i4b(1,1)));OHb(this,vTc,new VLb(gMb,new i4b(0,0)))};_.Ld=function pwc(a){var b,c;c=new yqb(gu(HR,OKc,1,[fSc,gSc]));b=new yqb(gu(HR,OKc,1,[iSc,jSc,kSc]));XHb(this,dIb(a,gu(KR,OKc,173,[c,b])))};_.Md=function qwc(a){var b,c;c=new yqb(gu(HR,OKc,1,[lSc]));b=new yqb(gu(HR,OKc,1,[mSc]));YHb(this,dIb(a,gu(KR,OKc,173,[c,b])))};var rwc;KT(1330,1,{},wwc);_.Nd=function xwc(){return Fwc(),uwc};_.Od=function ywc(){return Gwc(),vwc};var uwc,vwc;KT(1331,1,{},Awc);_.mc=function Bwc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};KT(1332,1,{},Dwc);_.mc=function Ewc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};KT(1424,729,eMc,cHc);_.Kd=function dHc(){OHb(this,WRc,new ULb((mMb(),eMb)));OHb(this,eSc,new VLb($Lb,new njb(1)))};var eHc;KT(1425,1,{},jHc);_.Nd=function kHc(){return sHc(),hHc};_.Od=function lHc(){return tHc(),iHc};var hHc,iHc;KT(1426,1,{},nHc);_.mc=function oHc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};KT(1427,1,{},qHc);_.mc=function rHc(){return QSc};KT(1448,729,eMc,yIc);_.Kd=function zIc(){OHb(this,WRc,new ULb((mMb(),eMb)));OHb(this,hTc,new VLb($Lb,new njb(0.001953125)));OHb(this,uTc,new VLb($Lb,new njb(0.35)))};var AIc;KT(1449,1,{},FIc);_.Nd=function GIc(){return OIc(),DIc};_.Od=function HIc(){return PIc(),EIc};var DIc,EIc;KT(1450,1,{},JIc);_.mc=function KIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};KT(1451,1,{},MIc);_.mc=function NIc(){return QSc};KT(1454,729,eMc,RIc);_.Kd=function SIc(){OHb(this,WRc,new ULb((mMb(),eMb)))};var TIc;KT(1455,1,{},YIc);_.Nd=function ZIc(){return fJc(),WIc};_.Od=function $Ic(){return gJc(),XIc};var WIc,XIc;KT(1456,1,{},aJc);_.mc=function bJc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};KT(1457,1,{},dJc);_.mc=function eJc(){return QSc};KT(1460,729,eMc,iJc);_.Kd=function jJc(){OHb(this,jTc,new ULb((mMb(),eMb)));OHb(this,FSc,new VLb(gMb,new i4b(512,512)));OHb(this,sTc,new VLb(gMb,new i4b(1,1)));OHb(this,NOc,new VLb($Lb,new njb(0.05)))};var kJc;KT(1461,1,{},pJc);_.Nd=function qJc(){return yJc(),nJc};_.Od=function rJc(){return zJc(),oJc};var nJc,oJc;KT(1462,1,{},tJc);_.mc=function uJc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};KT(1463,1,{},wJc);_.mc=function xJc(){return QSc};KT(1466,729,eMc,BJc);_.Kd=function CJc(){OHb(this,WRc,new ULb((mMb(),eMb)));OHb(this,iTc,new VLb($Lb,new njb(0.001953125)));OHb(this,uTc,new VLb($Lb,new njb(0.35)))};var DJc;KT(1467,1,{},IJc);_.Nd=function JJc(){return RJc(),GJc};_.Od=function KJc(){return SJc(),HJc};var GJc,HJc;KT(1468,1,{},MJc);_.mc=function NJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};KT(1469,1,{},PJc);_.mc=function QJc(){return QSc};var iO=bjb(kRc,'TerrainDynamic$DemoScene',1234),eO=bjb(kRc,'TerrainDynamic$DemoScene$1',1235),fO=bjb(kRc,'TerrainDynamic$DemoScene$2',1236),gO=bjb(kRc,'TerrainDynamic$DemoScene$3',1237),hO=bjb(kRc,'TerrainDynamic$DemoScene$4',1238),LQ=bjb(SSc,yTc,1460),JO=bjb(aRc,'TerrainShader',1329),nQ=bjb(SSc,'BleachBypassShader',1424),DQ=bjb(SSc,'HorizontalTiltShiftShader',1448),PQ=bjb(SSc,'VerticalTiltShiftShader',1466),lO=bjb(kRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1239),jO=bjb(kRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1240),kO=bjb(kRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1241),KQ=bjb(SSc,zTc,1461),IQ=bjb(SSc,ATc,1462),JQ=bjb(SSc,BTc,1463),IO=bjb(aRc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1330),GO=bjb(aRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1331),HO=bjb(aRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1332),mQ=bjb(SSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1425),kQ=bjb(SSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1426),lQ=bjb(SSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1427),CQ=bjb(SSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1449),AQ=bjb(SSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1450),BQ=bjb(SSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1451),OQ=bjb(SSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1467),MQ=bjb(SSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1468),NQ=bjb(SSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1469),HQ=bjb(SSc,'LuminosityShader',1454),GQ=bjb(SSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1455),EQ=bjb(SSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1456),FQ=bjb(SSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1457);FMc(xi)(39);