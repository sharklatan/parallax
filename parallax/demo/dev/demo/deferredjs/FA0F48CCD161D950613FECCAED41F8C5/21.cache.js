function JLb(){}
function NLb(){}
function QLb(){}
function FLb(){FLb=LQc;ELb=new JLb}
function SLb(){SLb=LQc;HLb=new NLb}
function TLb(){TLb=LQc;ILb=new QLb}
function CLb(){TJb.call(this,(FLb(),ELb))}
function Gmc(){Vac.call(this);this.d=0;this.e=0}
WU(751,727,iSc,CLb);_.Nd=function DLb(){HJb(this,'mRefractionRatio',new hOb((AOb(),mOb),new Akb(1.02)));HJb(this,'mFresnelBias',new hOb(mOb,new Akb(0.1)));HJb(this,'mFresnelPower',new hOb(mOb,new Akb(2)));HJb(this,'mFresnelScale',new hOb(mOb,new Akb(1)));HJb(this,zYc,new gOb(sOb))};var ELb;WU(752,1,{},JLb);_.Qd=function KLb(){return SLb(),HLb};_.Rd=function LLb(){return TLb(),ILb};var HLb,ILb;WU(753,1,{},NLb);_.pc=function OLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};WU(754,1,{},QLb);_.pc=function RLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};WU(1134,1,vSc);_.Db=function Emc(){vac(this.c,new Gmc(this.b))};WU(1135,969,{328:1},Gmc);_.ob=function Hmc(){var a,b,c,d,e,f,g,i,j;this.b=new ERb(60,WHb(this.H.n),1,100000);m7b(this.b.ab,3200);this.c=new ERb(60,WHb(this.H.n),1,100000);this.f=new B9b;a=new _Xb(100,32,16);j=new pPb('./static/textures/cube/park2/*.jpg');QOb(j,(rDb(),pDb));g=new CLb;fOb(Fu(cTb(g.j,zYc),227),j);c=new H3b(g);this.g=new nrb;for(b=0;b<500;b++){e=new O8b(a,c);z6b(e.ab,Hlb()*10000-5000);A6b(e.ab,Hlb()*10000-5000);m7b(e.ab,Hlb()*10000-5000);j7b(e.fb,Hlb()*3+1);DQb(this.I,e);drb(this.g,e)}this.I.X=false;i=new tKb;fOb(Fu(cTb(i.j,zYc),227),j);f=new H3b(i);K$b(f,(w0b(),t0b));d=new O8b(new kXb(100000,100000,100000),f);DQb(this.f,d);oIb(this.H.n,false)};_.pb=function Imc(a){var b,c,d,e;e=1.0E-4*a;u6b(this.b.ab,(this.d-this.b.ab.d)*0.05);v6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);aRb(this.b,this.I.ab);C4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Fu(grb(this.g,b),305);z6b(d.ab,5000*Math.cos(e+b));A6b(d.ab,5000*Math.sin(e+b*1.1))}PHb(this.H.n,true);gIb(this.H.n,this.f,this.c,null,false);gIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var PM=okb(rXc,'MaterialsCubemapFresnel$DemoScene',1135),qG=okb(AYc,'FresnelShader',751),pG=okb(AYc,'FresnelShader_Resources_default_InlineClientBundleGenerator',752),nG=okb(AYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',753),oG=okb(AYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',754);JSc(Hi)(21);