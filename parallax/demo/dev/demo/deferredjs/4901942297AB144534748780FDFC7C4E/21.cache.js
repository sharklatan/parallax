function pLb(){}
function tLb(){}
function wLb(){}
function lLb(){lLb=wMc;kLb=new pLb}
function yLb(){yLb=wMc;nLb=new tLb}
function zLb(){zLb=wMc;oLb=new wLb}
function iLb(){zJb.call(this,(lLb(),kLb))}
function Pmc(){zbc.call(this);this.c=0;this.d=0}
DV(766,742,UNc,iLb);_.Ld=function jLb(){nJb(this,'mRefractionRatio',new PNb((gOb(),UNb),new skb(1.02)));nJb(this,'mFresnelBias',new PNb(UNb,new skb(0.1)));nJb(this,'mFresnelPower',new PNb(UNb,new skb(2)));nJb(this,'mFresnelScale',new PNb(UNb,new skb(1)));nJb(this,jUc,new ONb($Nb))};var kLb;DV(767,1,{},pLb);_.Od=function qLb(){return yLb(),nLb};_.Pd=function rLb(){return zLb(),oLb};var nLb,oLb;DV(768,1,{},tLb);_.nc=function uLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};DV(769,1,{},wLb);_.nc=function xLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};DV(1157,1,gOc);_.Mb=function Nmc(){_ac(this.b,new Pmc(this.a))};DV(1158,990,{331:1},Pmc);_.nb=function Qmc(){var a,b,c,d,e,f,g,i,j;this.a=new nRb(60,sGb(this.G.k),1,100000);w8b(this.a._,3200);this.b=new nRb(60,sGb(this.G.k),1,100000);this.e=new dac;a=new NXb(100,32,16);j=new XOb('./static/textures/cube/park2/*.jpg');wOb(j,(hDb(),fDb));g=new iLb;NNb(yv(RSb(g.i,jUc),226),j);c=new j4b(g);this.f=new grb;for(b=0;b<500;b++){d=new pZb(a,c);O7b(d._,zlb()*10000-5000);P7b(d._,zlb()*10000-5000);w8b(d._,zlb()*10000-5000);t8b(d.eb,zlb()*3+1);jQb(this.H,d);Yqb(this.f,d)}this.H.W=false;i=new _Jb;NNb(yv(RSb(i.i,jUc),226),j);f=new j4b(i);m_b(f,($0b(),X0b));e=new pZb(new YWb(100000,100000,100000),f);jQb(this.e,e);tGb(this.G.k,false)};_.ob=function Rmc(a){var b,c,d,e;e=1.0E-4*a;I7b(this.a._,(this.c-this.a._.c)*0.05);J7b(this.a._,(-this.d-this.a._.d)*0.05);JQb(this.a,this.H._);m5b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=yv(_qb(this.f,b),308);O7b(d._,5000*Math.cos(e+b));P7b(d._,5000*Math.sin(e+b*1.1))}yHb(this.G.k,true);QHb(this.G.k,this.e,this.b,null,false);QHb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var WN=gkb(bTc,'MaterialsCubemapFresnel$DemoScene',1158),qH=gkb(kUc,'FresnelShader',766),pH=gkb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',767),nH=gkb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',768),oH=gkb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',769);uOc(Ej)(21);