function sLb(){}
function wLb(){}
function zLb(){}
function oLb(){oLb=uQc;nLb=new sLb}
function BLb(){BLb=uQc;qLb=new wLb}
function CLb(){CLb=uQc;rLb=new zLb}
function lLb(){CJb.call(this,(oLb(),nLb))}
function pmc(){Eac.call(this);this.c=0;this.d=0}
GU(755,731,RRc,lLb);_.Kd=function mLb(){qJb(this,'mRefractionRatio',new SNb((jOb(),XNb),new jkb(1.02)));qJb(this,'mFresnelBias',new SNb(XNb,new jkb(0.1)));qJb(this,'mFresnelPower',new SNb(XNb,new jkb(2)));qJb(this,'mFresnelScale',new SNb(XNb,new jkb(1)));qJb(this,bYc,new RNb(bOb))};var nLb;GU(756,1,{},sLb);_.Nd=function tLb(){return BLb(),qLb};_.Od=function uLb(){return CLb(),rLb};var qLb,rLb;GU(757,1,{},wLb);_.mc=function xLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};GU(758,1,{},zLb);_.mc=function ALb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};GU(1138,1,cSc);_.zb=function nmc(){eac(this.b,new pmc(this.a))};GU(1139,973,{328:1},pmc);_.nb=function qmc(){var a,b,c,d,e,f,g,i,j;this.a=new nRb(60,FHb(this.G.k),1,100000);X6b(this.a._,3200);this.b=new nRb(60,FHb(this.G.k),1,100000);this.e=new k9b;a=new KXb(100,32,16);j=new $Ob('./static/textures/cube/park2/*.jpg');zOb(j,(aDb(),$Cb));g=new lLb;QNb(qu(NSb(g.i,bYc),227),j);c=new q3b(g);this.f=new Yqb;for(b=0;b<500;b++){d=new x8b(a,c);i6b(d._,qlb()*10000-5000);j6b(d._,qlb()*10000-5000);X6b(d._,qlb()*10000-5000);U6b(d.eb,qlb()*3+1);mQb(this.H,d);Oqb(this.f,d)}this.H.W=false;i=new cKb;QNb(qu(NSb(i.i,bYc),227),j);f=new q3b(i);t$b(f,(f0b(),c0b));e=new x8b(new VWb(100000,100000,100000),f);mQb(this.e,e);ZHb(this.G.k,false)};_.ob=function rmc(a){var b,c,d,e;e=1.0E-4*a;d6b(this.a._,(this.c-this.a._.c)*0.05);e6b(this.a._,(-this.d-this.a._.d)*0.05);LQb(this.a,this.H._);l4b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(Rqb(this.f,b),305);i6b(d._,5000*Math.cos(e+b));j6b(d._,5000*Math.sin(e+b*1.1))}yHb(this.G.k,true);RHb(this.G.k,this.e,this.b,null,false);RHb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var zM=Zjb(VWc,'MaterialsCubemapFresnel$DemoScene',1139),aG=Zjb(cYc,'FresnelShader',755),_F=Zjb(cYc,'FresnelShader_Resources_default_InlineClientBundleGenerator',756),ZF=Zjb(cYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',757),$F=Zjb(cYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',758);qSc(xi)(21);