function Hsc(){}
function Lsc(){}
function Osc(){}
function awc(){}
function ewc(){}
function hwc(){}
function PGc(){}
function TGc(){}
function WGc(){}
function jIc(){}
function nIc(){}
function qIc(){}
function CIc(){}
function GIc(){}
function JIc(){}
function VIc(){}
function ZIc(){}
function aJc(){}
function mJc(){}
function qJc(){}
function tJc(){}
function UYb(a,b){a.c=b}
function P7b(a,b){a.n=b}
function tGc(a,b){zqb(a.c,b)}
function usc(a){this.b=a}
function xsc(a){this.b=a}
function Asc(a){this.b=a}
function Dsc(){Dsc=nKc;Csc=new Hsc}
function Qsc(){Qsc=nKc;Fsc=new Lsc}
function Rsc(){Rsc=nKc;Gsc=new Osc}
function Yvc(){Yvc=nKc;Xvc=new awc}
function jwc(){jwc=nKc;$vc=new ewc}
function kwc(){kwc=nKc;_vc=new hwc}
function LGc(){LGc=nKc;KGc=new PGc}
function YGc(){YGc=nKc;NGc=new TGc}
function ZGc(){ZGc=nKc;OGc=new WGc}
function fIc(){fIc=nKc;eIc=new jIc}
function sIc(){sIc=nKc;hIc=new nIc}
function tIc(){tIc=nKc;iIc=new qIc}
function yIc(){yIc=nKc;xIc=new CIc}
function LIc(){LIc=nKc;AIc=new GIc}
function MIc(){MIc=nKc;BIc=new JIc}
function RIc(){RIc=nKc;QIc=new VIc}
function cJc(){cJc=nKc;TIc=new ZIc}
function dJc(){dJc=nKc;UIc=new aJc}
function iJc(){iJc=nKc;hJc=new mJc}
function vJc(){vJc=nKc;kJc=new qJc}
function wJc(){wJc=nKc;lJc=new tJc}
function rsc(a,b){this.b=a;this.c=b}
function Tvc(){IIb.call(this,(Yvc(),Xvc))}
function IGc(){IIb.call(this,(LGc(),KGc))}
function cIc(){IIb.call(this,(fIc(),eIc))}
function vIc(){IIb.call(this,(yIc(),xIc))}
function OIc(){IIb.call(this,(RIc(),QIc))}
function fJc(){IIb.call(this,(iJc(),hJc))}
function ksc(a){a.A+=1;a.A==3&&DPb(a.w,true)}
function lsc(){P9b.call(this);this.b=0;this.k=0;this.j=1;this.v=1000;this.u=1000;this.D=true}
function jsc(a,b,c,d){var e,f,g;g=new A2b(b);WMb(Fu(XRb(sZb(g).j,IRc),225),c);f=new u8b;e=new H7b(new MWb(a.v,a.u),g);f6b(e.ab,-500);sPb(f,e);XGb(a.H.n,f,a.d,d,true)}
function isc(a,b,c,d,e,f){var g,i;g=new s0b;l0b(g,new o3b(16755285));g.k=true;q0b(g,(k$b(),h$b));i=new R7b(b,g);i.e=c;P7b(i,Nu(600*blb()));d6b(i.ab,d,e,f);C3b(i.db,1.5707963267948966);i.T=true;i.V=true;sPb(a.I,i);zqb(a.o,i)}
var YSc='enableDiffuse1',ZSc='enableDiffuse2',RSc='h',TSc='heightMap',cTc='heightmap',bTc='offset',dTc='r',XSc='tDetail',VSc='tDiffuse1',WSc='tDiffuse2',_Sc='uRepeatOverlay',SSc='v';nU(1234,1,$Lc);_.Db=function gsc(){p9b(this.c,new lsc(this.b))};nU(1235,968,{78:1,186:1,338:1},lsc);_.Xd=function msc(a){ksc(this)};_.Jd=function nsc(a){this.v=a.b.$;this.u=a.b.Z;WMb(Fu(XRb(sZb(this.g.c).j,RSc),225),new Wjb(6/this.v));WMb(Fu(XRb(sZb(this.F.c).j,SSc),225),new Wjb(6/this.u))};_.ob=function osc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ut((Pxb(),Oxb),(Zxb(),Yxb),this);this.c=new vQb(40,LGb(this.H.n),2,4000);this.v=this.H.n.$;this.u=this.H.n.Z;this.d=new gQb(this.v,this.u,-10000,10000);d6b(this.c.ab,-1200,800,1200);f6b(this.d.ab,100);this.t=new u8b;sPb(this.t,this.d);this.e=new Uwb(this.c,this.H.d);c6b(this.e.w,0);this.e.t=1;this.e.B=1.2;Rwb(this.e,0.8);this.e.i=true;this.e.f=true;this.e.g=true;Pwb(this.e,0.15);s8b(this.I,new i8b(328965,2000,4000));sPb(this.I,new aYb(1118481));this.f=new DYb(16777215,1.15);d6b(this.f.ab,500,2000,0);sPb(this.I,this.f);this.r=new WYb(16729088,1.5,0);c6b(this.r.ab,0);sPb(this.I,this.r);this.i=new sOb(256,256);KNb(this.i,(wEb(),rEb));INb(this.i,(lEb(),jEb));FNb(this.i,(HCb(),FCb));GNb(this.i,false);this.p=new sOb(256,256);KNb(this.p,rEb);INb(this.p,jEb);FNb(this.p,FCb);GNb(this.p,false);n=new OIc;u=n.j;WMb(Fu(u.b[zOc],225),new Wjb(0.05));r5b(Fu(Fu(u.b[mSc],225).e,297),256,256);WMb(Fu(u.b[TSc],225),this.i);s=new sOb(2048,2048);KNb(s,rEb);INb(s,jEb);FNb(s,FCb);s.s=false;RNb(s,(OFb(),NFb));SNb(s,NFb);c=new YNb('./static/textures/terrain/grasslight-big.jpg',new rsc(this,s));RNb(c,NFb);SNb(c,NFb);d=new YNb('./static/textures/terrain/backgrounddetailed6.jpg',this);RNb(d,NFb);SNb(d,NFb);b=new YNb('./static/textures/terrain/grasslight-big-nm.jpg',this);RNb(b,NFb);SNb(b,NFb);t=new Tvc;this.C=t.j;WMb(Fu(XRb(this.C,gSc),225),this.p);WMb(Fu(XRb(this.C,hSc),225),new Wjb(3.5));WMb(Fu(XRb(this.C,USc),225),this.i);WMb(Fu(XRb(this.C,VSc),225),c);WMb(Fu(XRb(this.C,WSc),225),d);WMb(Fu(XRb(this.C,iSc),225),s);WMb(Fu(XRb(this.C,XSc),225),b);WMb(Fu(XRb(this.C,YSc),225),(Xib(),Xib(),Wib));WMb(Fu(XRb(this.C,ZSc),225),Wib);WMb(Fu(XRb(this.C,GRc),225),Wib);l3b(Fu(Fu(XRb(this.C,MRc),225).e,293),16777215);l3b(Fu(Fu(XRb(this.C,NRc),225).e,293),16777215);l3b(Fu(Fu(XRb(this.C,LRc),225).e,293),1118481);WMb(Fu(XRb(this.C,lSc),225),new Wjb(30));WMb(Fu(XRb(this.C,$Sc),225),new Wjb(375));r5b(Fu(Fu(XRb(this.C,_Sc),225).e,297),6,6);this.B=new rtb;Pob(this.B,pSc,new YMb((pNb(),bNb),new Wjb(1)));Pob(this.B,aTc,new YMb(jNb,new v5b(1.5,1.5)));Pob(this.B,bTc,new YMb(jNb,new v5b(0,0)));this.n=new rtb;i=new z2b((Dsc(),Csc));DIb(sZb(i),this.B);i.d=false;i.c=true;Pob(this.n,cTc,i);j=new A2b(n);DIb(sZb(j),u);j.d=false;j.c=true;Pob(this.n,CRc,j);k=new A2b(t);DIb(sZb(k),this.C);k.d=true;k.c=true;Pob(this.n,'terrain',k);o=new MWb(this.v,this.u);p=new z_b;t_b(p,new o3b(0));this.s=new H7b(o,p);f6b(this.s.ab,-500);sPb(this.t,this.s);g=new NWb(6000,6000,64,64);aRb(g);this.w=new H7b(g,k);d6b(this.w.ab,0,-125,0);B3b(this.w.db,-1.5707963267948966);DPb(this.w,false);sPb(this.I,this.w);hHb(this.H.n,this.I.b.d,1);this.H.n.bb=true;this.H.n.cb=true;dHb(this.H.n,false);q=new CGc(this.I,this.c);f=new nGc(0.6);e=new FGc(new IGc);WMb(Fu(XRb(sZb(e.c).j,SRc),225),new Wjb(0.65));this.g=new FGc(new cIc);this.F=new FGc(new fJc);WMb(Fu(XRb(sZb(this.g.c).j,RSc),225),new Wjb(6/this.v));WMb(Fu(XRb(sZb(this.F.c).j,SSc),225),new Wjb(6/this.u));WMb(Fu(XRb(sZb(this.g.c).j,dTc),225),new Wjb(0.5));WMb(Fu(XRb(sZb(this.F.c).j,dTc),225),new Wjb(0.5));this.F.b=true;r=new sOb(this.v,this.u);KNb(s,qEb);INb(s,jEb);FNb(s,FCb);s.g=false;s.s=false;a=new vGc(this.H.n,r);zqb(a.c,q);zqb(a.c,f);zqb(a.c,e);tGc(a,this.g);tGc(a,this.F);this.o=new Jqb;new _wc('./static/models/animated/parrot.js',new usc(this));new _wc(QSc,new xsc(this));new _wc('./static/models/animated/stork.js',new Asc(this));this.q=Bh()};_.pb=function psc(a){var b,c,d,e,f;b=(Bh()-this.q)*0.001;if(this.w.hb){Swb(this.e);this.k=L3b(this.k+0.5*b*this.j,0.4,0.825);f=(this.k-0.4)/0.42499999999999993;e=0.95+f*-0.7;k3b(this.I.b.d,0.1,e,this.k);hHb(this.H.n,this.I.b.d,1);kYb(this.f,0.1+f*1.0499999999999998);UYb(this.r,0.9+f*0.6);WMb(Fu(XRb(this.C,hSc),225),new Wjb(0.6+f*2.9));if(this.D){this.b=L3b(this.b+-7.5E-4,0,0.05);WMb(Fu(Kob(this.B,pSc),225),new Wjb(Fu(Fu(Kob(this.B,pSc),225).e,150).b+b*this.b));n5b(Fu(Fu(Kob(this.B,bTc),225).e,297),b*0.05);s5b(Fu(Fu(XRb(this.C,eTc),225).e,297),4*Fu(Fu(Kob(this.B,bTc),225).e,297).d);fTb(this.s,Fu(Kob(this.n,cTc),282));XGb(this.H.n,this.t,this.d,this.i,true);fTb(this.s,Fu(Kob(this.n,CRc),282));XGb(this.H.n,this.t,this.d,this.p,true);this.D=false}for(c=0;c<this.o.c;c++){d=Fu(Cqb(this.o,c),305);Q7b(d,Nu(1000*b));n5b(d.ab,d.e*b);d.ab.d>2000&&s5b(d.ab,-1500-blb()*500)}XGb(this.H.n,this.I,this.c,null,false)}this.q=Bh()};_.b=0;_.j=0;_.k=0;_.q=0;_.u=0;_.v=0;_.A=0;_.D=false;nU(1236,1,{},rsc);_.Xd=function ssc(a){ksc(this.b);jsc(this.b,new vIc,a,this.c)};nU(1237,1,{},usc);_.Df=function vsc(a,b){Wwc((Fu(a,339),Fu(b,242)));isc(this.b,Fu(b,242),500,-3500,500,700);isc(this.b,Fu(b,242),500,-3000-blb()*500,500,-200);isc(this.b,Fu(b,242),500,-3000-blb()*500,500,200);isc(this.b,Fu(b,242),500,-3000-blb()*500,500,1000)};nU(1238,1,{},xsc);_.Df=function ysc(a,b){Wwc((Fu(a,339),Fu(b,242)));isc(this.b,Fu(b,242),1000,-3000-blb()*500,350,40)};nU(1239,1,{},Asc);_.Df=function Bsc(a,b){Wwc((Fu(a,339),Fu(b,242)));isc(this.b,Fu(b,242),1000,-3000-blb()*500,350,340)};var Csc;nU(1240,1,{},Hsc);_.Rd=function Isc(){return Qsc(),Fsc};_.Sd=function Jsc(){return Rsc(),Gsc};var Fsc,Gsc;nU(1241,1,{},Lsc);_.qc=function Msc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};nU(1242,1,{},Osc);_.qc=function Psc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};nU(1300,726,NLc,Tvc);_.Od=function Uvc(){DIb(this,tNb());DIb(this,uNb());DIb(this,vNb());wIb(this,YSc,new YMb((pNb(),eNb),(Xib(),Xib(),Vib)));wIb(this,ZSc,new YMb(eNb,Vib));wIb(this,GRc,new YMb(eNb,Vib));wIb(this,fTc,new YMb(eNb,Vib));wIb(this,VSc,new XMb(hNb));wIb(this,WSc,new XMb(hNb));wIb(this,XSc,new XMb(hNb));wIb(this,gSc,new XMb(hNb));wIb(this,iSc,new XMb(hNb));wIb(this,USc,new XMb(hNb));wIb(this,hSc,new YMb(bNb,new Wjb(1)));wIb(this,gTc,new YMb(bNb,new Wjb(0)));wIb(this,$Sc,new YMb(bNb,new Wjb(1)));wIb(this,MRc,new YMb(aNb,new o3b(15658734)));wIb(this,NRc,new YMb(aNb,new o3b(1118481)));wIb(this,LRc,new YMb(aNb,new o3b(328965)));wIb(this,lSc,new YMb(bNb,new Wjb(30)));wIb(this,SRc,new YMb(bNb,new Wjb(1)));wIb(this,'uRepeatBase',new YMb(jNb,new v5b(1,1)));wIb(this,_Sc,new YMb(jNb,new v5b(1,1)));wIb(this,eTc,new YMb(jNb,new v5b(0,0)))};_.Pd=function Vvc(a){var b,c;c=new frb(vu(kS,tKc,1,[TRc,URc]));b=new frb(vu(kS,tKc,1,[WRc,XRc,YRc]));FIb(this,NIb(a,vu(nS,tKc,173,[c,b])))};_.Qd=function Wvc(a){var b,c;c=new frb(vu(kS,tKc,1,[ZRc]));b=new frb(vu(kS,tKc,1,[$Rc]));GIb(this,NIb(a,vu(nS,tKc,173,[c,b])))};var Xvc;nU(1301,1,{},awc);_.Rd=function bwc(){return jwc(),$vc};_.Sd=function cwc(){return kwc(),_vc};var $vc,_vc;nU(1302,1,{},ewc);_.qc=function fwc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};nU(1303,1,{},hwc);_.qc=function iwc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};nU(1395,726,NLc,IGc);_.Od=function JGc(){wIb(this,IRc,new XMb((pNb(),hNb)));wIb(this,SRc,new YMb(bNb,new Wjb(1)))};var KGc;nU(1396,1,{},PGc);_.Rd=function QGc(){return YGc(),NGc};_.Sd=function RGc(){return ZGc(),OGc};var NGc,OGc;nU(1397,1,{},TGc);_.qc=function UGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};nU(1398,1,{},WGc);_.qc=function XGc(){return xSc};nU(1419,726,NLc,cIc);_.Od=function dIc(){wIb(this,IRc,new XMb((pNb(),hNb)));wIb(this,RSc,new YMb(bNb,new Wjb(0.001953125)));wIb(this,dTc,new YMb(bNb,new Wjb(0.35)))};var eIc;nU(1420,1,{},jIc);_.Rd=function kIc(){return sIc(),hIc};_.Sd=function lIc(){return tIc(),iIc};var hIc,iIc;nU(1421,1,{},nIc);_.qc=function oIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};nU(1422,1,{},qIc);_.qc=function rIc(){return xSc};nU(1425,726,NLc,vIc);_.Od=function wIc(){wIb(this,IRc,new XMb((pNb(),hNb)))};var xIc;nU(1426,1,{},CIc);_.Rd=function DIc(){return LIc(),AIc};_.Sd=function EIc(){return MIc(),BIc};var AIc,BIc;nU(1427,1,{},GIc);_.qc=function HIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};nU(1428,1,{},JIc);_.qc=function KIc(){return xSc};nU(1431,726,NLc,OIc);_.Od=function PIc(){wIb(this,TSc,new XMb((pNb(),hNb)));wIb(this,mSc,new YMb(jNb,new v5b(512,512)));wIb(this,aTc,new YMb(jNb,new v5b(1,1)));wIb(this,zOc,new YMb(bNb,new Wjb(0.05)))};var QIc;nU(1432,1,{},VIc);_.Rd=function WIc(){return cJc(),TIc};_.Sd=function XIc(){return dJc(),UIc};var TIc,UIc;nU(1433,1,{},ZIc);_.qc=function $Ic(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};nU(1434,1,{},aJc);_.qc=function bJc(){return xSc};nU(1437,726,NLc,fJc);_.Od=function gJc(){wIb(this,IRc,new XMb((pNb(),hNb)));wIb(this,SSc,new YMb(bNb,new Wjb(0.001953125)));wIb(this,dTc,new YMb(bNb,new Wjb(0.35)))};var hJc;nU(1438,1,{},mJc);_.Rd=function nJc(){return vJc(),kJc};_.Sd=function oJc(){return wJc(),lJc};var kJc,lJc;nU(1439,1,{},qJc);_.qc=function rJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};nU(1440,1,{},tJc);_.qc=function uJc(){return xSc};var BO=Kjb(ZQc,'TerrainDynamic$DemoScene',1235),xO=Kjb(ZQc,'TerrainDynamic$DemoScene$1',1236),yO=Kjb(ZQc,'TerrainDynamic$DemoScene$2',1237),zO=Kjb(ZQc,'TerrainDynamic$DemoScene$3',1238),AO=Kjb(ZQc,'TerrainDynamic$DemoScene$4',1239),oR=Kjb(zSc,hTc,1431),mP=Kjb(PQc,'TerrainShader',1300),SQ=Kjb(zSc,'BleachBypassShader',1395),gR=Kjb(zSc,'HorizontalTiltShiftShader',1419),sR=Kjb(zSc,'VerticalTiltShiftShader',1437),EO=Kjb(ZQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1240),CO=Kjb(ZQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1241),DO=Kjb(ZQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1242),nR=Kjb(zSc,iTc,1432),lR=Kjb(zSc,jTc,1433),mR=Kjb(zSc,kTc,1434),lP=Kjb(PQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1301),jP=Kjb(PQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1302),kP=Kjb(PQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1303),RQ=Kjb(zSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1396),PQ=Kjb(zSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1397),QQ=Kjb(zSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1398),fR=Kjb(zSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1420),dR=Kjb(zSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1421),eR=Kjb(zSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1422),rR=Kjb(zSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1438),pR=Kjb(zSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1439),qR=Kjb(zSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1440),kR=Kjb(zSc,'LuminosityShader',1425),jR=Kjb(zSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1426),hR=Kjb(zSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1427),iR=Kjb(zSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1428);mMc(Hi)(38);