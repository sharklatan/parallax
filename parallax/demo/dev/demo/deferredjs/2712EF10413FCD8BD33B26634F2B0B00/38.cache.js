function htc(){}
function ltc(){}
function otc(){}
function qyc(){}
function uyc(){}
function xyc(){}
function dJc(){}
function hJc(){}
function kJc(){}
function zKc(){}
function DKc(){}
function GKc(){}
function SKc(){}
function WKc(){}
function ZKc(){}
function jLc(){}
function nLc(){}
function qLc(){}
function CLc(){}
function GLc(){}
function JLc(){}
function HYb(a,b){a.c=b}
function C7b(a,b){a.n=b}
function JIc(a,b){vqb(a.c,b)}
function Wsc(a){this.b=a}
function Zsc(a){this.b=a}
function atc(a){this.b=a}
function dtc(){dtc=DMc;ctc=new htc}
function qtc(){qtc=DMc;ftc=new ltc}
function rtc(){rtc=DMc;gtc=new otc}
function myc(){myc=DMc;lyc=new qyc}
function zyc(){zyc=DMc;oyc=new uyc}
function Ayc(){Ayc=DMc;pyc=new xyc}
function _Ic(){_Ic=DMc;$Ic=new dJc}
function _Kc(){_Kc=DMc;QKc=new WKc}
function vKc(){vKc=DMc;uKc=new zKc}
function IKc(){IKc=DMc;xKc=new DKc}
function JKc(){JKc=DMc;yKc=new GKc}
function OKc(){OKc=DMc;NKc=new SKc}
function aLc(){aLc=DMc;RKc=new ZKc}
function fLc(){fLc=DMc;eLc=new jLc}
function sLc(){sLc=DMc;hLc=new nLc}
function tLc(){tLc=DMc;iLc=new qLc}
function yLc(){yLc=DMc;xLc=new CLc}
function LLc(){LLc=DMc;ALc=new GLc}
function MLc(){MLc=DMc;BLc=new JLc}
function mJc(){mJc=DMc;bJc=new hJc}
function nJc(){nJc=DMc;cJc=new kJc}
function Tsc(a,b){this.b=a;this.c=b}
function hyc(){EIb.call(this,(myc(),lyc))}
function YIc(){EIb.call(this,(_Ic(),$Ic))}
function sKc(){EIb.call(this,(vKc(),uKc))}
function LKc(){EIb.call(this,(OKc(),NKc))}
function cLc(){EIb.call(this,(fLc(),eLc))}
function vLc(){EIb.call(this,(yLc(),xLc))}
function Msc(a){a.A+=1;a.A==3&&yPb(a.w,true)}
function Nsc(){A9b.call(this);this.b=0;this.k=0;this.j=1;this.v=1000;this.u=1000;this.D=true}
function Lsc(a,b,c,d){var e,f,g;g=new n2b(b);SMb(Fu(MRb(fZb(g).j,XTc),225),c);f=new g8b;e=new u7b(new zWb(a.v,a.u),g);U5b(e.ab,-500);oPb(f,e);TGb(a.H.n,f,a.d,d,true)}
function Ksc(a,b,c,d,e,f){var g,i;g=new f0b;$_b(g,new b3b(16755285));g.k=true;d0b(g,(ZZb(),WZb));i=new E7b(b,g);i.e=c;C7b(i,Nu(600*Zkb()));S5b(i.ab,d,e,f);p3b(i.db,1.5707963267948966);i.T=true;i.V=true;oPb(a.I,i);vqb(a.o,i)}
var mVc='enableDiffuse1',nVc='enableDiffuse2',fVc='h',hVc='heightMap',sVc='heightmap',rVc='offset',tVc='r',lVc='tDetail',jVc='tDiffuse1',kVc='tDiffuse2',pVc='uRepeatOverlay',gVc='v';mU(1231,1,nOc);_.Db=function Isc(){a9b(this.c,new Nsc(this.b))};mU(1232,967,{78:1,186:1,337:1},Nsc);_.Wd=function Osc(a){Msc(this)};_.Id=function Psc(a){this.v=a.b.$;this.u=a.b.Z;SMb(Fu(MRb(fZb(this.g.c).j,fVc),225),new Sjb(6/this.v));SMb(Fu(MRb(fZb(this.F.c).j,gVc),225),new Sjb(6/this.u))};_.ob=function Qsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ut((Lxb(),Kxb),(Vxb(),Uxb),this);this.c=new oQb(40,HGb(this.H.n),2,4000);this.v=this.H.n.$;this.u=this.H.n.Z;this.d=new bQb(this.v,this.u,-10000,10000);S5b(this.c.ab,-1200,800,1200);U5b(this.d.ab,100);this.t=new g8b;oPb(this.t,this.d);this.e=new Qwb(this.c,this.H.d);R5b(this.e.w,0);this.e.t=1;this.e.B=1.2;Nwb(this.e,0.8);this.e.i=true;this.e.f=true;this.e.g=true;Lwb(this.e,0.15);f8b(this.I,new X7b(328965,2000,4000));oPb(this.I,new PXb(1118481));this.f=new qYb(16777215,1.15);S5b(this.f.ab,500,2000,0);oPb(this.I,this.f);this.r=new JYb(16729088,1.5,0);R5b(this.r.ab,0);oPb(this.I,this.r);this.i=new oOb(256,256);GNb(this.i,(sEb(),nEb));ENb(this.i,(hEb(),fEb));BNb(this.i,(DCb(),BCb));CNb(this.i,false);this.p=new oOb(256,256);GNb(this.p,nEb);ENb(this.p,fEb);BNb(this.p,BCb);CNb(this.p,false);n=new cLc;u=n.j;SMb(Fu(u.b[NQc],225),new Sjb(0.05));e5b(Fu(Fu(u.b[CUc],225).e,296),256,256);SMb(Fu(u.b[hVc],225),this.i);s=new oOb(2048,2048);GNb(s,nEb);ENb(s,fEb);BNb(s,BCb);s.s=false;NNb(s,(KFb(),JFb));ONb(s,JFb);c=new UNb('./static/textures/terrain/grasslight-big.jpg',new Tsc(this,s));NNb(c,JFb);ONb(c,JFb);d=new UNb('./static/textures/terrain/backgrounddetailed6.jpg',this);NNb(d,JFb);ONb(d,JFb);b=new UNb('./static/textures/terrain/grasslight-big-nm.jpg',this);NNb(b,JFb);ONb(b,JFb);t=new hyc;this.C=t.j;SMb(Fu(MRb(this.C,wUc),225),this.p);SMb(Fu(MRb(this.C,xUc),225),new Sjb(3.5));SMb(Fu(MRb(this.C,iVc),225),this.i);SMb(Fu(MRb(this.C,jVc),225),c);SMb(Fu(MRb(this.C,kVc),225),d);SMb(Fu(MRb(this.C,yUc),225),s);SMb(Fu(MRb(this.C,lVc),225),b);SMb(Fu(MRb(this.C,mVc),225),(Tib(),Tib(),Sib));SMb(Fu(MRb(this.C,nVc),225),Sib);SMb(Fu(MRb(this.C,VTc),225),Sib);$2b(Fu(Fu(MRb(this.C,_Tc),225).e,292),16777215);$2b(Fu(Fu(MRb(this.C,aUc),225).e,292),16777215);$2b(Fu(Fu(MRb(this.C,$Tc),225).e,292),1118481);SMb(Fu(MRb(this.C,BUc),225),new Sjb(30));SMb(Fu(MRb(this.C,oVc),225),new Sjb(375));e5b(Fu(Fu(MRb(this.C,pVc),225).e,296),6,6);this.B=new ntb;Lob(this.B,FUc,new UMb((lNb(),ZMb),new Sjb(1)));Lob(this.B,qVc,new UMb(fNb,new i5b(1.5,1.5)));Lob(this.B,rVc,new UMb(fNb,new i5b(0,0)));this.n=new ntb;i=new m2b((dtc(),ctc));zIb(fZb(i),this.B);i.d=false;i.c=true;Lob(this.n,sVc,i);j=new n2b(n);zIb(fZb(j),u);j.d=false;j.c=true;Lob(this.n,QTc,j);k=new n2b(t);zIb(fZb(k),this.C);k.d=true;k.c=true;Lob(this.n,'terrain',k);o=new zWb(this.v,this.u);p=new m_b;g_b(p,new b3b(0));this.s=new u7b(o,p);U5b(this.s.ab,-500);oPb(this.t,this.s);g=new AWb(6000,6000,64,64);RQb(g);this.w=new u7b(g,k);S5b(this.w.ab,0,-125,0);o3b(this.w.db,-1.5707963267948966);yPb(this.w,false);oPb(this.I,this.w);dHb(this.H.n,this.I.c.d,1);this.H.n.bb=true;this.H.n.cb=true;_Gb(this.H.n,false);q=new SIc(this.I,this.c);f=new DIc(0.6);e=new VIc(new YIc);SMb(Fu(MRb(fZb(e.c).j,fUc),225),new Sjb(0.65));this.g=new VIc(new sKc);this.F=new VIc(new vLc);SMb(Fu(MRb(fZb(this.g.c).j,fVc),225),new Sjb(6/this.v));SMb(Fu(MRb(fZb(this.F.c).j,gVc),225),new Sjb(6/this.u));SMb(Fu(MRb(fZb(this.g.c).j,tVc),225),new Sjb(0.5));SMb(Fu(MRb(fZb(this.F.c).j,tVc),225),new Sjb(0.5));this.F.b=true;r=new oOb(this.v,this.u);GNb(s,mEb);ENb(s,fEb);BNb(s,BCb);s.g=false;s.s=false;a=new LIc(this.H.n,r);vqb(a.c,q);vqb(a.c,f);vqb(a.c,e);JIc(a,this.g);JIc(a,this.F);this.o=new Fqb;new pzc('./static/models/animated/parrot.js',new Wsc(this));new pzc(eVc,new Zsc(this));new pzc('./static/models/animated/stork.js',new atc(this));this.q=Bh()};_.pb=function Rsc(a){var b,c,d,e,f;b=(Bh()-this.q)*0.001;if(this.w.hb){Owb(this.e);this.k=y3b(this.k+0.5*b*this.j,0.4,0.825);f=(this.k-0.4)/0.42499999999999993;e=0.95+f*-0.7;Z2b(this.I.c.d,0.1,e,this.k);dHb(this.H.n,this.I.c.d,1);ZXb(this.f,0.1+f*1.0499999999999998);HYb(this.r,0.9+f*0.6);SMb(Fu(MRb(this.C,xUc),225),new Sjb(0.6+f*2.9));if(this.D){this.b=y3b(this.b+-7.5E-4,0,0.05);SMb(Fu(Gob(this.B,FUc),225),new Sjb(Fu(Fu(Gob(this.B,FUc),225).e,150).b+b*this.b));a5b(Fu(Fu(Gob(this.B,rVc),225).e,296),b*0.05);f5b(Fu(Fu(MRb(this.C,uVc),225).e,296),4*Fu(Fu(Gob(this.B,rVc),225).e,296).d);USb(this.s,Fu(Gob(this.n,sVc),281));TGb(this.H.n,this.t,this.d,this.i,true);USb(this.s,Fu(Gob(this.n,QTc),281));TGb(this.H.n,this.t,this.d,this.p,true);this.D=false}for(c=0;c<this.o.c;c++){d=Fu(yqb(this.o,c),304);D7b(d,Nu(1000*b));a5b(d.ab,d.e*b);d.ab.d>2000&&f5b(d.ab,-1500-Zkb()*500)}TGb(this.H.n,this.I,this.c,null,false)}this.q=Bh()};_.b=0;_.j=0;_.k=0;_.q=0;_.u=0;_.v=0;_.A=0;_.D=false;mU(1233,1,{},Tsc);_.Wd=function Usc(a){Msc(this.b);Lsc(this.b,new LKc,a,this.c)};mU(1234,1,{},Wsc);_.Bf=function Xsc(a,b){kzc((Fu(a,338),Fu(b,241)));Ksc(this.b,Fu(b,241),500,-3500,500,700);Ksc(this.b,Fu(b,241),500,-3000-Zkb()*500,500,-200);Ksc(this.b,Fu(b,241),500,-3000-Zkb()*500,500,200);Ksc(this.b,Fu(b,241),500,-3000-Zkb()*500,500,1000)};mU(1235,1,{},Zsc);_.Bf=function $sc(a,b){kzc((Fu(a,338),Fu(b,241)));Ksc(this.b,Fu(b,241),1000,-3000-Zkb()*500,350,40)};mU(1236,1,{},atc);_.Bf=function btc(a,b){kzc((Fu(a,338),Fu(b,241)));Ksc(this.b,Fu(b,241),1000,-3000-Zkb()*500,350,340)};var ctc;mU(1237,1,{},htc);_.Qd=function itc(){return qtc(),ftc};_.Rd=function jtc(){return rtc(),gtc};var ftc,gtc;mU(1238,1,{},ltc);_.pc=function mtc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};mU(1239,1,{},otc);_.pc=function ptc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};mU(1345,725,aOc,hyc);_.Nd=function iyc(){zIb(this,pNb());zIb(this,qNb());zIb(this,rNb());sIb(this,mVc,new UMb((lNb(),aNb),(Tib(),Tib(),Rib)));sIb(this,nVc,new UMb(aNb,Rib));sIb(this,VTc,new UMb(aNb,Rib));sIb(this,vVc,new UMb(aNb,Rib));sIb(this,jVc,new TMb(dNb));sIb(this,kVc,new TMb(dNb));sIb(this,lVc,new TMb(dNb));sIb(this,wUc,new TMb(dNb));sIb(this,yUc,new TMb(dNb));sIb(this,iVc,new TMb(dNb));sIb(this,xUc,new UMb(ZMb,new Sjb(1)));sIb(this,wVc,new UMb(ZMb,new Sjb(0)));sIb(this,oVc,new UMb(ZMb,new Sjb(1)));sIb(this,_Tc,new UMb(YMb,new b3b(15658734)));sIb(this,aUc,new UMb(YMb,new b3b(1118481)));sIb(this,$Tc,new UMb(YMb,new b3b(328965)));sIb(this,BUc,new UMb(ZMb,new Sjb(30)));sIb(this,fUc,new UMb(ZMb,new Sjb(1)));sIb(this,'uRepeatBase',new UMb(fNb,new i5b(1,1)));sIb(this,pVc,new UMb(fNb,new i5b(1,1)));sIb(this,uVc,new UMb(fNb,new i5b(0,0)))};_.Od=function jyc(a){var b,c;c=new brb(vu(jS,JMc,1,[gUc,hUc]));b=new brb(vu(jS,JMc,1,[jUc,kUc,lUc]));BIb(this,JIb(a,vu(mS,JMc,173,[c,b])))};_.Pd=function kyc(a){var b,c;c=new brb(vu(jS,JMc,1,[mUc]));b=new brb(vu(jS,JMc,1,[nUc]));CIb(this,JIb(a,vu(mS,JMc,173,[c,b])))};var lyc;mU(1346,1,{},qyc);_.Qd=function ryc(){return zyc(),oyc};_.Rd=function syc(){return Ayc(),pyc};var oyc,pyc;mU(1347,1,{},uyc);_.pc=function vyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};mU(1348,1,{},xyc);_.pc=function yyc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};mU(1440,725,aOc,YIc);_.Nd=function ZIc(){sIb(this,XTc,new TMb((lNb(),dNb)));sIb(this,fUc,new UMb(ZMb,new Sjb(1)))};var $Ic;mU(1441,1,{},dJc);_.Qd=function eJc(){return mJc(),bJc};_.Rd=function fJc(){return nJc(),cJc};var bJc,cJc;mU(1442,1,{},hJc);_.pc=function iJc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};mU(1443,1,{},kJc);_.pc=function lJc(){return NUc};mU(1464,725,aOc,sKc);_.Nd=function tKc(){sIb(this,XTc,new TMb((lNb(),dNb)));sIb(this,fVc,new UMb(ZMb,new Sjb(0.001953125)));sIb(this,tVc,new UMb(ZMb,new Sjb(0.35)))};var uKc;mU(1465,1,{},zKc);_.Qd=function AKc(){return IKc(),xKc};_.Rd=function BKc(){return JKc(),yKc};var xKc,yKc;mU(1466,1,{},DKc);_.pc=function EKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};mU(1467,1,{},GKc);_.pc=function HKc(){return NUc};mU(1470,725,aOc,LKc);_.Nd=function MKc(){sIb(this,XTc,new TMb((lNb(),dNb)))};var NKc;mU(1471,1,{},SKc);_.Qd=function TKc(){return _Kc(),QKc};_.Rd=function UKc(){return aLc(),RKc};var QKc,RKc;mU(1472,1,{},WKc);_.pc=function XKc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};mU(1473,1,{},ZKc);_.pc=function $Kc(){return NUc};mU(1476,725,aOc,cLc);_.Nd=function dLc(){sIb(this,hVc,new TMb((lNb(),dNb)));sIb(this,CUc,new UMb(fNb,new i5b(512,512)));sIb(this,qVc,new UMb(fNb,new i5b(1,1)));sIb(this,NQc,new UMb(ZMb,new Sjb(0.05)))};var eLc;mU(1477,1,{},jLc);_.Qd=function kLc(){return sLc(),hLc};_.Rd=function lLc(){return tLc(),iLc};var hLc,iLc;mU(1478,1,{},nLc);_.pc=function oLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};mU(1479,1,{},qLc);_.pc=function rLc(){return NUc};mU(1482,725,aOc,vLc);_.Nd=function wLc(){sIb(this,XTc,new TMb((lNb(),dNb)));sIb(this,gVc,new UMb(ZMb,new Sjb(0.001953125)));sIb(this,tVc,new UMb(ZMb,new Sjb(0.35)))};var xLc;mU(1483,1,{},CLc);_.Qd=function DLc(){return LLc(),ALc};_.Rd=function ELc(){return MLc(),BLc};var ALc,BLc;mU(1484,1,{},GLc);_.pc=function HLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};mU(1485,1,{},JLc);_.pc=function KLc(){return NUc};var AO=Gjb(lTc,'TerrainDynamic$DemoScene',1232),wO=Gjb(lTc,'TerrainDynamic$DemoScene$1',1233),xO=Gjb(lTc,'TerrainDynamic$DemoScene$2',1234),yO=Gjb(lTc,'TerrainDynamic$DemoScene$3',1235),zO=Gjb(lTc,'TerrainDynamic$DemoScene$4',1236),nR=Gjb(PUc,xVc,1476),lP=Gjb(bTc,'TerrainShader',1345),RQ=Gjb(PUc,'BleachBypassShader',1440),fR=Gjb(PUc,'HorizontalTiltShiftShader',1464),rR=Gjb(PUc,'VerticalTiltShiftShader',1482),DO=Gjb(lTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1237),BO=Gjb(lTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1238),CO=Gjb(lTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1239),mR=Gjb(PUc,yVc,1477),kR=Gjb(PUc,zVc,1478),lR=Gjb(PUc,AVc,1479),kP=Gjb(bTc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1346),iP=Gjb(bTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1347),jP=Gjb(bTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1348),QQ=Gjb(PUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1441),OQ=Gjb(PUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1442),PQ=Gjb(PUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1443),eR=Gjb(PUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1465),cR=Gjb(PUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1466),dR=Gjb(PUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1467),qR=Gjb(PUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1483),oR=Gjb(PUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1484),pR=Gjb(PUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1485),jR=Gjb(PUc,'LuminosityShader',1470),iR=Gjb(PUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1471),gR=Gjb(PUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1472),hR=Gjb(PUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1473);BOc(Hi)(38);