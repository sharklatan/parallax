function dLb(){}
function hLb(){}
function kLb(){}
function mLb(){mLb=kMc;bLb=new hLb}
function nLb(){nLb=kMc;cLb=new kLb}
function _Kb(){_Kb=kMc;$Kb=new dLb}
function YKb(){nJb.call(this,(_Kb(),$Kb))}
function Dmc(){nbc.call(this);this.c=0;this.d=0}
zV(761,737,INc,YKb);_.Ld=function ZKb(){bJb(this,'mRefractionRatio',new DNb((WNb(),INb),new gkb(1.02)));bJb(this,'mFresnelBias',new DNb(INb,new gkb(0.1)));bJb(this,'mFresnelPower',new DNb(INb,new gkb(2)));bJb(this,'mFresnelScale',new DNb(INb,new gkb(1)));bJb(this,gUc,new CNb(ONb))};var $Kb;zV(762,1,{},dLb);_.Od=function eLb(){return mLb(),bLb};_.Pd=function fLb(){return nLb(),cLb};var bLb,cLb;zV(763,1,{},hLb);_.nc=function iLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};zV(764,1,{},kLb);_.nc=function lLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};zV(1152,1,WNc);_.Mb=function Bmc(){Pac(this.b,new Dmc(this.a))};zV(1153,985,{331:1},Dmc);_.nb=function Emc(){var a,b,c,d,e,f,g,i,j;this.a=new bRb(60,gGb(this.G.k),1,100000);k8b(this.a._,3200);this.b=new bRb(60,gGb(this.G.k),1,100000);this.e=new T9b;a=new BXb(100,32,16);j=new LOb('./static/textures/cube/park2/*.jpg');kOb(j,(XCb(),VCb));g=new YKb;BNb(yv(FSb(g.i,gUc),226),j);c=new Z3b(g);this.f=new Wqb;for(b=0;b<500;b++){d=new dZb(a,c);C7b(d._,nlb()*10000-5000);D7b(d._,nlb()*10000-5000);k8b(d._,nlb()*10000-5000);h8b(d.eb,nlb()*3+1);ZPb(this.H,d);Mqb(this.f,d)}this.H.W=false;i=new PJb;BNb(yv(FSb(i.i,gUc),226),j);f=new Z3b(i);a_b(f,(O0b(),L0b));e=new dZb(new MWb(100000,100000,100000),f);ZPb(this.e,e);hGb(this.G.k,false)};_.ob=function Fmc(a){var b,c,d,e;e=1.0E-4*a;w7b(this.a._,(this.c-this.a._.c)*0.05);x7b(this.a._,(-this.d-this.a._.d)*0.05);xQb(this.a,this.H._);a5b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=yv(Pqb(this.f,b),308);C7b(d._,5000*Math.cos(e+b));D7b(d._,5000*Math.sin(e+b*1.1))}mHb(this.G.k,true);EHb(this.G.k,this.e,this.b,null,false);EHb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var SN=Wjb($Sc,'MaterialsCubemapFresnel$DemoScene',1153),mH=Wjb(hUc,'FresnelShader',761),lH=Wjb(hUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',762),jH=Wjb(hUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',763),kH=Wjb(hUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',764);iOc(wj)(21);