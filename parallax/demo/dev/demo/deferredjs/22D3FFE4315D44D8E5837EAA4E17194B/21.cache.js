function RLb(){}
function VLb(){}
function YLb(){}
function NLb(){NLb=YMc;MLb=new RLb}
function $Lb(){$Lb=YMc;PLb=new VLb}
function _Lb(){_Lb=YMc;QLb=new YLb}
function KLb(){_Jb.call(this,(NLb(),MLb))}
function pnc(){_bc.call(this);this.d=0;this.e=0}
kW(766,742,wOc,KLb);_.Sd=function LLb(){PJb(this,'mRefractionRatio',new pOb((IOb(),uOb),new Tkb(1.02)));PJb(this,'mFresnelBias',new pOb(uOb,new Tkb(0.1)));PJb(this,'mFresnelPower',new pOb(uOb,new Tkb(2)));PJb(this,'mFresnelScale',new pOb(uOb,new Tkb(1)));PJb(this,VUc,new oOb(AOb))};var MLb;kW(767,1,{},RLb);_.Vd=function SLb(){return $Lb(),PLb};_.Wd=function TLb(){return _Lb(),QLb};var PLb,QLb;kW(768,1,{},VLb);_.uc=function WLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};kW(769,1,{},YLb);_.uc=function ZLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};kW(1157,1,KOc);_.Qb=function nnc(){Bbc(this.c,new pnc(this.b))};kW(1158,990,{331:1},pnc);_.ob=function qnc(){var a,b,c,d,e,f,g,i,j;this.b=new PRb(60,UGb(this.H.n),1,100000);Y8b(this.b.ab,3200);this.c=new PRb(60,UGb(this.H.n),1,100000);this.f=new Fac;a=new nYb(100,32,16);j=new xPb('./static/textures/cube/park2/*.jpg');YOb(j,(JDb(),HDb));g=new KLb;nOb(bw(rTb(g.j,VUc),226),j);c=new L4b(g);this.g=new Irb;for(b=0;b<500;b++){e=new RZb(a,c);o8b(e.ab,$lb()*10000-5000);p8b(e.ab,$lb()*10000-5000);Y8b(e.ab,$lb()*10000-5000);V8b(e.fb,$lb()*3+1);LQb(this.I,e);yrb(this.g,e)}this.I.X=false;i=new BKb;nOb(bw(rTb(i.j,VUc),226),j);f=new L4b(i);O_b(f,(A1b(),x1b));d=new RZb(new yXb(100000,100000,100000),f);LQb(this.f,d);VGb(this.H.n,false)};_.pb=function rnc(a){var b,c,d,e;e=1.0E-4*a;i8b(this.b.ab,(this.d-this.b.ab.d)*0.05);j8b(this.b.ab,(-this.e-this.b.ab.e)*0.05);jRb(this.b,this.I.ab);O5b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=bw(Brb(this.g,b),308);o8b(d.ab,5000*Math.cos(e+b));p8b(d.ab,5000*Math.sin(e+b*1.1))}$Hb(this.H.n,true);qIb(this.H.n,this.f,this.c,null,false);qIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var DO=Hkb(NTc,'MaterialsCubemapFresnel$DemoScene',1158),ZH=Hkb(WUc,'FresnelShader',766),YH=Hkb(WUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',767),WH=Hkb(WUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',768),XH=Hkb(WUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',769);YOc(Pj)(21);