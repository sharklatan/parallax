function LKb(){}
function PKb(){}
function SKb(){}
function HKb(){HKb=iLc;GKb=new LKb}
function UKb(){UKb=iLc;JKb=new PKb}
function VKb(){VKb=iLc;KKb=new SKb}
function EKb(){VIb.call(this,(HKb(),GKb))}
function Nlc(){xac.call(this);this.d=0;this.e=0}
xU(750,726,IMc,EKb);_.Od=function FKb(){JIb(this,'mRefractionRatio',new jNb((CNb(),oNb),new dkb(1.02)));JIb(this,'mFresnelBias',new jNb(oNb,new dkb(0.1)));JIb(this,'mFresnelPower',new jNb(oNb,new dkb(2)));JIb(this,'mFresnelScale',new jNb(oNb,new dkb(1)));JIb(this,_Sc,new iNb(uNb))};var GKb;xU(751,1,{},LKb);_.Rd=function MKb(){return UKb(),JKb};_.Sd=function NKb(){return VKb(),KKb};var JKb,KKb;xU(752,1,{},PKb);_.qc=function QKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};xU(753,1,{},SKb);_.qc=function TKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};xU(1141,1,WMc);_.Db=function Llc(){Z9b(this.c,new Nlc(this.b))};xU(1142,974,{327:1},Nlc);_.ob=function Olc(){var a,b,c,d,e,f,g,i,j;this.b=new IQb(60,YGb(this.H.n),1,100000);b7b(this.b.ab,3200);this.c=new IQb(60,YGb(this.H.n),1,100000);this.f=new c9b;a=new iXb(100,32,16);j=new rOb('./static/textures/cube/park2/*.jpg');SNb(j,(UCb(),SCb));g=new EKb;hNb(Eu(lSb(g.j,_Sc),225),j);c=new v3b(g);this.g=new Tqb;for(b=0;b<500;b++){d=new FYb(a,c);o6b(d.ab,klb()*10000-5000);p6b(d.ab,klb()*10000-5000);b7b(d.ab,klb()*10000-5000);$6b(d.fb,klb()*3+1);FPb(this.I,d);Jqb(this.g,d)}this.I.X=false;i=new vJb;hNb(Eu(lSb(i.j,_Sc),225),j);f=new v3b(i);y$b(f,(k0b(),h0b));e=new FYb(new tWb(100000,100000,100000),f);FPb(this.f,e);qHb(this.H.n,false)};_.pb=function Plc(a){var b,c,d,e;e=1.0E-4*a;j6b(this.b.ab,(this.d-this.b.ab.d)*0.05);k6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);cQb(this.b,this.I.ab);r4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Eu(Mqb(this.g,b),304);o6b(d.ab,5000*Math.cos(e+b));p6b(d.ab,5000*Math.sin(e+b*1.1))}RGb(this.H.n,true);iHb(this.H.n,this.f,this.c,null,false);iHb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var TM=Tjb(URc,'MaterialsCubemapFresnel$DemoScene',1142),nG=Tjb(aTc,'FresnelShader',750),mG=Tjb(aTc,'FresnelShader_Resources_default_InlineClientBundleGenerator',751),kG=Tjb(aTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',752),lG=Tjb(aTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',753);iNc(Hi)(21);