function etc(){}
function itc(){}
function ltc(){}
function nyc(){}
function ryc(){}
function uyc(){}
function aJc(){}
function eJc(){}
function hJc(){}
function wKc(){}
function AKc(){}
function DKc(){}
function PKc(){}
function TKc(){}
function WKc(){}
function gLc(){}
function kLc(){}
function nLc(){}
function zLc(){}
function DLc(){}
function GLc(){}
function AYb(a,b){a.b=b}
function v7b(a,b){a.k=b}
function GIc(a,b){fqb(a.b,b)}
function Tsc(a){this.a=a}
function Wsc(a){this.a=a}
function Zsc(a){this.a=a}
function atc(){atc=AMc;_sc=new etc}
function ntc(){ntc=AMc;ctc=new itc}
function otc(){otc=AMc;dtc=new ltc}
function jyc(){jyc=AMc;iyc=new nyc}
function wyc(){wyc=AMc;lyc=new ryc}
function xyc(){xyc=AMc;myc=new uyc}
function YIc(){YIc=AMc;XIc=new aJc}
function jJc(){jJc=AMc;$Ic=new eJc}
function kJc(){kJc=AMc;_Ic=new hJc}
function sKc(){sKc=AMc;rKc=new wKc}
function FKc(){FKc=AMc;uKc=new AKc}
function GKc(){GKc=AMc;vKc=new DKc}
function LKc(){LKc=AMc;KKc=new PKc}
function YKc(){YKc=AMc;NKc=new TKc}
function ZKc(){ZKc=AMc;OKc=new WKc}
function cLc(){cLc=AMc;bLc=new gLc}
function pLc(){pLc=AMc;eLc=new kLc}
function qLc(){qLc=AMc;fLc=new nLc}
function vLc(){vLc=AMc;uLc=new zLc}
function ILc(){ILc=AMc;xLc=new DLc}
function JLc(){JLc=AMc;yLc=new GLc}
function Qsc(a,b){this.a=a;this.b=b}
function eyc(){oIb.call(this,(jyc(),iyc))}
function VIc(){oIb.call(this,(YIc(),XIc))}
function pKc(){oIb.call(this,(sKc(),rKc))}
function IKc(){oIb.call(this,(LKc(),KKc))}
function _Kc(){oIb.call(this,(cLc(),bLc))}
function sLc(){oIb.call(this,(vLc(),uLc))}
function Jsc(a){a.w+=1;a.w==3&&jPb(a.v,true)}
function Ksc(){u9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Isc(a,b,c,d){var e,f,g;g=new g2b(b);CMb(pu(DRb($Yb(g).i,NTc),225),c);f=new a8b;e=new n7b(new sWb(a.u,a.t),g);N5b(e._,-500);$Ob(f,e);DGb(a.G.k,f,a.c,d,true)}
function Hsc(a,b,c,d,e,f){var g,i;g=new $_b;T_b(g,new W2b(16755285));g.j=true;Y_b(g,(SZb(),PZb));i=new x7b(b,g);i.d=c;v7b(i,xu(600*Jkb()));L5b(i._,d,e,f);i3b(i.cb,1.5707963267948966);i.S=true;i.U=true;$Ob(a.H,i);fqb(a.n,i)}
var bVc='enableDiffuse1',cVc='enableDiffuse2',WUc='h',YUc='heightMap',hVc='heightmap',gVc='offset',iVc='r',aVc='tDetail',$Uc='tDiffuse1',_Uc='tDiffuse2',eVc='uRepeatOverlay',XUc='v';YT(1236,1,jOc);_.zb=function Fsc(){W8b(this.b,new Ksc(this.a))};YT(1237,971,{78:1,186:1,338:1},Ksc);_.Ud=function Lsc(a){Jsc(this)};_.Gd=function Msc(a){this.u=a.a.Z;this.t=a.a.Y;CMb(pu(DRb($Yb(this.f.b).i,WUc),225),new Cjb(6/this.u));CMb(pu(DRb($Yb(this.D.b).i,XUc),225),new Cjb(6/this.t))};_.nb=function Nsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;et((vxb(),uxb),(Fxb(),Exb),this);this.b=new bQb(40,rGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new OPb(this.u,this.t,-10000,10000);L5b(this.b._,-1200,800,1200);N5b(this.c._,100);this.s=new a8b;$Ob(this.s,this.c);this.d=new Awb(this.b,this.G.c);K5b(this.d.v,0);this.d.s=1;this.d.A=1.2;xwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;vwb(this.d,0.15);$7b(this.H,new Q7b(328965,2000,4000));$Ob(this.H,new IXb(1118481));this.e=new jYb(16777215,1.15);L5b(this.e._,500,2000,0);$Ob(this.H,this.e);this.q=new CYb(16729088,1.5,0);K5b(this.q._,0);$Ob(this.H,this.q);this.g=new $Nb(256,256);qNb(this.g,(cEb(),ZDb));oNb(this.g,(TDb(),RDb));lNb(this.g,(nCb(),lCb));mNb(this.g,false);this.o=new $Nb(256,256);qNb(this.o,ZDb);oNb(this.o,RDb);lNb(this.o,lCb);mNb(this.o,false);n=new _Kc;u=n.i;CMb(pu(u.a[FQc],225),new Cjb(0.05));Z4b(pu(pu(u.a[rUc],225).d,297),256,256);CMb(pu(u.a[YUc],225),this.g);s=new $Nb(2048,2048);qNb(s,ZDb);oNb(s,RDb);lNb(s,lCb);s.r=false;xNb(s,(uFb(),tFb));yNb(s,tFb);c=new ENb('./static/textures/terrain/grasslight-big.jpg',new Qsc(this,s));xNb(c,tFb);yNb(c,tFb);d=new ENb('./static/textures/terrain/backgrounddetailed6.jpg',this);xNb(d,tFb);yNb(d,tFb);b=new ENb('./static/textures/terrain/grasslight-big-nm.jpg',this);xNb(b,tFb);yNb(b,tFb);t=new eyc;this.B=t.i;CMb(pu(DRb(this.B,lUc),225),this.o);CMb(pu(DRb(this.B,mUc),225),new Cjb(3.5));CMb(pu(DRb(this.B,ZUc),225),this.g);CMb(pu(DRb(this.B,$Uc),225),c);CMb(pu(DRb(this.B,_Uc),225),d);CMb(pu(DRb(this.B,nUc),225),s);CMb(pu(DRb(this.B,aVc),225),b);CMb(pu(DRb(this.B,bVc),225),(Dib(),Dib(),Cib));CMb(pu(DRb(this.B,cVc),225),Cib);CMb(pu(DRb(this.B,LTc),225),Cib);T2b(pu(pu(DRb(this.B,RTc),225).d,293),16777215);T2b(pu(pu(DRb(this.B,STc),225).d,293),16777215);T2b(pu(pu(DRb(this.B,QTc),225).d,293),1118481);CMb(pu(DRb(this.B,qUc),225),new Cjb(30));CMb(pu(DRb(this.B,dVc),225),new Cjb(375));Z4b(pu(pu(DRb(this.B,eVc),225).d,297),6,6);this.A=new Zsb;vob(this.A,uUc,new EMb((XMb(),JMb),new Cjb(1)));vob(this.A,fVc,new EMb(RMb,new b5b(1.5,1.5)));vob(this.A,gVc,new EMb(RMb,new b5b(0,0)));this.k=new Zsb;i=new f2b((atc(),_sc));jIb($Yb(i),this.A);i.c=false;i.b=true;vob(this.k,hVc,i);j=new g2b(n);jIb($Yb(j),u);j.c=false;j.b=true;vob(this.k,HTc,j);k=new g2b(t);jIb($Yb(k),this.B);k.c=true;k.b=true;vob(this.k,'terrain',k);o=new sWb(this.u,this.t);p=new f_b;_$b(p,new W2b(0));this.r=new n7b(o,p);N5b(this.r._,-500);$Ob(this.s,this.r);g=new tWb(6000,6000,64,64);IQb(g);this.v=new n7b(g,k);L5b(this.v._,0,-125,0);h3b(this.v.cb,-1.5707963267948966);jPb(this.v,false);$Ob(this.H,this.v);PGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;LGb(this.G.k,false);q=new PIc(this.H,this.b);f=new AIc(0.6);e=new SIc(new VIc);CMb(pu(DRb($Yb(e.b).i,XTc),225),new Cjb(0.65));this.f=new SIc(new pKc);this.D=new SIc(new sLc);CMb(pu(DRb($Yb(this.f.b).i,WUc),225),new Cjb(6/this.u));CMb(pu(DRb($Yb(this.D.b).i,XUc),225),new Cjb(6/this.t));CMb(pu(DRb($Yb(this.f.b).i,iVc),225),new Cjb(0.5));CMb(pu(DRb($Yb(this.D.b).i,iVc),225),new Cjb(0.5));this.D.a=true;r=new $Nb(this.u,this.t);qNb(s,YDb);oNb(s,RDb);lNb(s,lCb);s.f=false;s.r=false;a=new IIc(this.G.k,r);fqb(a.b,q);fqb(a.b,f);fqb(a.b,e);GIc(a,this.f);GIc(a,this.D);this.n=new pqb;new mzc('./static/models/animated/parrot.js',new Tsc(this));new mzc(VUc,new Wsc(this));new mzc('./static/models/animated/stork.js',new Zsc(this));this.p=rh()};_.ob=function Osc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){ywb(this.d);this.j=r3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;S2b(this.H.a.c,0.1,e,this.j);PGb(this.G.k,this.H.a.c,1);SXb(this.e,0.1+f*1.0499999999999998);AYb(this.q,0.9+f*0.6);CMb(pu(DRb(this.B,mUc),225),new Cjb(0.6+f*2.9));if(this.C){this.a=r3b(this.a+-7.5E-4,0,0.05);CMb(pu(qob(this.A,uUc),225),new Cjb(pu(pu(qob(this.A,uUc),225).d,150).a+b*this.a));V4b(pu(pu(qob(this.A,gVc),225).d,297),b*0.05);$4b(pu(pu(DRb(this.B,jVc),225).d,297),4*pu(pu(qob(this.A,gVc),225).d,297).c);NSb(this.r,pu(qob(this.k,hVc),282));DGb(this.G.k,this.s,this.c,this.g,true);NSb(this.r,pu(qob(this.k,HTc),282));DGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=pu(iqb(this.n,c),305);w7b(d,xu(1000*b));V4b(d._,d.d*b);d._.c>2000&&$4b(d._,-1500-Jkb()*500)}DGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;YT(1238,1,{},Qsc);_.Ud=function Rsc(a){Jsc(this.a);Isc(this.a,new IKc,a,this.b)};YT(1239,1,{},Tsc);_.Bf=function Usc(a,b){hzc((pu(a,339),pu(b,242)));Hsc(this.a,pu(b,242),500,-3500,500,700);Hsc(this.a,pu(b,242),500,-3000-Jkb()*500,500,-200);Hsc(this.a,pu(b,242),500,-3000-Jkb()*500,500,200);Hsc(this.a,pu(b,242),500,-3000-Jkb()*500,500,1000)};YT(1240,1,{},Wsc);_.Bf=function Xsc(a,b){hzc((pu(a,339),pu(b,242)));Hsc(this.a,pu(b,242),1000,-3000-Jkb()*500,350,40)};YT(1241,1,{},Zsc);_.Bf=function $sc(a,b){hzc((pu(a,339),pu(b,242)));Hsc(this.a,pu(b,242),1000,-3000-Jkb()*500,350,340)};var _sc;YT(1242,1,{},etc);_.Od=function ftc(){return ntc(),ctc};_.Pd=function gtc(){return otc(),dtc};var ctc,dtc;YT(1243,1,{},itc);_.nc=function jtc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};YT(1244,1,{},ltc);_.nc=function mtc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};YT(1350,729,YNc,eyc);_.Ld=function fyc(){jIb(this,_Mb());jIb(this,aNb());jIb(this,bNb());cIb(this,bVc,new EMb((XMb(),MMb),(Dib(),Dib(),Bib)));cIb(this,cVc,new EMb(MMb,Bib));cIb(this,LTc,new EMb(MMb,Bib));cIb(this,kVc,new EMb(MMb,Bib));cIb(this,$Uc,new DMb(PMb));cIb(this,_Uc,new DMb(PMb));cIb(this,aVc,new DMb(PMb));cIb(this,lUc,new DMb(PMb));cIb(this,nUc,new DMb(PMb));cIb(this,ZUc,new DMb(PMb));cIb(this,mUc,new EMb(JMb,new Cjb(1)));cIb(this,lVc,new EMb(JMb,new Cjb(0)));cIb(this,dVc,new EMb(JMb,new Cjb(1)));cIb(this,RTc,new EMb(IMb,new W2b(15658734)));cIb(this,STc,new EMb(IMb,new W2b(1118481)));cIb(this,QTc,new EMb(IMb,new W2b(328965)));cIb(this,qUc,new EMb(JMb,new Cjb(30)));cIb(this,XTc,new EMb(JMb,new Cjb(1)));cIb(this,'uRepeatBase',new EMb(RMb,new b5b(1,1)));cIb(this,eVc,new EMb(RMb,new b5b(1,1)));cIb(this,jVc,new EMb(RMb,new b5b(0,0)))};_.Md=function gyc(a){var b,c;c=new Nqb(fu(VR,FMc,1,[YTc,ZTc]));b=new Nqb(fu(VR,FMc,1,[_Tc,aUc,bUc]));lIb(this,tIb(a,fu(YR,FMc,173,[c,b])))};_.Nd=function hyc(a){var b,c;c=new Nqb(fu(VR,FMc,1,[cUc]));b=new Nqb(fu(VR,FMc,1,[dUc]));mIb(this,tIb(a,fu(YR,FMc,173,[c,b])))};var iyc;YT(1351,1,{},nyc);_.Od=function oyc(){return wyc(),lyc};_.Pd=function pyc(){return xyc(),myc};var lyc,myc;YT(1352,1,{},ryc);_.nc=function syc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1353,1,{},uyc);_.nc=function vyc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1445,729,YNc,VIc);_.Ld=function WIc(){cIb(this,NTc,new DMb((XMb(),PMb)));cIb(this,XTc,new EMb(JMb,new Cjb(1)))};var XIc;YT(1446,1,{},aJc);_.Od=function bJc(){return jJc(),$Ic};_.Pd=function cJc(){return kJc(),_Ic};var $Ic,_Ic;YT(1447,1,{},eJc);_.nc=function fJc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};YT(1448,1,{},hJc);_.nc=function iJc(){return CUc};YT(1469,729,YNc,pKc);_.Ld=function qKc(){cIb(this,NTc,new DMb((XMb(),PMb)));cIb(this,WUc,new EMb(JMb,new Cjb(0.001953125)));cIb(this,iVc,new EMb(JMb,new Cjb(0.35)))};var rKc;YT(1470,1,{},wKc);_.Od=function xKc(){return FKc(),uKc};_.Pd=function yKc(){return GKc(),vKc};var uKc,vKc;YT(1471,1,{},AKc);_.nc=function BKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1472,1,{},DKc);_.nc=function EKc(){return CUc};YT(1475,729,YNc,IKc);_.Ld=function JKc(){cIb(this,NTc,new DMb((XMb(),PMb)))};var KKc;YT(1476,1,{},PKc);_.Od=function QKc(){return YKc(),NKc};_.Pd=function RKc(){return ZKc(),OKc};var NKc,OKc;YT(1477,1,{},TKc);_.nc=function UKc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};YT(1478,1,{},WKc);_.nc=function XKc(){return CUc};YT(1481,729,YNc,_Kc);_.Ld=function aLc(){cIb(this,YUc,new DMb((XMb(),PMb)));cIb(this,rUc,new EMb(RMb,new b5b(512,512)));cIb(this,fVc,new EMb(RMb,new b5b(1,1)));cIb(this,FQc,new EMb(JMb,new Cjb(0.05)))};var bLc;YT(1482,1,{},gLc);_.Od=function hLc(){return pLc(),eLc};_.Pd=function iLc(){return qLc(),fLc};var eLc,fLc;YT(1483,1,{},kLc);_.nc=function lLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};YT(1484,1,{},nLc);_.nc=function oLc(){return CUc};YT(1487,729,YNc,sLc);_.Ld=function tLc(){cIb(this,NTc,new DMb((XMb(),PMb)));cIb(this,XUc,new EMb(JMb,new Cjb(0.001953125)));cIb(this,iVc,new EMb(JMb,new Cjb(0.35)))};var uLc;YT(1488,1,{},zLc);_.Od=function ALc(){return ILc(),xLc};_.Pd=function BLc(){return JLc(),yLc};var xLc,yLc;YT(1489,1,{},DLc);_.nc=function ELc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1490,1,{},GLc);_.nc=function HLc(){return CUc};var kO=qjb(cTc,'TerrainDynamic$DemoScene',1237),gO=qjb(cTc,'TerrainDynamic$DemoScene$1',1238),hO=qjb(cTc,'TerrainDynamic$DemoScene$2',1239),iO=qjb(cTc,'TerrainDynamic$DemoScene$3',1240),jO=qjb(cTc,'TerrainDynamic$DemoScene$4',1241),ZQ=qjb(EUc,mVc,1481),XO=qjb(USc,'TerrainShader',1350),BQ=qjb(EUc,'BleachBypassShader',1445),RQ=qjb(EUc,'HorizontalTiltShiftShader',1469),bR=qjb(EUc,'VerticalTiltShiftShader',1487),nO=qjb(cTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1242),lO=qjb(cTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1243),mO=qjb(cTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1244),YQ=qjb(EUc,nVc,1482),WQ=qjb(EUc,oVc,1483),XQ=qjb(EUc,pVc,1484),WO=qjb(USc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1351),UO=qjb(USc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1352),VO=qjb(USc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1353),AQ=qjb(EUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1446),yQ=qjb(EUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1447),zQ=qjb(EUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1448),QQ=qjb(EUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1470),OQ=qjb(EUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1471),PQ=qjb(EUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1472),aR=qjb(EUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1488),$Q=qjb(EUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1489),_Q=qjb(EUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1490),VQ=qjb(EUc,'LuminosityShader',1475),UQ=qjb(EUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1476),SQ=qjb(EUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1477),TQ=qjb(EUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1478);xOc(xi)(38);