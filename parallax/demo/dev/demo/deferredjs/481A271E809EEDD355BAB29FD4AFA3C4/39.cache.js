function Hsc(){}
function Lsc(){}
function Osc(){}
function Nwc(){}
function Rwc(){}
function Uwc(){}
function AHc(){}
function EHc(){}
function HHc(){}
function WIc(){}
function $Ic(){}
function bJc(){}
function nJc(){}
function rJc(){}
function uJc(){}
function GJc(){}
function KJc(){}
function NJc(){}
function ZJc(){}
function bKc(){}
function eKc(){}
function ZXb(a,b){a.c=b}
function S6b(a,b){a.n=b}
function eHc(a,b){hqb(a.c,b)}
function usc(a){this.b=a}
function xsc(a){this.b=a}
function Asc(a){this.b=a}
function Dsc(){Dsc=$Kc;Csc=new Hsc}
function Qsc(){Qsc=$Kc;Fsc=new Lsc}
function Rsc(){Rsc=$Kc;Gsc=new Osc}
function Jwc(){Jwc=$Kc;Iwc=new Nwc}
function Wwc(){Wwc=$Kc;Lwc=new Rwc}
function Xwc(){Xwc=$Kc;Mwc=new Uwc}
function wHc(){wHc=$Kc;vHc=new AHc}
function JHc(){JHc=$Kc;yHc=new EHc}
function KHc(){KHc=$Kc;zHc=new HHc}
function SIc(){SIc=$Kc;RIc=new WIc}
function dJc(){dJc=$Kc;UIc=new $Ic}
function eJc(){eJc=$Kc;VIc=new bJc}
function jJc(){jJc=$Kc;iJc=new nJc}
function wJc(){wJc=$Kc;lJc=new rJc}
function xJc(){xJc=$Kc;mJc=new uJc}
function CJc(){CJc=$Kc;BJc=new GJc}
function PJc(){PJc=$Kc;EJc=new KJc}
function QJc(){QJc=$Kc;FJc=new NJc}
function VJc(){VJc=$Kc;UJc=new ZJc}
function gKc(){gKc=$Kc;XJc=new bKc}
function hKc(){hKc=$Kc;YJc=new eKc}
function rsc(a,b){this.b=a;this.c=b}
function Ewc(){pIb.call(this,(Jwc(),Iwc))}
function tHc(){pIb.call(this,(wHc(),vHc))}
function PIc(){pIb.call(this,(SIc(),RIc))}
function gJc(){pIb.call(this,(jJc(),iJc))}
function zJc(){pIb.call(this,(CJc(),BJc))}
function SJc(){pIb.call(this,(VJc(),UJc))}
function ksc(a){a.A+=1;a.A==3&&QOb(a.w,true)}
function lsc(){R8b.call(this);this.b=0;this.k=0;this.j=1;this.v=1000;this.u=1000;this.D=true}
function jsc(a,b,c,d){var e,f,g;g=new E1b(b);iMb(Fu(cRb(xYb(g).j,sSc),225),c);f=new x7b;e=new K6b(new RVb(a.v,a.u),g);i5b(e.ab,-500);GOb(f,e);EGb(a.H.n,f,a.d,d,true)}
function isc(a,b,c,d,e,f){var g,i;g=new w_b;p_b(g,new s2b(16755285));g.k=true;u_b(g,(pZb(),mZb));i=new U6b(b,g);i.e=c;S6b(i,Nu(600*Lkb()));g5b(i.ab,d,e,f);G2b(i.db,1.5707963267948966);i.T=true;i.V=true;GOb(a.I,i);hqb(a.o,i)}
var MTc='enableDiffuse1',NTc='enableDiffuse2',FTc='h',HTc='heightMap',RTc='heightmap',STc='r',LTc='tDetail',JTc='tDiffuse1',KTc='tDiffuse2',PTc='uRepeatOverlay',GTc='v';$T(1229,1,KMc);_.Db=function gsc(){r8b(this.c,new lsc(this.b))};$T(1230,961,{78:1,186:1,337:1},lsc);_.Wd=function msc(a){ksc(this)};_.Id=function nsc(a){this.v=a.b.$;this.u=a.b.Z;iMb(Fu(cRb(xYb(this.g.c).j,FTc),225),new Ejb(6/this.v));iMb(Fu(cRb(xYb(this.F.c).j,GTc),225),new Ejb(6/this.u))};_.ob=function osc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ut((wxb(),vxb),(Gxb(),Fxb),this);this.c=new GPb(40,sGb(this.H.n),2,4000);this.v=this.H.n.$;this.u=this.H.n.Z;this.d=new tPb(this.v,this.u,-10000,10000);g5b(this.c.ab,-1200,800,1200);i5b(this.d.ab,100);this.t=new x7b;GOb(this.t,this.d);this.e=new Bwb(this.c,this.H.d);f5b(this.e.w,0);this.e.t=1;this.e.B=1.2;ywb(this.e,0.8);this.e.i=true;this.e.f=true;this.e.g=true;wwb(this.e,0.15);w7b(this.I,new m7b(328965,2000,4000));GOb(this.I,new fXb(1118481));this.f=new IXb(16777215,1.15);g5b(this.f.ab,500,2000,0);GOb(this.I,this.f);this.r=new _Xb(16729088,1.5,0);f5b(this.r.ab,0);GOb(this.I,this.r);this.i=new GNb(256,256);YMb(this.i,(dEb(),$Db));WMb(this.i,(UDb(),SDb));TMb(this.i,(oCb(),mCb));UMb(this.i,false);this.p=new GNb(256,256);YMb(this.p,$Db);WMb(this.p,SDb);TMb(this.p,mCb);UMb(this.p,false);n=new zJc;u=n.j;iMb(Fu(u.b[iPc],225),new Ejb(0.05));v4b(Fu(Fu(u.b[bTc],225).e,297),256,256);iMb(Fu(u.b[HTc],225),this.i);s=new GNb(2048,2048);YMb(s,$Db);WMb(s,SDb);TMb(s,mCb);s.s=false;dNb(s,(vFb(),uFb));eNb(s,uFb);c=new kNb('./static/textures/terrain/grasslight-big.jpg',new rsc(this,s));dNb(c,uFb);eNb(c,uFb);d=new kNb('./static/textures/terrain/backgrounddetailed6.jpg',this);dNb(d,uFb);eNb(d,uFb);b=new kNb('./static/textures/terrain/grasslight-big-nm.jpg',this);dNb(b,uFb);eNb(b,uFb);t=new Ewc;this.C=t.j;iMb(Fu(cRb(this.C,XSc),225),this.p);iMb(Fu(cRb(this.C,YSc),225),new Ejb(3.5));iMb(Fu(cRb(this.C,ITc),225),this.i);iMb(Fu(cRb(this.C,JTc),225),c);iMb(Fu(cRb(this.C,KTc),225),d);iMb(Fu(cRb(this.C,ZSc),225),s);iMb(Fu(cRb(this.C,LTc),225),b);iMb(Fu(cRb(this.C,MTc),225),(Fib(),Fib(),Eib));iMb(Fu(cRb(this.C,NTc),225),Eib);iMb(Fu(cRb(this.C,qSc),225),Eib);p2b(Fu(Fu(cRb(this.C,wSc),225).e,293),16777215);p2b(Fu(Fu(cRb(this.C,xSc),225).e,293),16777215);p2b(Fu(Fu(cRb(this.C,vSc),225).e,293),1118481);iMb(Fu(cRb(this.C,aTc),225),new Ejb(30));iMb(Fu(cRb(this.C,OTc),225),new Ejb(375));v4b(Fu(Fu(cRb(this.C,PTc),225).e,297),6,6);this.B=new _sb;xob(this.B,eTc,new kMb((DMb(),pMb),new Ejb(1)));xob(this.B,QTc,new kMb(xMb,new z4b(1.5,1.5)));xob(this.B,NSc,new kMb(xMb,new z4b(0,0)));this.n=new _sb;i=new D1b((Dsc(),Csc));kIb(xYb(i),this.B);i.d=false;i.c=true;xob(this.n,RTc,i);j=new E1b(n);kIb(xYb(j),u);j.d=false;j.c=true;xob(this.n,lSc,j);k=new E1b(t);kIb(xYb(k),this.C);k.d=true;k.c=true;xob(this.n,'terrain',k);o=new RVb(this.v,this.u);p=new E$b;y$b(p,new s2b(0));this.s=new K6b(o,p);i5b(this.s.ab,-500);GOb(this.t,this.s);g=new SVb(6000,6000,64,64);hQb(g);this.w=new K6b(g,k);g5b(this.w.ab,0,-125,0);F2b(this.w.db,-1.5707963267948966);QOb(this.w,false);GOb(this.I,this.w);QGb(this.H.n,this.I.c.d,1);this.H.n.bb=true;this.H.n.cb=true;MGb(this.H.n,false);q=new nHc(this.I,this.c);f=new $Gc(0.6);e=new qHc(new tHc);iMb(Fu(cRb(xYb(e.c).j,CSc),225),new Ejb(0.65));this.g=new qHc(new PIc);this.F=new qHc(new SJc);iMb(Fu(cRb(xYb(this.g.c).j,FTc),225),new Ejb(6/this.v));iMb(Fu(cRb(xYb(this.F.c).j,GTc),225),new Ejb(6/this.u));iMb(Fu(cRb(xYb(this.g.c).j,STc),225),new Ejb(0.5));iMb(Fu(cRb(xYb(this.F.c).j,STc),225),new Ejb(0.5));this.F.b=true;r=new GNb(this.v,this.u);YMb(s,ZDb);WMb(s,SDb);TMb(s,mCb);s.g=false;s.s=false;a=new gHc(this.H.n,r);hqb(a.c,q);hqb(a.c,f);hqb(a.c,e);eHc(a,this.g);eHc(a,this.F);this.o=new rqb;new Mxc('./static/models/animated/parrot.js',new usc(this));new Mxc(ETc,new xsc(this));new Mxc('./static/models/animated/stork.js',new Asc(this));this.q=Bh()};_.pb=function psc(a){var b,c,d,e,f;b=(Bh()-this.q)*0.001;if(this.w.hb){zwb(this.e);this.k=P2b(this.k+0.5*b*this.j,0.4,0.825);f=(this.k-0.4)/0.42499999999999993;e=0.95+f*-0.7;o2b(this.I.c.d,0.1,e,this.k);QGb(this.H.n,this.I.c.d,1);pXb(this.f,0.1+f*1.0499999999999998);ZXb(this.r,0.9+f*0.6);iMb(Fu(cRb(this.C,YSc),225),new Ejb(0.6+f*2.9));if(this.D){this.b=P2b(this.b+-7.5E-4,0,0.05);iMb(Fu(sob(this.B,eTc),225),new Ejb(Fu(Fu(sob(this.B,eTc),225).e,150).b+b*this.b));r4b(Fu(Fu(sob(this.B,NSc),225).e,297),b*0.05);w4b(Fu(Fu(cRb(this.C,TTc),225).e,297),4*Fu(Fu(sob(this.B,NSc),225).e,297).d);kSb(this.s,Fu(sob(this.n,RTc),281));EGb(this.H.n,this.t,this.d,this.i,true);kSb(this.s,Fu(sob(this.n,lSc),281));EGb(this.H.n,this.t,this.d,this.p,true);this.D=false}for(c=0;c<this.o.c;c++){d=Fu(kqb(this.o,c),305);T6b(d,Nu(1000*b));r4b(d.ab,d.e*b);d.ab.d>2000&&w4b(d.ab,-1500-Lkb()*500)}EGb(this.H.n,this.I,this.c,null,false)}this.q=Bh()};_.b=0;_.j=0;_.k=0;_.q=0;_.u=0;_.v=0;_.A=0;_.D=false;$T(1231,1,{},rsc);_.Wd=function ssc(a){ksc(this.b);jsc(this.b,new gJc,a,this.c)};$T(1232,1,{},usc);_.Bf=function vsc(a,b){Hxc((Fu(a,338),Fu(b,241)));isc(this.b,Fu(b,241),500,-3500,500,700);isc(this.b,Fu(b,241),500,-3000-Lkb()*500,500,-200);isc(this.b,Fu(b,241),500,-3000-Lkb()*500,500,200);isc(this.b,Fu(b,241),500,-3000-Lkb()*500,500,1000)};$T(1233,1,{},xsc);_.Bf=function ysc(a,b){Hxc((Fu(a,338),Fu(b,241)));isc(this.b,Fu(b,241),1000,-3000-Lkb()*500,350,40)};$T(1234,1,{},Asc);_.Bf=function Bsc(a,b){Hxc((Fu(a,338),Fu(b,241)));isc(this.b,Fu(b,241),1000,-3000-Lkb()*500,350,340)};var Csc;$T(1235,1,{},Hsc);_.Qd=function Isc(){return Qsc(),Fsc};_.Rd=function Jsc(){return Rsc(),Gsc};var Fsc,Gsc;$T(1236,1,{},Lsc);_.pc=function Msc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};$T(1237,1,{},Osc);_.pc=function Psc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};$T(1325,725,xMc,Ewc);_.Nd=function Fwc(){kIb(this,HMb());kIb(this,IMb());kIb(this,JMb());dIb(this,MTc,new kMb((DMb(),sMb),(Fib(),Fib(),Dib)));dIb(this,NTc,new kMb(sMb,Dib));dIb(this,qSc,new kMb(sMb,Dib));dIb(this,UTc,new kMb(sMb,Dib));dIb(this,JTc,new jMb(vMb));dIb(this,KTc,new jMb(vMb));dIb(this,LTc,new jMb(vMb));dIb(this,XSc,new jMb(vMb));dIb(this,ZSc,new jMb(vMb));dIb(this,ITc,new jMb(vMb));dIb(this,YSc,new kMb(pMb,new Ejb(1)));dIb(this,VTc,new kMb(pMb,new Ejb(0)));dIb(this,OTc,new kMb(pMb,new Ejb(1)));dIb(this,wSc,new kMb(oMb,new s2b(15658734)));dIb(this,xSc,new kMb(oMb,new s2b(1118481)));dIb(this,vSc,new kMb(oMb,new s2b(328965)));dIb(this,aTc,new kMb(pMb,new Ejb(30)));dIb(this,CSc,new kMb(pMb,new Ejb(1)));dIb(this,'uRepeatBase',new kMb(xMb,new z4b(1,1)));dIb(this,PTc,new kMb(xMb,new z4b(1,1)));dIb(this,TTc,new kMb(xMb,new z4b(0,0)))};_.Od=function Gwc(a){var b,c;c=new Pqb(vu(XR,eLc,1,[DSc,ESc]));b=new Pqb(vu(XR,eLc,1,[GSc,HSc,ISc]));mIb(this,uIb(a,vu($R,eLc,173,[c,b])))};_.Pd=function Hwc(a){var b,c;c=new Pqb(vu(XR,eLc,1,[JSc]));b=new Pqb(vu(XR,eLc,1,[KSc]));nIb(this,uIb(a,vu($R,eLc,173,[c,b])))};var Iwc;$T(1326,1,{},Nwc);_.Qd=function Owc(){return Wwc(),Lwc};_.Rd=function Pwc(){return Xwc(),Mwc};var Lwc,Mwc;$T(1327,1,{},Rwc);_.pc=function Swc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};$T(1328,1,{},Uwc);_.pc=function Vwc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};$T(1420,725,xMc,tHc);_.Nd=function uHc(){dIb(this,sSc,new jMb((DMb(),vMb)));dIb(this,CSc,new kMb(pMb,new Ejb(1)))};var vHc;$T(1421,1,{},AHc);_.Qd=function BHc(){return JHc(),yHc};_.Rd=function CHc(){return KHc(),zHc};var yHc,zHc;$T(1422,1,{},EHc);_.pc=function FHc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};$T(1423,1,{},HHc);_.pc=function IHc(){return mTc};$T(1444,725,xMc,PIc);_.Nd=function QIc(){dIb(this,sSc,new jMb((DMb(),vMb)));dIb(this,FTc,new kMb(pMb,new Ejb(0.001953125)));dIb(this,STc,new kMb(pMb,new Ejb(0.35)))};var RIc;$T(1445,1,{},WIc);_.Qd=function XIc(){return dJc(),UIc};_.Rd=function YIc(){return eJc(),VIc};var UIc,VIc;$T(1446,1,{},$Ic);_.pc=function _Ic(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};$T(1447,1,{},bJc);_.pc=function cJc(){return mTc};$T(1450,725,xMc,gJc);_.Nd=function hJc(){dIb(this,sSc,new jMb((DMb(),vMb)))};var iJc;$T(1451,1,{},nJc);_.Qd=function oJc(){return wJc(),lJc};_.Rd=function pJc(){return xJc(),mJc};var lJc,mJc;$T(1452,1,{},rJc);_.pc=function sJc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};$T(1453,1,{},uJc);_.pc=function vJc(){return mTc};$T(1456,725,xMc,zJc);_.Nd=function AJc(){dIb(this,HTc,new jMb((DMb(),vMb)));dIb(this,bTc,new kMb(xMb,new z4b(512,512)));dIb(this,QTc,new kMb(xMb,new z4b(1,1)));dIb(this,iPc,new kMb(pMb,new Ejb(0.05)))};var BJc;$T(1457,1,{},GJc);_.Qd=function HJc(){return PJc(),EJc};_.Rd=function IJc(){return QJc(),FJc};var EJc,FJc;$T(1458,1,{},KJc);_.pc=function LJc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};$T(1459,1,{},NJc);_.pc=function OJc(){return mTc};$T(1462,725,xMc,SJc);_.Nd=function TJc(){dIb(this,sSc,new jMb((DMb(),vMb)));dIb(this,GTc,new kMb(pMb,new Ejb(0.001953125)));dIb(this,STc,new kMb(pMb,new Ejb(0.35)))};var UJc;$T(1463,1,{},ZJc);_.Qd=function $Jc(){return gKc(),XJc};_.Rd=function _Jc(){return hKc(),YJc};var XJc,YJc;$T(1464,1,{},bKc);_.pc=function cKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};$T(1465,1,{},eKc);_.pc=function fKc(){return mTc};var yO=sjb(IRc,'TerrainDynamic$DemoScene',1230),uO=sjb(IRc,'TerrainDynamic$DemoScene$1',1231),vO=sjb(IRc,'TerrainDynamic$DemoScene$2',1232),wO=sjb(IRc,'TerrainDynamic$DemoScene$3',1233),xO=sjb(IRc,'TerrainDynamic$DemoScene$4',1234),_Q=sjb(oTc,WTc,1456),ZO=sjb(yRc,'TerrainShader',1325),DQ=sjb(oTc,'BleachBypassShader',1420),TQ=sjb(oTc,'HorizontalTiltShiftShader',1444),dR=sjb(oTc,'VerticalTiltShiftShader',1462),BO=sjb(IRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1235),zO=sjb(IRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1236),AO=sjb(IRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1237),$Q=sjb(oTc,XTc,1457),YQ=sjb(oTc,YTc,1458),ZQ=sjb(oTc,ZTc,1459),YO=sjb(yRc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1326),WO=sjb(yRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1327),XO=sjb(yRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1328),CQ=sjb(oTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1421),AQ=sjb(oTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1422),BQ=sjb(oTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1423),SQ=sjb(oTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1445),QQ=sjb(oTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1446),RQ=sjb(oTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1447),cR=sjb(oTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1463),aR=sjb(oTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1464),bR=sjb(oTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1465),XQ=sjb(oTc,'LuminosityShader',1450),WQ=sjb(oTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1451),UQ=sjb(oTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1452),VQ=sjb(oTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1453);YMc(Hi)(39);