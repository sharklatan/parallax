function cMb(){}
function gMb(){}
function jMb(){}
function lMb(){lMb=eRc;aMb=new gMb}
function mMb(){mMb=eRc;bMb=new jMb}
function $Lb(){$Lb=eRc;ZLb=new cMb}
function XLb(){mKb.call(this,($Lb(),ZLb))}
function _mc(){obc.call(this);this.d=0;this.e=0}
rV(757,733,DSc,XLb);_.Rd=function YLb(){aKb(this,'mRefractionRatio',new COb((VOb(),HOb),new Ukb(1.02)));aKb(this,'mFresnelBias',new COb(HOb,new Ukb(0.1)));aKb(this,'mFresnelPower',new COb(HOb,new Ukb(2)));aKb(this,'mFresnelScale',new COb(HOb,new Ukb(1)));aKb(this,ZYc,new BOb(NOb))};var ZLb;rV(758,1,{},cMb);_.Ud=function dMb(){return lMb(),aMb};_.Vd=function eMb(){return mMb(),bMb};var aMb,bMb;rV(759,1,{},gMb);_.tc=function hMb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};rV(760,1,{},jMb);_.tc=function kMb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};rV(1140,1,QSc);_.Db=function Zmc(){Qac(this.c,new _mc(this.b))};rV(1141,975,{328:1},_mc);_.ob=function anc(){var a,b,c,d,e,f,g,i,j;this.b=new ZRb(60,pIb(this.H.n),1,100000);H7b(this.b.ab,3200);this.c=new ZRb(60,pIb(this.H.n),1,100000);this.f=new W9b;a=new uYb(100,32,16);j=new KPb('./static/textures/cube/park2/*.jpg');jPb(j,(MDb(),KDb));g=new XLb;AOb(Xu(xTb(g.j,ZYc),227),j);c=new a4b(g);this.g=new Irb;for(b=0;b<500;b++){e=new h9b(a,c);U6b(e.ab,_lb()*10000-5000);V6b(e.ab,_lb()*10000-5000);H7b(e.ab,_lb()*10000-5000);E7b(e.fb,_lb()*3+1);YQb(this.I,e);yrb(this.g,e)}this.I.X=false;i=new OKb;AOb(Xu(xTb(i.j,ZYc),227),j);f=new a4b(i);d_b(f,(R0b(),O0b));d=new h9b(new FXb(100000,100000,100000),f);YQb(this.f,d);JIb(this.H.n,false)};_.pb=function bnc(a){var b,c,d,e;e=1.0E-4*a;P6b(this.b.ab,(this.d-this.b.ab.d)*0.05);Q6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);vRb(this.b,this.I.ab);X4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Xu(Brb(this.g,b),305);U6b(d.ab,5000*Math.cos(e+b));V6b(d.ab,5000*Math.sin(e+b*1.1))}iIb(this.H.n,true);BIb(this.H.n,this.f,this.c,null,false);BIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var kN=Ikb(RXc,'MaterialsCubemapFresnel$DemoScene',1141),NG=Ikb($Yc,'FresnelShader',757),MG=Ikb($Yc,'FresnelShader_Resources_default_InlineClientBundleGenerator',758),KG=Ikb($Yc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',759),LG=Ikb($Yc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',760);cTc(Ii)(21);