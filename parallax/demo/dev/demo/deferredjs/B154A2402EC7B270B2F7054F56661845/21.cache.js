function dMb(){}
function hMb(){}
function kMb(){}
function mMb(){mMb=iRc;bMb=new hMb}
function nMb(){nMb=iRc;cMb=new kMb}
function _Lb(){_Lb=iRc;$Lb=new dMb}
function YLb(){nKb.call(this,(_Lb(),$Lb))}
function dnc(){pbc.call(this);this.d=0;this.e=0}
rV(757,733,ISc,YLb);_.Sd=function ZLb(){bKb(this,'mRefractionRatio',new DOb((WOb(),IOb),new Vkb(1.02)));bKb(this,'mFresnelBias',new DOb(IOb,new Vkb(0.1)));bKb(this,'mFresnelPower',new DOb(IOb,new Vkb(2)));bKb(this,'mFresnelScale',new DOb(IOb,new Vkb(1)));bKb(this,cZc,new COb(OOb))};var $Lb;rV(758,1,{},dMb);_.Vd=function eMb(){return mMb(),bMb};_.Wd=function fMb(){return nMb(),cMb};var bMb,cMb;rV(759,1,{},hMb);_.uc=function iMb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};rV(760,1,{},kMb);_.uc=function lMb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};rV(1141,1,VSc);_.Db=function bnc(){Rac(this.c,new dnc(this.b))};rV(1142,975,{328:1},dnc);_.ob=function enc(){var a,b,c,d,e,f,g,i,j;this.b=new $Rb(60,qIb(this.H.n),1,100000);I7b(this.b.ab,3200);this.c=new $Rb(60,qIb(this.H.n),1,100000);this.f=new X9b;a=new vYb(100,32,16);j=new LPb('./static/textures/cube/park2/*.jpg');kPb(j,(NDb(),LDb));g=new YLb;BOb(Wu(yTb(g.j,cZc),227),j);c=new b4b(g);this.g=new Jrb;for(b=0;b<500;b++){e=new i9b(a,c);V6b(e.ab,amb()*10000-5000);W6b(e.ab,amb()*10000-5000);I7b(e.ab,amb()*10000-5000);F7b(e.fb,amb()*3+1);ZQb(this.I,e);zrb(this.g,e)}this.I.X=false;i=new PKb;BOb(Wu(yTb(i.j,cZc),227),j);f=new b4b(i);e_b(f,(S0b(),P0b));d=new i9b(new GXb(100000,100000,100000),f);ZQb(this.f,d);KIb(this.H.n,false)};_.pb=function fnc(a){var b,c,d,e;e=1.0E-4*a;Q6b(this.b.ab,(this.d-this.b.ab.d)*0.05);R6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);wRb(this.b,this.I.ab);Y4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Wu(Crb(this.g,b),305);V6b(d.ab,5000*Math.cos(e+b));W6b(d.ab,5000*Math.sin(e+b*1.1))}jIb(this.H.n,true);CIb(this.H.n,this.f,this.c,null,false);CIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var kN=Jkb(WXc,'MaterialsCubemapFresnel$DemoScene',1142),MG=Jkb(dZc,'FresnelShader',757),LG=Jkb(dZc,'FresnelShader_Resources_default_InlineClientBundleGenerator',758),JG=Jkb(dZc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',759),KG=Jkb(dZc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',760);hTc(Ii)(21);