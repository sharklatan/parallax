function eLb(){}
function iLb(){}
function lLb(){}
function aLb(){aLb=DLc;_Kb=new eLb}
function nLb(){nLb=DLc;cLb=new iLb}
function oLb(){oLb=DLc;dLb=new lLb}
function ZKb(){oJb.call(this,(aLb(),_Kb))}
function gmc(){Sac.call(this);this.d=0;this.e=0}
UU(756,732,bNc,ZKb);_.Sd=function $Kb(){cJb(this,'mRefractionRatio',new ENb((XNb(),JNb),new xkb(1.02)));cJb(this,'mFresnelBias',new ENb(JNb,new xkb(0.1)));cJb(this,'mFresnelPower',new ENb(JNb,new xkb(2)));cJb(this,'mFresnelScale',new ENb(JNb,new xkb(1)));cJb(this,zTc,new DNb(PNb))};var _Kb;UU(757,1,{},eLb);_.Vd=function fLb(){return nLb(),cLb};_.Wd=function gLb(){return oLb(),dLb};var cLb,dLb;UU(758,1,{},iLb);_.uc=function jLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};UU(759,1,{},lLb);_.uc=function mLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};UU(1147,1,pNc);_.Db=function emc(){sac(this.c,new gmc(this.b))};UU(1148,980,{327:1},gmc);_.ob=function hmc(){var a,b,c,d,e,f,g,i,j;this.b=new bRb(60,rHb(this.H.n),1,100000);w7b(this.b.ab,3200);this.c=new bRb(60,rHb(this.H.n),1,100000);this.f=new x9b;a=new DXb(100,32,16);j=new MOb('./static/textures/cube/park2/*.jpg');lOb(j,(nDb(),lDb));g=new ZKb;CNb(Wu(GSb(g.j,zTc),225),j);c=new Q3b(g);this.g=new mrb;for(b=0;b<500;b++){d=new $Yb(a,c);J6b(d.ab,Elb()*10000-5000);K6b(d.ab,Elb()*10000-5000);w7b(d.ab,Elb()*10000-5000);t7b(d.fb,Elb()*3+1);$Pb(this.I,d);crb(this.g,d)}this.I.X=false;i=new QJb;CNb(Wu(GSb(i.j,zTc),225),j);f=new Q3b(i);T$b(f,(F0b(),C0b));e=new $Yb(new OWb(100000,100000,100000),f);$Pb(this.f,e);LHb(this.H.n,false)};_.pb=function imc(a){var b,c,d,e;e=1.0E-4*a;E6b(this.b.ab,(this.d-this.b.ab.d)*0.05);F6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);xQb(this.b,this.I.ab);M4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Wu(frb(this.g,b),304);J6b(d.ab,5000*Math.cos(e+b));K6b(d.ab,5000*Math.sin(e+b*1.1))}kHb(this.H.n,true);DHb(this.H.n,this.f,this.c,null,false);DHb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var oN=lkb(sSc,'MaterialsCubemapFresnel$DemoScene',1148),KG=lkb(ATc,'FresnelShader',756),JG=lkb(ATc,'FresnelShader_Resources_default_InlineClientBundleGenerator',757),HG=lkb(ATc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',758),IG=lkb(ATc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',759);DNc(Ii)(21);