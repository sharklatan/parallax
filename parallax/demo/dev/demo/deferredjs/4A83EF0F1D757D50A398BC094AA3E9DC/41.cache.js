function Smc(){}
function Wmc(){}
function Zmc(){}
function Iqc(){}
function Mqc(){}
function Pqc(){}
function dzc(){}
function hzc(){}
function kzc(){}
function zAc(){}
function DAc(){}
function GAc(){}
function SAc(){}
function WAc(){}
function ZAc(){}
function jBc(){}
function nBc(){}
function qBc(){}
function CBc(){}
function GBc(){}
function JBc(){}
function OTb(a,b){a.s=b}
function tUb(a,b){a.b=b}
function F2b(a,b){a.g=b}
function Jyc(a,b){_nb(a.b,b)}
function anc(){anc=JCc;Rmc=new Zmc}
function Omc(){Omc=JCc;Nmc=new Smc}
function _mc(){_mc=JCc;Qmc=new Wmc}
function _yc(){_yc=JCc;$yc=new dzc}
function _Ac(){_Ac=JCc;QAc=new WAc}
function vAc(){vAc=JCc;uAc=new zAc}
function IAc(){IAc=JCc;xAc=new DAc}
function JAc(){JAc=JCc;yAc=new GAc}
function OAc(){OAc=JCc;NAc=new SAc}
function aBc(){aBc=JCc;RAc=new ZAc}
function fBc(){fBc=JCc;eBc=new jBc}
function sBc(){sBc=JCc;hBc=new nBc}
function tBc(){tBc=JCc;iBc=new qBc}
function yBc(){yBc=JCc;xBc=new CBc}
function LBc(){LBc=JCc;ABc=new GBc}
function MBc(){MBc=JCc;BBc=new JBc}
function Eqc(){Eqc=JCc;Dqc=new Iqc}
function Rqc(){Rqc=JCc;Gqc=new Mqc}
function Sqc(){Sqc=JCc;Hqc=new Pqc}
function mzc(){mzc=JCc;bzc=new hzc}
function nzc(){nzc=JCc;czc=new kzc}
function Cmc(a,b){this.a=a;this.b=b}
function Fmc(a,b){this.a=a;this.b=b}
function Imc(a,b){this.a=a;this.b=b}
function Lmc(a,b){this.a=a;this.b=b}
function LAc(){lEb.call(this,(OAc(),NAc))}
function sAc(){lEb.call(this,(vAc(),uAc))}
function zqc(){lEb.call(this,(Eqc(),Dqc))}
function Yyc(){lEb.call(this,(_yc(),$yc))}
function cBc(){lEb.call(this,(fBc(),eBc))}
function vBc(){lEb.call(this,(yBc(),xBc))}
function vmc(a){a.w+=1;a.w==3&&WKb(a.v,true)}
function wmc(){o4b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function umc(a,b,c,d){var e,f,g;g=new HZb(b);sIb(nu(CNb(WUb(g).i,xJc),168),c);f=new p3b;e=new x2b(new cSb(a.u,a.t),g);_0b(e.ab,-500);NKb(f,e);WCb(a.G.n,f,a.c,d,true)}
function tmc(a,b,c,d,e,f){var g,i;g=new TXb;NXb(g,new r$b(16755285));g.i=true;RXb(g,(PVb(),MVb));i=new H2b(b,g);i.b=c;F2b(i,vu(600*Eib()));X0b(i.ab,d,e,f);s0b(i.db,1.5707963267948966);i.Q=true;i.S=true;NKb(a.H,i);_nb(a.n,i);l3b(a.H,a.G.n)}
var VKc='enableDiffuse1',WKc='enableDiffuse2',OKc='h',QKc='heightMap',$Kc='heightmap',aLc='r',UKc='tDetail',SKc='tDiffuse1',TKc='tDiffuse2',YKc='uRepeatOverlay',PKc='v';zS(1190,1,hEc);_.Cb=function rmc(){l4b(this.b,new wmc(this.a))};zS(1191,938,{43:1,133:1,275:1},wmc);_.Td=function xmc(a){vmc(this)};_.Id=function ymc(a){this.u=a.a.o;this.t=a.a.n;sIb(nu(CNb(WUb(this.f.b).i,OKc),168),new xhb(6/this.u));sIb(nu(CNb(WUb(this.D.b).i,PKc),168),new xhb(6/this.t))};_.qb=function zmc(){var b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u,v,w;bt((ivb(),hvb),(svb(),rvb),this);this.b=new RLb(40,RCb(this.G.n),2,4000);this.u=this.G.n.o;this.t=this.G.n.n;this.c=new GLb(this.u,this.t,-10000,10000);X0b(this.b.ab,-1200,800,1200);_0b(this.c.ab,100);this.s=new p3b;NKb(this.s,this.c);this.d=new mub(this.b,this.G.b);W0b(this.d.v,0);this.d.s=1;this.d.A=1.2;jub(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;hub(this.d,0.15);o3b(this.H,new b3b(328965,2000,4000));n$b(this.H.b.c,0.102,0.9,0.825);NKb(this.H,new FTb(1118481));this.e=new fUb(16777215,1.15);X0b(this.e.ab,500,2000,0);NKb(this.H,this.e);this.q=new vUb(16729088,1.5,0);W0b(this.q.ab,0);NKb(this.H,this.q);this.g=new QJb(256,256);fJb(this.g,(ZAb(),UAb));dJb(this.g,(OAb(),MAb));bJb(this.g,(Szb(),Qzb));this.o=new QJb(256,256);fJb(this.o,UAb);dJb(this.o,MAb);bJb(this.o,Qzb);p=new cBc;w=p.i;sIb(nu(w.a[CGc],168),new xhb(0.05));q0b(nu(nu(w.a[kKc],168).d,234),256,256);sIb(nu(w.a[QKc],168),this.g);u=new QJb(2048,2048);fJb(u,UAb);dJb(u,MAb);bJb(u,Qzb);lJb(u,(pCb(),oCb));mJb(u,oCb);d=new sJb('./static/textures/terrain/grasslight-big.jpg',new Cmc(this,u));lJb(d,oCb);mJb(d,oCb);e=new sJb('./static/textures/terrain/backgrounddetailed6.jpg',this);lJb(e,oCb);mJb(e,oCb);c=new sJb('./static/textures/terrain/grasslight-big-nm.jpg',this);lJb(c,oCb);mJb(c,oCb);v=new zqc;this.B=v.i;sIb(nu(CNb(this.B,eKc),168),this.o);sIb(nu(CNb(this.B,fKc),168),new xhb(3.5));sIb(nu(CNb(this.B,RKc),168),this.g);sIb(nu(CNb(this.B,SKc),168),d);sIb(nu(CNb(this.B,TKc),168),e);sIb(nu(CNb(this.B,gKc),168),u);sIb(nu(CNb(this.B,UKc),168),c);sIb(nu(CNb(this.B,VKc),168),(Bgb(),Bgb(),Agb));sIb(nu(CNb(this.B,WKc),168),Agb);sIb(nu(CNb(this.B,vJc),168),Agb);o$b(nu(nu(CNb(this.B,BJc),168).d,230),16777215);o$b(nu(nu(CNb(this.B,CJc),168).d,230),16777215);o$b(nu(nu(CNb(this.B,AJc),168).d,230),1118481);sIb(nu(CNb(this.B,jKc),168),new xhb(30));sIb(nu(CNb(this.B,XKc),168),new xhb(375));q0b(nu(nu(CNb(this.B,YKc),168).d,234),6,6);this.A=new Qqb;pmb(this.A,nKc,new uIb((NIb(),zIb),new xhb(1)));pmb(this.A,ZKc,new uIb(HIb,new u0b(1.5,1.5)));pmb(this.A,SJc,new uIb(HIb,new u0b(0,0)));this.k=new Qqb;k=new GZb((Omc(),Nmc));gEb(WUb(k),this.A);k.c=false;k.b=true;pmb(this.k,$Kc,k);n=new HZb(p);gEb(WUb(n),w);n.c=false;n.b=true;pmb(this.k,_Kc,n);o=new HZb(v);gEb(WUb(o),this.B);o.c=true;o.b=true;pmb(this.k,'terrain',o);q=new cSb(this.u,this.t);r=new bXb;YWb(r,new r$b(0));this.r=new x2b(q,r);_0b(this.r.ab,-500);NKb(this.s,this.r);i=new dSb(6000,6000,64,64);sMb(i,Bgb());vMb(i);uMb(i);this.v=new x2b(i,o);X0b(this.v.ab,0,-125,0);r0b(this.v.db,-1.5707963267948966);WKb(this.v,false);NKb(this.H,this.v);bDb(this.G.n,this.H.b.c);this.G.n.T=true;this.G.n.U=true;this.G.n.R=false;s=new Syc(this.H,this.b);g=new Dyc(0.6);f=new Vyc(new Yyc);sIb(nu(CNb(WUb(f.b).i,WJc),168),new xhb(0.65));this.f=new Vyc(new sAc);this.D=new Vyc(new vBc);sIb(nu(CNb(WUb(this.f.b).i,OKc),168),new xhb(6/this.u));sIb(nu(CNb(WUb(this.D.b).i,PKc),168),new xhb(6/this.t));sIb(nu(CNb(WUb(this.f.b).i,aLc),168),new xhb(0.5));sIb(nu(CNb(WUb(this.D.b).i,aLc),168),new xhb(0.5));this.D.a=true;t=new QJb(this.u,this.t);fJb(u,TAb);dJb(u,MAb);bJb(u,Qzb);u.f=false;b=new Lyc(this.G.n,t);_nb(b.b,s);_nb(b.b,g);_nb(b.b,f);Jyc(b,this.f);Jyc(b,this.D);j=new Erc;this.n=new job;try{rrc(j,'./static/models/animated/parrot.js',new Fmc(this,j));rrc(j,NKc,new Imc(this,j));rrc(j,'./static/models/animated/stork.js',new Lmc(this,j))}catch(a){a=ER(a);if(qu(a,46)){CKb();HU(BKb,(Orb(),Mrb),tJc)}else throw DR(a)}l3b(this.H,this.G.n);this.p=nh()};_.rb=function Amc(a){var b,c,d,e,f;b=(nh()-this.p)*0.001;if(this.v.jb){kub(this.d);this.j=z$b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;n$b(this.H.b.c,0.1,e,this.j);bDb(this.G.n,this.H.b.c);OTb(this.e,0.1+f*1.0499999999999998);tUb(this.q,0.9+f*0.6);sIb(nu(CNb(this.B,fKc),168),new xhb(0.6+f*2.9));if(this.C){this.a=z$b(this.a+-7.5E-4,0,0.05);sIb(nu(kmb(this.A,nKc),168),new xhb(nu(nu(kmb(this.A,nKc),168).d,98).a+b*this.a));m0b(nu(nu(kmb(this.A,SJc),168).d,234),b*0.05);r0b(nu(nu(CNb(this.B,bLc),168).d,234),4*nu(nu(kmb(this.A,SJc),168).d,234).c);dTb(this.r,nu(kmb(this.k,$Kc),218));WCb(this.G.n,this.s,this.c,this.g,true);dTb(this.r,nu(kmb(this.k,_Kc),218));WCb(this.G.n,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=nu(cob(this.n,c),243);G2b(d,vu(1000*b));m0b(d.ab,d.b*b);d.ab.c>2000&&r0b(d.ab,-1500-Eib()*500)}WCb(this.G.n,this.H,this.b,null,false)}this.p=nh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;zS(1192,1,{},Cmc);_.Td=function Dmc(a){vmc(this.a);umc(this.a,new LAc,a,this.b)};zS(1193,1,{},Fmc);_.Ef=function Gmc(){var a;a=this.b.a;xrc(this.b);tmc(this.a,a,500,-3500,500,700);tmc(this.a,a,500,-3000-Eib()*500,500,-200);tmc(this.a,a,500,-3000-Eib()*500,500,200);tmc(this.a,a,500,-3000-Eib()*500,500,1000)};zS(1194,1,{},Imc);_.Ef=function Jmc(){var a;a=this.b.a;xrc(this.b);tmc(this.a,a,1000,-3000-Eib()*500,350,40)};zS(1195,1,{},Lmc);_.Ef=function Mmc(){var a;a=this.b.a;xrc(this.b);tmc(this.a,a,1000,-3000-Eib()*500,350,340)};var Nmc;zS(1196,1,{},Smc);_.Od=function Tmc(){return _mc(),Qmc};_.Pd=function Umc(){return anc(),Rmc};var Qmc,Rmc;zS(1197,1,{},Wmc);_.fc=function Xmc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};zS(1198,1,{},Zmc);_.fc=function $mc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};zS(1278,707,XDc,zqc);_.Ld=function Aqc(){gEb(this,RIb());gEb(this,SIb());gEb(this,TIb());_Db(this,VKc,new uIb((NIb(),CIb),(Bgb(),Bgb(),zgb)));_Db(this,WKc,new uIb(CIb,zgb));_Db(this,vJc,new uIb(CIb,zgb));_Db(this,cLc,new uIb(CIb,zgb));_Db(this,SKc,new tIb(FIb));_Db(this,TKc,new tIb(FIb));_Db(this,UKc,new tIb(FIb));_Db(this,eKc,new tIb(FIb));_Db(this,gKc,new tIb(FIb));_Db(this,RKc,new tIb(FIb));_Db(this,fKc,new uIb(zIb,new xhb(1)));_Db(this,dLc,new uIb(zIb,new xhb(0)));_Db(this,XKc,new uIb(zIb,new xhb(1)));_Db(this,BJc,new uIb(yIb,new r$b(15658734)));_Db(this,CJc,new uIb(yIb,new r$b(1118481)));_Db(this,AJc,new uIb(yIb,new r$b(328965)));_Db(this,jKc,new uIb(zIb,new xhb(30)));_Db(this,HJc,new uIb(zIb,new xhb(1)));_Db(this,'uRepeatBase',new uIb(HIb,new u0b(1,1)));_Db(this,YKc,new uIb(HIb,new u0b(1,1)));_Db(this,bLc,new uIb(HIb,new u0b(0,0)))};_.Md=function Bqc(a){var b,c;c=new Job(du(xQ,OCc,1,[IJc,JJc]));b=new Job(du(xQ,OCc,1,[LJc,MJc,NJc]));iEb(this,qEb(a,du(AQ,OCc,120,[c,b])))};_.Nd=function Cqc(a){var b,c;c=new Job(du(xQ,OCc,1,[OJc]));b=new Job(du(xQ,OCc,1,[PJc]));jEb(this,qEb(a,du(AQ,OCc,120,[c,b])))};var Dqc;zS(1279,1,{},Iqc);_.Od=function Jqc(){return Rqc(),Gqc};_.Pd=function Kqc(){return Sqc(),Hqc};var Gqc,Hqc;zS(1280,1,{},Mqc);_.fc=function Nqc(){return 'uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\n\nuniform bool enableDiffuse1;\nuniform bool enableDiffuse2;\nuniform bool enableSpecular;\n\nuniform sampler2D tDiffuse1;\nuniform sampler2D tDiffuse2;\nuniform sampler2D tDetail;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tDisplacement;\n\nuniform float uNormalScale;\n\nuniform vec2 uRepeatOverlay;\nuniform vec2 uRepeatBase;\n\nuniform vec2 uOffset;\n\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\n\n\tvec3 specularTex = vec3( 1.0 );\n\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\n\tvec2 uvBase = uRepeatBase * vUv;\n\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\n\tnormalTex.xy *= uNormalScale;\n\tnormalTex = normalize( normalTex );\n\n\tif( enableDiffuse1 && enableDiffuse2 ) {\n\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\n\n\t\t#ifdef GAMMA_INPUT\n\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\n\n\t\t#endif\n\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\n\n\t } else if( enableDiffuse1 ) {\n\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\n\n\t} else if( enableDiffuse2 ) {\n\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\n\n\t}\n\n\tif( enableSpecular )\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\n\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\n\tvec3 finalNormal = tsb * normalTex;\n\n\tvec3 normal = normalize( finalNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\t// point lights\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointDiffuse = vec3( 0.0 );\n\t\tvec3 pointSpecular = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat pointDistance = lDistance;\n\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\n\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// directional lights\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirDiffuse = vec3( 0.0 );\n\t\tvec3 dirSpecular = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n\n\t\t\tdirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\n\t\t\tdirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\n\t\tvec3 hemiSpecular = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiDiffuse += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\n\n\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\n\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n\n\t\t\themiSpecular += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// all lights contribution summation\n\n\tvec3 totalDiffuse = vec3( 0.0 );\n\tvec3 totalSpecular = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\ttotalDiffuse += dirDiffuse;\n\t\ttotalSpecular += dirSpecular;\n\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\ttotalDiffuse += hemiDiffuse;\n\t\ttotalSpecular += hemiSpecular;\n\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\ttotalDiffuse += pointDiffuse;\n\t\ttotalSpecular += pointSpecular;\n\n\t#endif\n\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n\n[*]\n}'};zS(1281,1,{},Pqc);_.fc=function Qqc(){return 'attribute vec4 tangent;\n\nuniform vec2 uRepeatBase;\n\nuniform sampler2D tNormal;\n\n#ifdef VERTEX_TEXTURES\n\n\tuniform sampler2D tDisplacement;\n\tuniform float uDisplacementScale;\n\tuniform float uDisplacementBias;\n\n#endif\n\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvNormal = normalize( normalMatrix * normal );\n\n\t// tangent and binormal vectors\n\n\tvTangent = normalize( normalMatrix * tangent.xyz );\n\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\n\tvBinormal = normalize( vBinormal );\n\n\t// texture coordinates\n\n\tvUv = uv;\n\n\tvec2 uvBase = uv * uRepeatBase;\n\n\t// displacement mapping\n\n\t#ifdef VERTEX_TEXTURES\n\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\n\t\tvec3 displacedPosition = normal * df + position;\n\n\t\tvec4 mPosition = modelMatrix * vec4( displacedPosition, 1.0 );\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\n\n\t#else\n\n\t\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\n\tvNormal = normalMatrix * normalTex;\n\n\t[*]\n\n}\n'};zS(1345,707,XDc,Yyc);_.Ld=function Zyc(){_Db(this,xJc,new tIb((NIb(),FIb)));_Db(this,WJc,new uIb(zIb,new xhb(1)))};var $yc;zS(1346,1,{},dzc);_.Od=function ezc(){return mzc(),bzc};_.Pd=function fzc(){return nzc(),czc};var bzc,czc;zS(1347,1,{},hzc);_.fc=function izc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};zS(1348,1,{},kzc);_.fc=function lzc(){return vKc};zS(1369,707,XDc,sAc);_.Ld=function tAc(){_Db(this,xJc,new tIb((NIb(),FIb)));_Db(this,OKc,new uIb(zIb,new xhb(0.001953125)));_Db(this,aLc,new uIb(zIb,new xhb(0.35)))};var uAc;zS(1370,1,{},zAc);_.Od=function AAc(){return IAc(),xAc};_.Pd=function BAc(){return JAc(),yAc};var xAc,yAc;zS(1371,1,{},DAc);_.fc=function EAc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};zS(1372,1,{},GAc);_.fc=function HAc(){return vKc};zS(1375,707,XDc,LAc);_.Ld=function MAc(){_Db(this,xJc,new tIb((NIb(),FIb)))};var NAc;zS(1376,1,{},SAc);_.Od=function TAc(){return _Ac(),QAc};_.Pd=function UAc(){return aBc(),RAc};var QAc,RAc;zS(1377,1,{},WAc);_.fc=function XAc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};zS(1378,1,{},ZAc);_.fc=function $Ac(){return vKc};zS(1381,707,XDc,cBc);_.Ld=function dBc(){_Db(this,QKc,new tIb((NIb(),FIb)));_Db(this,kKc,new uIb(HIb,new u0b(512,512)));_Db(this,ZKc,new uIb(HIb,new u0b(1,1)));_Db(this,CGc,new uIb(zIb,new xhb(0.05)))};var eBc;zS(1382,1,{},jBc);_.Od=function kBc(){return sBc(),hBc};_.Pd=function lBc(){return tBc(),iBc};var hBc,iBc;zS(1383,1,{},nBc);_.fc=function oBc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};zS(1384,1,{},qBc);_.fc=function rBc(){return vKc};zS(1387,707,XDc,vBc);_.Ld=function wBc(){_Db(this,xJc,new tIb((NIb(),FIb)));_Db(this,PKc,new uIb(zIb,new xhb(0.001953125)));_Db(this,aLc,new uIb(zIb,new xhb(0.35)))};var xBc;zS(1388,1,{},CBc);_.Od=function DBc(){return LBc(),ABc};_.Pd=function EBc(){return MBc(),BBc};var ABc,BBc;zS(1389,1,{},GBc);_.fc=function HBc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};zS(1390,1,{},JBc);_.fc=function KBc(){return vKc};var wN=lhb(VIc,'TerrainDynamic$DemoScene',1191),sN=lhb(VIc,'TerrainDynamic$DemoScene$1',1192),tN=lhb(VIc,'TerrainDynamic$DemoScene$2',1193),uN=lhb(VIc,'TerrainDynamic$DemoScene$3',1194),vN=lhb(VIc,'TerrainDynamic$DemoScene$4',1195),DP=lhb(xKc,eLc,1381),XN=lhb(LIc,'TerrainShader',1278),fP=lhb(xKc,'BleachBypassShader',1345),vP=lhb(xKc,'HorizontalTiltShiftShader',1369),HP=lhb(xKc,'VerticalTiltShiftShader',1387),zN=lhb(VIc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1196),xN=lhb(VIc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1197),yN=lhb(VIc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1198),CP=lhb(xKc,fLc,1382),AP=lhb(xKc,gLc,1383),BP=lhb(xKc,hLc,1384),WN=lhb(LIc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1279),UN=lhb(LIc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1280),VN=lhb(LIc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1281),eP=lhb(xKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1346),cP=lhb(xKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1347),dP=lhb(xKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1348),uP=lhb(xKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1370),sP=lhb(xKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1371),tP=lhb(xKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1372),GP=lhb(xKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1388),EP=lhb(xKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1389),FP=lhb(xKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1390),zP=lhb(xKc,'LuminosityShader',1375),yP=lhb(xKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1376),wP=lhb(xKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1377),xP=lhb(xKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1378);uEc(ti)(41);