function jnc(){}
function nnc(){}
function qnc(){}
function nqc(){}
function rqc(){}
function uqc(){}
function jqc(){jqc=JCc;iqc=new nqc}
function wqc(){wqc=JCc;lqc=new rqc}
function xqc(){xqc=JCc;mqc=new uqc}
function fnc(){fnc=JCc;enc=new jnc}
function snc(){snc=JCc;hnc=new nnc}
function tnc(){tnc=JCc;inc=new qnc}
function cnc(){lEb.call(this,(fnc(),enc))}
function eqc(){lEb.call(this,(jqc(),iqc))}
function tec(){o4b.call(this);this.d=0;this.e=0}
function xec(a,b){this.a=a;this.b=b}
function sec(a,b){var c,d,e,f,g,i;d=new rJb(rJc);d.k=4;q0b(d.A,0.998,0.998);q0b(d.w,0.001,0.001);lJb(d,(pCb(),oCb));mJb(d,oCb);bJb(d,(Szb(),Qzb));e=new rJb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');q0b(e.A,0.998,0.998);q0b(e.w,0.001,0.001);lJb(e,oCb);mJb(e,oCb);bJb(e,Qzb);c=new rJb('./static/models/obj/leeperrysmith/Map-COL.jpg');q0b(c.A,0.998,0.998);q0b(c.w,0.001,0.001);lJb(c,oCb);mJb(c,oCb);bJb(c,Qzb);g=new eqc;i=g.i;sIb(nu(i.a[uJc],168),(Bgb(),Bgb(),Agb));sIb(nu(i.a[vJc],168),Agb);sIb(nu(i.a[wJc],168),a.b.e);sIb(nu(i.a[xJc],168),c);sIb(nu(i.a[yJc],168),d);sIb(nu(i.a[zJc],168),e);o$b(nu(nu(i.a[AJc],168).d,230),10526880);o$b(nu(nu(i.a[BJc],168).d,230),10526880);o$b(nu(nu(i.a[CJc],168).d,230),10526880);sIb(nu(i.a[DJc],168),new xhb(0.145));sIb(nu(i.a[EJc],168),new xhb(0.75));sIb(nu(i.a[FJc],168),new xhb(16));L1b(nu(nu(i.a[GJc],168).d,237),0.001,0.001,0.998,0.998);f=new HZb(g);f.c=true;a.c=new x2b(b,f);s0b(a.c.ab,-50);W0b(a.c.fb,100);a.c.Q=true;a.c.S=true;NKb(a.H,a.c)}
var uJc='enableBump',wJc='tBeckmann',DJc='uRoughness',EJc='uSpecularBrightness';zS(1080,1,hEc);_.Cb=function qec(){l4b(this.b,new tec(this.a))};zS(1081,938,{263:1},tec);_.qb=function uec(){var b,c,d,e,f,g,i,j;this.a=new RLb(27,RCb(this.G.n),1,10000);_0b(this.a.ab,1200);NKb(this.H,new FTb(5592405));f=new vUb(16777215,1.5,1000);X0b(f.ab,0,0,600);NKb(this.H,f);i=new GUb(1);X0b(i.ab,0.05,0.05,1);NKb(this.H,i);i.ab.uf(700);i.Q=true;i.t=true;i.H=2048;i.F=2048;i.A=200;i.w=1500;i.c=40;i.u=-0.005;i.C=0.15;b=new fUb(16777215,0.85);X0b(b.ab,1,-0.5,1);n$b(b.K,0.6,0.3,1);NKb(this.H,b);b.ab.uf(500);b.Q=true;b.H=2048;b.F=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.C=0.15;c=new fUb(16777215,0.85);X0b(c.ab,1,-0.5,-1);NKb(this.H,c);new Vyc(new cnc);d=new Vyc(new Izc);d.a=true;j=new QJb(512,512);fJb(j,(ZAb(),TAb));dJb(j,(OAb(),MAb));bJb(j,(Szb(),Qzb));j.f=false;this.b=new Lyc(this.G.n,j);e=new Erc;try{rrc(e,sJc,new xec(this,e))}catch(a){a=ER(a);if(qu(a,46)){CKb();HU(BKb,(Orb(),Mrb),tJc)}else throw DR(a)}cDb(this.G.n,5001561,1);g=new GCb(this.G.n,this.H);g.f=false;this.G.n.R=false;this.G.n.T=true;this.G.n.U=true;this.G.n.W=true};_.rb=function vec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){n0b(this.c.db,0.05*(b-this.c.db.d));m0b(this.c.db,0.05*(c-this.c.db.c))}OCb(this.G.n);WCb(this.G.n,this.H,this.a,null,false)};_.d=0;_.e=0;zS(1082,1,{},xec);_.Ef=function yec(){sec(this.a,this.b.a)};zS(1201,707,XDc,cnc);_.Ld=function dnc(){};var enc;zS(1202,1,{},jnc);_.Od=function knc(){return snc(),hnc};_.Pd=function lnc(){return tnc(),inc};var hnc,inc;zS(1203,1,{},nnc);_.fc=function onc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};zS(1204,1,{},qnc);_.fc=function rnc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};zS(1272,707,XDc,eqc);_.Ld=function fqc(){gEb(this,RIb());gEb(this,SIb());gEb(this,TIb());_Db(this,uJc,new uIb((NIb(),CIb),dib(0)));_Db(this,vJc,new uIb(CIb,dib(0)));_Db(this,xJc,new tIb(FIb));_Db(this,wJc,new tIb(FIb));_Db(this,BJc,new uIb(yIb,new r$b(15658734)));_Db(this,CJc,new uIb(yIb,new r$b(1118481)));_Db(this,AJc,new uIb(yIb,new r$b(328965)));_Db(this,HJc,new uIb(zIb,new xhb(1)));_Db(this,DJc,new uIb(zIb,new xhb(0.15)));_Db(this,EJc,new uIb(zIb,new xhb(0.75)));_Db(this,yJc,new tIb(FIb));_Db(this,FJc,new uIb(zIb,new xhb(1)));_Db(this,zJc,new tIb(FIb));_Db(this,GJc,new uIb(LIb,new P1b(0,0,1,1)));_Db(this,'uWrapRGB',new uIb(JIb,new c1b(0.75,0.375,0.1875)))};_.Md=function gqc(a){var b,c;c=new Job(du(xQ,OCc,1,[IJc,JJc,KJc]));b=new Job(du(xQ,OCc,1,[LJc,MJc,NJc]));iEb(this,qEb(a,du(AQ,OCc,120,[c,b])))};_.Nd=function hqc(a){var b,c;c=new Job(du(xQ,OCc,1,[OJc]));b=new Job(du(xQ,OCc,1,[PJc]));jEb(this,qEb(a,du(AQ,OCc,120,[c,b])))};var iqc;zS(1273,1,{},nqc);_.Od=function oqc(){return wqc(),lqc};_.Pd=function pqc(){return xqc(),mqc};var lqc,mqc;zS(1274,1,{},rqc);_.fc=function sqc(){return '#define USE_BUMPMAP\n#extension GL_OES_standard_derivatives : enable\n\nuniform bool enableBump;\nuniform bool enableSpecular;\n\nuniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uOpacity;\n\nuniform float uRoughness;\nuniform float uSpecularBrightness;\n\nuniform vec3 uWrapRGB;\n\nuniform sampler2D tDiffuse;\nuniform sampler2D tBeckmann;\n\nuniform sampler2D specularMap;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\n// Fresnel term\n\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\n\n\tfloat base = 1.0 - dot( V, H );\n\tfloat exponential = pow( base, 5.0 );\n\n\treturn exponential + F0 * ( 1.0 - exponential );\n\n}\n\n// Kelemen/Szirmay-Kalos specular BRDF\n\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\n\t\t\t\t\t\tfloat m,  \t// Roughness\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\n\t\t\t\t\t\t) {\n\n\tfloat result = 0.0;\n\tfloat ndotl = dot( N, L );\n\n\tif( ndotl > 0.0 ) {\n\n\t\tvec3 h = L + V; // Unnormalized half-way vector\n\t\tvec3 H = normalize( h );\n\n\t\tfloat ndoth = dot( N, H );\n\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\n\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\n\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\n\n\t}\n\n\treturn result;\n\n}\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\n\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\n\tcolDiffuse.rgb *= colDiffuse.rgb;\n\n\tgl_FragColor = gl_FragColor * colDiffuse;\n\n\tvec3 normal = normalize( vNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\tfloat specularStrength;\n\n\tif ( enableSpecular ) {\n\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\t\tspecularStrength = texelSpecular.r;\n\n\t} else {\n\n\t\tspecularStrength = 1.0;\n\n\t}\n\n\t#ifdef USE_BUMPMAP\n\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n\t#endif\n\n\t// point lights\n\n\tvec3 specularTotal = vec3( 0.0 );\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// directional lights\n\t\t\t\t\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirTotal = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// all lights contribution summation\n\n\tvec3 totalLight = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalLight += dirTotal;\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalLight += pointTotal;\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalLight += hemiTotal;\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\n\n[*]\n\n}'};zS(1275,1,{},uqc);_.fc=function vqc(){return 'uniform vec4 offsetRepeat;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvNormal = normalMatrix * normal;\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n[*]\n\n}\n'};var vL=lhb(SIc,'MaterialsBumpmapSkin$DemoScene',1081),uL=lhb(SIc,'MaterialsBumpmapSkin$DemoScene$1',1082),EN=lhb(LIc,'BeckmannShader',1201),DN=lhb(LIc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1202),BN=lhb(LIc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1203),CN=lhb(LIc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1204),TN=lhb(LIc,'SkinSimpleShader',1272),SN=lhb(LIc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1273),QN=lhb(LIc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1274),RN=lhb(LIc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1275);uEc(ti)(19);