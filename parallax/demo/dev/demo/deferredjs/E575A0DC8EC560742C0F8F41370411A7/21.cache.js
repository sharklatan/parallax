function xKb(){}
function BKb(){}
function EKb(){}
function tKb(){tKb=lKc;sKb=new xKb}
function GKb(){GKb=lKc;vKb=new BKb}
function HKb(){HKb=lKc;wKb=new EKb}
function qKb(){HIb.call(this,(tKb(),sKb))}
function clc(){O9b.call(this);this.d=0;this.e=0}
mU(749,725,LLc,qKb);_.Od=function rKb(){vIb(this,'mRefractionRatio',new XMb((oNb(),aNb),new Ujb(1.02)));vIb(this,'mFresnelBias',new XMb(aNb,new Ujb(0.1)));vIb(this,'mFresnelPower',new XMb(aNb,new Ujb(2)));vIb(this,'mFresnelScale',new XMb(aNb,new Ujb(1)));vIb(this,aSc,new WMb(gNb))};var sKb;mU(750,1,{},xKb);_.Rd=function yKb(){return GKb(),vKb};_.Sd=function zKb(){return HKb(),wKb};var vKb,wKb;mU(751,1,{},BKb);_.qc=function CKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};mU(752,1,{},EKb);_.qc=function FKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};mU(1134,1,YLc);_.Db=function alc(){o9b(this.c,new clc(this.b))};mU(1135,967,{327:1},clc);_.ob=function dlc(){var a,b,c,d,e,f,g,i,j;this.b=new uQb(60,KGb(this.H.n),1,100000);e6b(this.b.ab,3200);this.c=new uQb(60,KGb(this.H.n),1,100000);this.f=new t8b;a=new TWb(100,32,16);j=new dOb('./static/textures/cube/park2/*.jpg');ENb(j,(GCb(),ECb));g=new qKb;VMb(Eu(WRb(g.j,aSc),225),j);c=new z2b(g);this.g=new Iqb;for(b=0;b<500;b++){d=new G7b(a,c);r5b(d.ab,_kb()*10000-5000);s5b(d.ab,_kb()*10000-5000);e6b(d.ab,_kb()*10000-5000);b6b(d.fb,_kb()*3+1);rPb(this.I,d);yqb(this.g,d)}this.I.X=false;i=new hJb;VMb(Eu(WRb(i.j,aSc),225),j);f=new z2b(i);CZb(f,(o_b(),l_b));e=new G7b(new cWb(100000,100000,100000),f);rPb(this.f,e);cHb(this.H.n,false)};_.pb=function elc(a){var b,c,d,e;e=1.0E-4*a;m5b(this.b.ab,(this.d-this.b.ab.d)*0.05);n5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);QPb(this.b,this.I.ab);u3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Eu(Bqb(this.g,b),304);r5b(d.ab,5000*Math.cos(e+b));s5b(d.ab,5000*Math.sin(e+b*1.1))}DGb(this.H.n,true);WGb(this.H.n,this.f,this.c,null,false);WGb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var NM=Ijb(VQc,'MaterialsCubemapFresnel$DemoScene',1135),nG=Ijb(bSc,'FresnelShader',749),mG=Ijb(bSc,'FresnelShader_Resources_default_InlineClientBundleGenerator',750),kG=Ijb(bSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',751),lG=Ijb(bSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',752);kMc(Hi)(21);