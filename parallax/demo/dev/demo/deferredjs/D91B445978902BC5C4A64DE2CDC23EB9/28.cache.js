function oHb(){}
function xHb(){}
function uHb(){}
function CHb(){}
function BHb(){}
function GHb(){}
function FHb(){}
function Vlc(){}
function Wlc(){Y7b.call(this)}
function pHb(){tFb.call(this,(tHb(),sHb))}
function tHb(){tHb=xLc;sHb=new xHb}
function JHb(){JHb=xLc;vHb=new CHb}
function KHb(){KHb=xLc;wHb=new GHb}
_=pHb.prototype=oHb.prototype=new fFb;_.gC=function qHb(){return TA};_.Jd=function rHb(){iFb(this,'mRefractionRatio',new rKb((LKb(),xKb),new Ofb(1.02)));iFb(this,'mFresnelBias',new rKb(xKb,new Ofb(0.1)));iFb(this,'mFresnelPower',new rKb(xKb,new Ofb(2)));iFb(this,'mFresnelScale',new rKb(xKb,new Ofb(1)));iFb(this,wQc,new qKb(DKb))};_.cM={164:1};var sHb;_=xHb.prototype=uHb.prototype=new Jb;_.gC=function yHb(){return SA};_.Md=function zHb(){return JHb(),vHb};_.Nd=function AHb(){return KHb(),wHb};var vHb=null,wHb=null;_=CHb.prototype=BHb.prototype=new Jb;_.gC=function DHb(){return QA};_.Yb=function EHb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};_=GHb.prototype=FHb.prototype=new Jb;_.gC=function HHb(){return RA};_.Yb=function IHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};_=Qlc.prototype;_.vb=function Ulc(){U7b(this.b,new Wlc(this.a))};_=Wlc.prototype=Vlc.prototype=new X7b;_.gC=function Xlc(){return VG};_.mb=function Ylc(){var a,b,c,d,e,f,g,i;this.a=new YNb(60,TDb(this.C.n),1,100000);this.a.W.b=3200;this.b=new YNb(60,TDb(this.C.n),1,100000);this.e=new O6b;a=new UYb(100,32,16);i=new BLb('./static/textures/cube/park2/*.jpg');aLb(i,(HAb(),FAb));f=new pHb;pKb($q(f.i.a[wQc],166),i);c=new c5b(f);this.f=new fnb;for(b=0;b<500;++b){d=new Q5b(a,c);lTb(d.W,Math.random()*10000-5000);mTb(d.W,Math.random()*10000-5000);RTb(d.W,Math.random()*10000-5000);PTb(d._,Math.random()*3+1);ZMb(this.D,d);Vmb(this.f,d)}this.D.R=false;g=new _Fb;pKb($q(g.i.a[wQc],166),i);e=new c5b(g);o0b(e,(h2b(),e2b));d=new Q5b(new cYb(100000,100000,100000),e);ZMb(this.e,d);this.C.n.N=false};_.nb=function Zlc(a){var b,c,d,e;e=1.0E-4*a;fTb(this.a.W,(this.c-this.a.W.c)*0.05);gTb(this.a.W,(-this.d-this.a.W.d)*0.05);yNb(this.a,this.D.W);this.b.Z.ye(this.a.Z);for(b=0,c=this.f.b;b<c;++b){d=$q(Zmb(this.f,b),240);lTb(d.W,5000*Math.cos(e+b));mTb(d.W,5000*Math.sin(e+b*1.1))}QDb(this.C.n);YDb(this.C.n,this.e,this.b,null,false);YDb(this.C.n,this.D,this.a,null,false)};_.cM={265:1};_.a=null;_.b=null;_.c=0;_.d=0;_.e=null;_.f=null;var TA=Dfb(tQc,'FresnelShader',oB),SA=Dfb(tQc,'FresnelShader_Resources_default_InlineClientBundleGenerator',Xx),QA=Dfb(tQc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',Xx),RA=Dfb(tQc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',Xx),VG=Dfb(pPc,'MaterialsCubemapFresnel$DemoScene',fE);OLc(Wd)(28);