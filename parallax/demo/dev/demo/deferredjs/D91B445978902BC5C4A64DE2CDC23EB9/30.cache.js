function Umc(){}
function Kwc(){}
function Twc(){}
function Qwc(){}
function Ywc(){}
function Xwc(){}
function _wc(){}
function axc(){}
function CGc(){}
function mIc(){}
function vIc(){}
function sIc(){}
function AIc(){}
function zIc(){}
function EIc(){}
function DIc(){}
function Vmc(){Y7b.call(this)}
function Lwc(){tFb.call(this,(Pwc(),Owc))}
function nIc(){tFb.call(this,(rIc(),qIc))}
function rIc(){rIc=xLc;qIc=new vIc}
function HIc(){HIc=xLc;tIc=new AIc}
function IIc(){IIc=xLc;uIc=new EIc}
function Pwc(){Pwc=xLc;Owc=new Twc}
function dxc(){dxc=xLc;Rwc=new Ywc}
function exc(){exc=xLc;Swc=new axc}
function DGc(){this.b=new c5b(new nIc);pKb($q(d0b(this.b).i.a[KQc],166),(Qeb(),Qeb(),Oeb));pKb($q(d0b(this.b).i.a[LQc],166),new Ofb(0.35));pKb($q(d0b(this.b).i.a[MQc],166),new Ofb(0.95));pKb($q(d0b(this.b).i.a[NQc],166),zgb(2048));this.e=true;this.f=true}
var KQc='grayscale',LQc='nIntensity',NQc='sCount',MQc='sIntensity',DQc='texture1',FQc='texture2';_=Pmc.prototype;_.vb=function Tmc(){U7b(this.b,new Vmc(this.a))};_=Vmc.prototype=Umc.prototype=new X7b;_.gC=function Wmc(){return dH};_.Gd=function Xmc(a){lTb($q($q(this.d.a[CQc],166).d,192),a.a.o);mTb($q($q(this.d.a[CQc],166).d,192),a.a.n)};_.mb=function Ymc(){var a,b,c,d,e,f,g;zp((Ovb(),Nvb),(Zvb(),Yvb),this);this.a=new YNb(35,TDb(this.C.n),1,3000);this.a.W.b=4;d=new c5b(new Lwc);this.d=d0b(d).i;f=new nLb('./static/textures/lava/cloud.png');kLb(f,(oDb(),nDb));lLb(f,nDb);pKb($q(this.d.a[DQc],166),f);g=new nLb(EQc);kLb(g,nDb);lLb(g,nDb);pKb($q(this.d.a[FQc],166),g);this.b=new Q5b(new cZb(0.65,0.3,30,30),d);this.b.Z.c=0.3;ZMb(this.D,this.b);a=new IGc(this.C.n);e=new SGc(this.D,this.a);b=new zGc(1.25);c=new DGc;c.a=true;Vmb(a.b,e);Vmb(a.b,b);Vmb(a.b,c);this.C.n.N=false;this.c=Uc()};_.nb=function Zmc(a){var b;b=(Uc()-this.c)*0.001*5;pKb($q(this.d.a[GQc],166),new Ofb($q($q(this.d.a[GQc],166).d,95).a+0.2*b));fTb(this.b.Z,0.05*b);gTb(this.b.Z,0.0125*b);QDb(this.C.n);this.c=Uc();YDb(this.C.n,this.D,this.a,null,false)};_.cM={38:1,131:1};_.a=null;_.b=null;_.c=0;_.d=null;_=Lwc.prototype=Kwc.prototype=new fFb;_.gC=function Mwc(){return JI};_.Jd=function Nwc(){iFb(this,HQc,new rKb((LKb(),xKb),new Ofb(0.45)));iFb(this,IQc,new rKb(HKb,new UTb(0,0,0)));iFb(this,GQc,new rKb(xKb,new Ofb(1)));iFb(this,CQc,new rKb(FKb,new nTb));iFb(this,JQc,new rKb(FKb,new oTb(3,1)));iFb(this,DQc,new qKb(DKb));iFb(this,FQc,new qKb(DKb))};_.cM={164:1};var Owc;_=Twc.prototype=Qwc.prototype=new Jb;_.gC=function Uwc(){return II};_.Md=function Vwc(){return dxc(),Rwc};_.Nd=function Wwc(){return exc(),Swc};var Rwc=null,Swc=null;_=Ywc.prototype=Xwc.prototype=new Jb;_.gC=function Zwc(){return GI};_.Yb=function $wc(){return 'uniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform float fogDensity;\r\nuniform vec3 fogColor;\r\n\r\nuniform sampler2D texture1;\r\nuniform sampler2D texture2;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main( void ) {\r\n\r\n\tvec2 position = -1.0 + 2.0 * vUv;\r\n\r\n\tvec4 noise = texture2D( texture1, vUv );\r\n\tvec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;\r\n\tvec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;\r\n\r\n\tT1.x += noise.x * 2.0;\r\n\tT1.y += noise.y * 2.0;\r\n\tT2.x -= noise.y * 0.2;\r\n\tT2.y += noise.z * 0.2;\r\n\r\n\tfloat p = texture2D( texture1, T1 * 2.0 ).a;\r\n\r\n\tvec4 color = texture2D( texture2, T2 * 2.0 );\r\n\tvec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );\r\n\r\n\tif( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }\r\n\tif( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }\r\n\tif( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }\r\n\r\n\tgl_FragColor = temp;\r\n\r\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\tconst float LOG2 = 1.442695;\r\n\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\r\n\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\r\n\r\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\r\n\r\n}\r\n'};_=axc.prototype=_wc.prototype=new Jb;_.gC=function bxc(){return HI};_.Yb=function cxc(){return 'uniform vec2 uvScale;\r\nvarying vec2 vUv;\r\n\r\nvoid main()\r\n{\r\n\r\n\tvUv = uvScale * uv;\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}'};_=DGc.prototype=CGc.prototype=new uGc;_.gC=function EGc(){return RJ};_.Hg=function FGc(a,b,c){pKb($q(d0b(this.b).i.a[WPc],166),a.d);pKb($q(d0b(this.b).i.a[GQc],166),new Ofb($q($q(d0b(this.b).i.a[GQc],166).d,95).a+b));XZb(a.c,this.b);this.a?YDb(a.n,a.o,a.a,null,false):YDb(a.n,a.o,a.a,a.g,false)};_.cM={283:1};_.a=false;_.b=null;_=nIc.prototype=mIc.prototype=new fFb;_.gC=function oIc(){return kK};_.Jd=function pIc(){iFb(this,WPc,new qKb((LKb(),DKb)));iFb(this,GQc,new rKb(xKb,new Ofb(0)));iFb(this,LQc,new rKb(xKb,new Ofb(0.5)));iFb(this,MQc,new rKb(xKb,new Ofb(0.05)));iFb(this,NQc,new rKb(AKb,zgb(4096)));iFb(this,KQc,new rKb(AKb,(Qeb(),Qeb(),Peb)))};_.cM={164:1};var qIc;_=vIc.prototype=sIc.prototype=new Jb;_.gC=function wIc(){return jK};_.Md=function xIc(){return HIc(),tIc};_.Nd=function yIc(){return IIc(),uIc};var tIc=null,uIc=null;_=AIc.prototype=zIc.prototype=new Jb;_.gC=function BIc(){return hK};_.Yb=function CIc(){return '// control parameter\r\nuniform float time;\r\n\r\nuniform bool grayscale;\r\n\r\n// noise effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float nIntensity;\r\n\r\n// scanlines effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float sIntensity;\r\n\r\n// scanlines effect count value (0 = no effect, 4096 = full effect)\r\nuniform float sCount;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\t// sample the source\r\n\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\r\n\r\n\t// make some noise\r\n\tfloat x = vUv.x * vUv.y * time *  1000.0;\r\n\tx = mod( x, 13.0 ) * mod( x, 123.0 );\r\n\tfloat dx = mod( x, 0.01 );\r\n\r\n\t// add noise\r\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\r\n\r\n\t// get us a sine and cosine\r\n\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\r\n\r\n\t// add scanlines\r\n\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\r\n\r\n\t// interpolate between source and result by intensity\r\n\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\r\n\r\n\t// convert to grayscale if desired\r\n\tif( grayscale ) {\r\n\r\n\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\r\n\r\n\t}\r\n\r\n\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\r\n\r\n}\r\n'};_=EIc.prototype=DIc.prototype=new Jb;_.gC=function FIc(){return iK};_.Yb=function GIc(){return eQc};var dH=Dfb(pPc,'MaterialsShaderLava$DemoScene',fE),JI=Dfb(sPc,'LavaShader',oB),II=Dfb(sPc,'LavaShader_Resources_default_InlineClientBundleGenerator',Xx),GI=Dfb(sPc,'LavaShader_Resources_default_InlineClientBundleGenerator$1',Xx),HI=Dfb(sPc,'LavaShader_Resources_default_InlineClientBundleGenerator$2',Xx),RJ=Dfb(OQc,'FilmPass',SJ),kK=Dfb(PQc,'FilmShader',oB),jK=Dfb(PQc,'FilmShader_Resources_default_InlineClientBundleGenerator',Xx),hK=Dfb(PQc,'FilmShader_Resources_default_InlineClientBundleGenerator$1',Xx),iK=Dfb(PQc,'FilmShader_Resources_default_InlineClientBundleGenerator$2',Xx);OLc(Wd)(30);