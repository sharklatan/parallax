function xnc(){}
function Bnc(){}
function Enc(){}
function Bqc(){}
function Fqc(){}
function Iqc(){}
function xqc(){xqc=XCc;wqc=new Bqc}
function Kqc(){Kqc=XCc;zqc=new Fqc}
function Lqc(){Lqc=XCc;Aqc=new Iqc}
function tnc(){tnc=XCc;snc=new xnc}
function Gnc(){Gnc=XCc;vnc=new Bnc}
function Hnc(){Hnc=XCc;wnc=new Enc}
function qnc(){zEb.call(this,(tnc(),snc))}
function sqc(){zEb.call(this,(xqc(),wqc))}
function Hec(){C4b.call(this);this.d=0;this.e=0}
function Lec(a,b){this.a=a;this.b=b}
function Gec(a,b){var c,d,e,f,g,i;d=new FJb(QJc);d.k=4;E0b(d.A,0.998,0.998);E0b(d.w,0.001,0.001);zJb(d,(DCb(),CCb));AJb(d,CCb);pJb(d,(eAb(),cAb));e=new FJb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');E0b(e.A,0.998,0.998);E0b(e.w,0.001,0.001);zJb(e,CCb);AJb(e,CCb);pJb(e,cAb);c=new FJb('./static/models/obj/leeperrysmith/Map-COL.jpg');E0b(c.A,0.998,0.998);E0b(c.w,0.001,0.001);zJb(c,CCb);AJb(c,CCb);pJb(c,cAb);g=new sqc;i=g.i;GIb(xu(i.a[TJc],168),(Pgb(),Pgb(),Ogb));GIb(xu(i.a[UJc],168),Ogb);GIb(xu(i.a[VJc],168),a.b.e);GIb(xu(i.a[WJc],168),c);GIb(xu(i.a[XJc],168),d);GIb(xu(i.a[YJc],168),e);C$b(xu(xu(i.a[ZJc],168).d,230),10526880);C$b(xu(xu(i.a[$Jc],168).d,230),10526880);C$b(xu(xu(i.a[_Jc],168).d,230),10526880);GIb(xu(i.a[aKc],168),new Lhb(0.145));GIb(xu(i.a[bKc],168),new Lhb(0.75));GIb(xu(i.a[cKc],168),new Lhb(16));Z1b(xu(xu(i.a[dKc],168).d,237),0.001,0.001,0.998,0.998);f=new VZb(g);f.c=true;a.c=new L2b(b,f);G0b(a.c.ab,-50);i1b(a.c.fb,100);a.c.Q=true;a.c.S=true;_Kb(a.H,a.c)}
var TJc='enableBump',VJc='tBeckmann',aKc='uRoughness',bKc='uSpecularBrightness';KS(1079,1,vEc);_.Cb=function Eec(){z4b(this.b,new Hec(this.a))};KS(1080,937,{263:1},Hec);_.qb=function Iec(){var b,c,d,e,f,g,i,j;this.a=new dMb(27,dDb(this.G.n),1,10000);n1b(this.a.ab,1200);_Kb(this.H,new TTb(5592405));f=new JUb(16777215,1.5,1000);j1b(f.ab,0,0,600);_Kb(this.H,f);i=new UUb(1);j1b(i.ab,0.05,0.05,1);_Kb(this.H,i);i.ab.uf(700);i.Q=true;i.t=true;i.H=2048;i.F=2048;i.A=200;i.w=1500;i.c=40;i.u=-0.005;i.C=0.15;b=new tUb(16777215,0.85);j1b(b.ab,1,-0.5,1);B$b(b.K,0.6,0.3,1);_Kb(this.H,b);b.ab.uf(500);b.Q=true;b.H=2048;b.F=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.C=0.15;c=new tUb(16777215,0.85);j1b(c.ab,1,-0.5,-1);_Kb(this.H,c);new hzc(new qnc);d=new hzc(new Wzc);d.a=true;j=new cKb(512,512);tJb(j,(lBb(),fBb));rJb(j,(aBb(),$Ab));pJb(j,(eAb(),cAb));j.f=false;this.b=new Zyc(this.G.n,j);e=new Src;try{Grc(e,RJc,new Lec(this,e))}catch(a){a=PR(a);if(Au(a,46)){QKb();SU(PKb,(asb(),$rb),SJc)}else throw OR(a)}qDb(this.G.n,5001561,1);g=new UCb(this.G.n,this.H);g.f=false;this.G.n.R=false;this.G.n.T=true;this.G.n.U=true;this.G.n.W=true};_.rb=function Jec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){B0b(this.c.db,0.05*(b-this.c.db.d));A0b(this.c.db,0.05*(c-this.c.db.c))}aDb(this.G.n);iDb(this.G.n,this.H,this.a,null,false)};_.d=0;_.e=0;KS(1081,1,{},Lec);_.Ef=function Mec(){Gec(this.a,this.b.a)};KS(1200,706,jEc,qnc);_.Ld=function rnc(){};var snc;KS(1201,1,{},xnc);_.Od=function ync(){return Gnc(),vnc};_.Pd=function znc(){return Hnc(),wnc};var vnc,wnc;KS(1202,1,{},Bnc);_.fc=function Cnc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};KS(1203,1,{},Enc);_.fc=function Fnc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};KS(1271,706,jEc,sqc);_.Ld=function tqc(){uEb(this,dJb());uEb(this,eJb());uEb(this,fJb());nEb(this,TJc,new IIb((_Ib(),QIb),rib(0)));nEb(this,UJc,new IIb(QIb,rib(0)));nEb(this,WJc,new HIb(TIb));nEb(this,VJc,new HIb(TIb));nEb(this,$Jc,new IIb(MIb,new F$b(15658734)));nEb(this,_Jc,new IIb(MIb,new F$b(1118481)));nEb(this,ZJc,new IIb(MIb,new F$b(328965)));nEb(this,eKc,new IIb(NIb,new Lhb(1)));nEb(this,aKc,new IIb(NIb,new Lhb(0.15)));nEb(this,bKc,new IIb(NIb,new Lhb(0.75)));nEb(this,XJc,new HIb(TIb));nEb(this,cKc,new IIb(NIb,new Lhb(1)));nEb(this,YJc,new HIb(TIb));nEb(this,dKc,new IIb(ZIb,new b2b(0,0,1,1)));nEb(this,'uWrapRGB',new IIb(XIb,new q1b(0.75,0.375,0.1875)))};_.Md=function uqc(a){var b,c;c=new Xob(nu(IQ,aDc,1,[fKc,gKc,hKc]));b=new Xob(nu(IQ,aDc,1,[iKc,jKc,kKc]));wEb(this,EEb(a,nu(LQ,aDc,120,[c,b])))};_.Nd=function vqc(a){var b,c;c=new Xob(nu(IQ,aDc,1,[lKc]));b=new Xob(nu(IQ,aDc,1,[mKc]));xEb(this,EEb(a,nu(LQ,aDc,120,[c,b])))};var wqc;KS(1272,1,{},Bqc);_.Od=function Cqc(){return Kqc(),zqc};_.Pd=function Dqc(){return Lqc(),Aqc};var zqc,Aqc;KS(1273,1,{},Fqc);_.fc=function Gqc(){return '#define USE_BUMPMAP\n#extension GL_OES_standard_derivatives : enable\n\nuniform bool enableBump;\nuniform bool enableSpecular;\n\nuniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uOpacity;\n\nuniform float uRoughness;\nuniform float uSpecularBrightness;\n\nuniform vec3 uWrapRGB;\n\nuniform sampler2D tDiffuse;\nuniform sampler2D tBeckmann;\n\nuniform sampler2D specularMap;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\n// Fresnel term\n\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\n\n\tfloat base = 1.0 - dot( V, H );\n\tfloat exponential = pow( base, 5.0 );\n\n\treturn exponential + F0 * ( 1.0 - exponential );\n\n}\n\n// Kelemen/Szirmay-Kalos specular BRDF\n\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\n\t\t\t\t\t\tfloat m,  \t// Roughness\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\n\t\t\t\t\t\t) {\n\n\tfloat result = 0.0;\n\tfloat ndotl = dot( N, L );\n\n\tif( ndotl > 0.0 ) {\n\n\t\tvec3 h = L + V; // Unnormalized half-way vector\n\t\tvec3 H = normalize( h );\n\n\t\tfloat ndoth = dot( N, H );\n\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\n\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\n\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\n\n\t}\n\n\treturn result;\n\n}\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\n\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\n\tcolDiffuse.rgb *= colDiffuse.rgb;\n\n\tgl_FragColor = gl_FragColor * colDiffuse;\n\n\tvec3 normal = normalize( vNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\tfloat specularStrength;\n\n\tif ( enableSpecular ) {\n\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\t\tspecularStrength = texelSpecular.r;\n\n\t} else {\n\n\t\tspecularStrength = 1.0;\n\n\t}\n\n\t#ifdef USE_BUMPMAP\n\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n\t#endif\n\n\t// point lights\n\n\tvec3 specularTotal = vec3( 0.0 );\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// directional lights\n\t\t\t\t\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirTotal = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// all lights contribution summation\n\n\tvec3 totalLight = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalLight += dirTotal;\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalLight += pointTotal;\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalLight += hemiTotal;\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\n\n[*]\n\n}'};KS(1274,1,{},Iqc);_.fc=function Jqc(){return 'uniform vec4 offsetRepeat;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvNormal = normalMatrix * normal;\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n[*]\n\n}\n'};var GL=zhb(pJc,'MaterialsBumpmapSkin$DemoScene',1080),FL=zhb(pJc,'MaterialsBumpmapSkin$DemoScene$1',1081),PN=zhb(iJc,'BeckmannShader',1200),ON=zhb(iJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1201),MN=zhb(iJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1202),NN=zhb(iJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1203),cO=zhb(iJc,'SkinSimpleShader',1271),bO=zhb(iJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1272),_N=zhb(iJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1273),aO=zhb(iJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1274);IEc(ti)(19);