function otc(){}
function stc(){}
function vtc(){}
function xyc(){}
function Byc(){}
function Eyc(){}
function kJc(){}
function oJc(){}
function rJc(){}
function GKc(){}
function KKc(){}
function NKc(){}
function ZKc(){}
function bLc(){}
function eLc(){}
function qLc(){}
function uLc(){}
function xLc(){}
function JLc(){}
function NLc(){}
function QLc(){}
function KYb(a,b){a.b=b}
function F7b(a,b){a.k=b}
function QIc(a,b){pqb(a.b,b)}
function btc(a){this.a=a}
function etc(a){this.a=a}
function htc(a){this.a=a}
function ktc(){ktc=KMc;jtc=new otc}
function xtc(){xtc=KMc;mtc=new stc}
function ytc(){ytc=KMc;ntc=new vtc}
function tyc(){tyc=KMc;syc=new xyc}
function Gyc(){Gyc=KMc;vyc=new Byc}
function Hyc(){Hyc=KMc;wyc=new Eyc}
function gJc(){gJc=KMc;fJc=new kJc}
function tJc(){tJc=KMc;iJc=new oJc}
function uJc(){uJc=KMc;jJc=new rJc}
function CKc(){CKc=KMc;BKc=new GKc}
function PKc(){PKc=KMc;EKc=new KKc}
function QKc(){QKc=KMc;FKc=new NKc}
function VKc(){VKc=KMc;UKc=new ZKc}
function gLc(){gLc=KMc;XKc=new bLc}
function hLc(){hLc=KMc;YKc=new eLc}
function mLc(){mLc=KMc;lLc=new qLc}
function zLc(){zLc=KMc;oLc=new uLc}
function ALc(){ALc=KMc;pLc=new xLc}
function FLc(){FLc=KMc;ELc=new JLc}
function SLc(){SLc=KMc;HLc=new NLc}
function TLc(){TLc=KMc;ILc=new QLc}
function $sc(a,b){this.a=a;this.b=b}
function oyc(){yIb.call(this,(tyc(),syc))}
function dJc(){yIb.call(this,(gJc(),fJc))}
function zKc(){yIb.call(this,(CKc(),BKc))}
function SKc(){yIb.call(this,(VKc(),UKc))}
function jLc(){yIb.call(this,(mLc(),lLc))}
function CLc(){yIb.call(this,(FLc(),ELc))}
function Tsc(a){a.w+=1;a.w==3&&tPb(a.v,true)}
function Usc(){E9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Ssc(a,b,c,d){var e,f,g;g=new q2b(b);MMb(ru(NRb(iZb(g).i,ZTc),225),c);f=new k8b;e=new x7b(new CWb(a.u,a.t),g);X5b(e._,-500);iPb(f,e);NGb(a.G.k,f,a.c,d,true)}
function Rsc(a,b,c,d,e,f){var g,i;g=new i0b;b0b(g,new e3b(16755285));g.j=true;g0b(g,(a$b(),ZZb));i=new H7b(b,g);i.d=c;F7b(i,zu(600*Tkb()));V5b(i._,d,e,f);s3b(i.cb,1.5707963267948966);i.S=true;i.U=true;iPb(a.H,i);pqb(a.n,i)}
var nVc='enableDiffuse1',oVc='enableDiffuse2',gVc='h',iVc='heightMap',tVc='heightmap',sVc='offset',uVc='r',mVc='tDetail',kVc='tDiffuse1',lVc='tDiffuse2',qVc='uRepeatOverlay',hVc='v';aU(1238,1,tOc);_.zb=function Psc(){e9b(this.b,new Usc(this.a))};aU(1239,973,{78:1,186:1,338:1},Usc);_.Ud=function Vsc(a){Tsc(this)};_.Gd=function Wsc(a){this.u=a.a.Z;this.t=a.a.Y;MMb(ru(NRb(iZb(this.f.b).i,gVc),225),new Mjb(6/this.u));MMb(ru(NRb(iZb(this.D.b).i,hVc),225),new Mjb(6/this.t))};_.nb=function Xsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((Fxb(),Exb),(Pxb(),Oxb),this);this.b=new lQb(40,BGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new YPb(this.u,this.t,-10000,10000);V5b(this.b._,-1200,800,1200);X5b(this.c._,100);this.s=new k8b;iPb(this.s,this.c);this.d=new Kwb(this.b,this.G.c);U5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Hwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Fwb(this.d,0.15);i8b(this.H,new $7b(328965,2000,4000));iPb(this.H,new SXb(1118481));this.e=new tYb(16777215,1.15);V5b(this.e._,500,2000,0);iPb(this.H,this.e);this.q=new MYb(16729088,1.5,0);U5b(this.q._,0);iPb(this.H,this.q);this.g=new iOb(256,256);ANb(this.g,(mEb(),hEb));yNb(this.g,(bEb(),_Db));vNb(this.g,(xCb(),vCb));wNb(this.g,false);this.o=new iOb(256,256);ANb(this.o,hEb);yNb(this.o,_Db);vNb(this.o,vCb);wNb(this.o,false);n=new jLc;u=n.i;MMb(ru(u.a[PQc],225),new Mjb(0.05));h5b(ru(ru(u.a[DUc],225).d,297),256,256);MMb(ru(u.a[iVc],225),this.g);s=new iOb(2048,2048);ANb(s,hEb);yNb(s,_Db);vNb(s,vCb);s.r=false;HNb(s,(EFb(),DFb));INb(s,DFb);c=new ONb('./static/textures/terrain/grasslight-big.jpg',new $sc(this,s));HNb(c,DFb);INb(c,DFb);d=new ONb('./static/textures/terrain/backgrounddetailed6.jpg',this);HNb(d,DFb);INb(d,DFb);b=new ONb('./static/textures/terrain/grasslight-big-nm.jpg',this);HNb(b,DFb);INb(b,DFb);t=new oyc;this.B=t.i;MMb(ru(NRb(this.B,xUc),225),this.o);MMb(ru(NRb(this.B,yUc),225),new Mjb(3.5));MMb(ru(NRb(this.B,jVc),225),this.g);MMb(ru(NRb(this.B,kVc),225),c);MMb(ru(NRb(this.B,lVc),225),d);MMb(ru(NRb(this.B,zUc),225),s);MMb(ru(NRb(this.B,mVc),225),b);MMb(ru(NRb(this.B,nVc),225),(Nib(),Nib(),Mib));MMb(ru(NRb(this.B,oVc),225),Mib);MMb(ru(NRb(this.B,XTc),225),Mib);b3b(ru(ru(NRb(this.B,bUc),225).d,293),16777215);b3b(ru(ru(NRb(this.B,cUc),225).d,293),16777215);b3b(ru(ru(NRb(this.B,aUc),225).d,293),1118481);MMb(ru(NRb(this.B,CUc),225),new Mjb(30));MMb(ru(NRb(this.B,pVc),225),new Mjb(375));h5b(ru(ru(NRb(this.B,qVc),225).d,297),6,6);this.A=new htb;Fob(this.A,GUc,new OMb((fNb(),TMb),new Mjb(1)));Fob(this.A,rVc,new OMb(_Mb,new l5b(1.5,1.5)));Fob(this.A,sVc,new OMb(_Mb,new l5b(0,0)));this.k=new htb;i=new p2b((ktc(),jtc));tIb(iZb(i),this.A);i.c=false;i.b=true;Fob(this.k,tVc,i);j=new q2b(n);tIb(iZb(j),u);j.c=false;j.b=true;Fob(this.k,TTc,j);k=new q2b(t);tIb(iZb(k),this.B);k.c=true;k.b=true;Fob(this.k,'terrain',k);o=new CWb(this.u,this.t);p=new p_b;j_b(p,new e3b(0));this.r=new x7b(o,p);X5b(this.r._,-500);iPb(this.s,this.r);g=new DWb(6000,6000,64,64);SQb(g);this.v=new x7b(g,k);V5b(this.v._,0,-125,0);r3b(this.v.cb,-1.5707963267948966);tPb(this.v,false);iPb(this.H,this.v);ZGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;VGb(this.G.k,false);q=new ZIc(this.H,this.b);f=new KIc(0.6);e=new aJc(new dJc);MMb(ru(NRb(iZb(e.b).i,hUc),225),new Mjb(0.65));this.f=new aJc(new zKc);this.D=new aJc(new CLc);MMb(ru(NRb(iZb(this.f.b).i,gVc),225),new Mjb(6/this.u));MMb(ru(NRb(iZb(this.D.b).i,hVc),225),new Mjb(6/this.t));MMb(ru(NRb(iZb(this.f.b).i,uVc),225),new Mjb(0.5));MMb(ru(NRb(iZb(this.D.b).i,uVc),225),new Mjb(0.5));this.D.a=true;r=new iOb(this.u,this.t);ANb(s,gEb);yNb(s,_Db);vNb(s,vCb);s.f=false;s.r=false;a=new SIc(this.G.k,r);pqb(a.b,q);pqb(a.b,f);pqb(a.b,e);QIc(a,this.f);QIc(a,this.D);this.n=new zqb;new wzc('./static/models/animated/parrot.js',new btc(this));new wzc(fVc,new etc(this));new wzc('./static/models/animated/stork.js',new htc(this));this.p=rh()};_.ob=function Ysc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Iwb(this.d);this.j=B3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;a3b(this.H.a.c,0.1,e,this.j);ZGb(this.G.k,this.H.a.c,1);aYb(this.e,0.1+f*1.0499999999999998);KYb(this.q,0.9+f*0.6);MMb(ru(NRb(this.B,yUc),225),new Mjb(0.6+f*2.9));if(this.C){this.a=B3b(this.a+-7.5E-4,0,0.05);MMb(ru(Aob(this.A,GUc),225),new Mjb(ru(ru(Aob(this.A,GUc),225).d,150).a+b*this.a));d5b(ru(ru(Aob(this.A,sVc),225).d,297),b*0.05);i5b(ru(ru(NRb(this.B,vVc),225).d,297),4*ru(ru(Aob(this.A,sVc),225).d,297).c);XSb(this.r,ru(Aob(this.k,tVc),282));NGb(this.G.k,this.s,this.c,this.g,true);XSb(this.r,ru(Aob(this.k,TTc),282));NGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=ru(sqb(this.n,c),305);G7b(d,zu(1000*b));d5b(d._,d.d*b);d._.c>2000&&i5b(d._,-1500-Tkb()*500)}NGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;aU(1240,1,{},$sc);_.Ud=function _sc(a){Tsc(this.a);Ssc(this.a,new SKc,a,this.b)};aU(1241,1,{},btc);_.Bf=function ctc(a,b){rzc((ru(a,339),ru(b,242)));Rsc(this.a,ru(b,242),500,-3500,500,700);Rsc(this.a,ru(b,242),500,-3000-Tkb()*500,500,-200);Rsc(this.a,ru(b,242),500,-3000-Tkb()*500,500,200);Rsc(this.a,ru(b,242),500,-3000-Tkb()*500,500,1000)};aU(1242,1,{},etc);_.Bf=function ftc(a,b){rzc((ru(a,339),ru(b,242)));Rsc(this.a,ru(b,242),1000,-3000-Tkb()*500,350,40)};aU(1243,1,{},htc);_.Bf=function itc(a,b){rzc((ru(a,339),ru(b,242)));Rsc(this.a,ru(b,242),1000,-3000-Tkb()*500,350,340)};var jtc;aU(1244,1,{},otc);_.Od=function ptc(){return xtc(),mtc};_.Pd=function qtc(){return ytc(),ntc};var mtc,ntc;aU(1245,1,{},stc);_.nc=function ttc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};aU(1246,1,{},vtc);_.nc=function wtc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};aU(1352,731,gOc,oyc);_.Ld=function pyc(){tIb(this,jNb());tIb(this,kNb());tIb(this,lNb());mIb(this,nVc,new OMb((fNb(),WMb),(Nib(),Nib(),Lib)));mIb(this,oVc,new OMb(WMb,Lib));mIb(this,XTc,new OMb(WMb,Lib));mIb(this,wVc,new OMb(WMb,Lib));mIb(this,kVc,new NMb(ZMb));mIb(this,lVc,new NMb(ZMb));mIb(this,mVc,new NMb(ZMb));mIb(this,xUc,new NMb(ZMb));mIb(this,zUc,new NMb(ZMb));mIb(this,jVc,new NMb(ZMb));mIb(this,yUc,new OMb(TMb,new Mjb(1)));mIb(this,xVc,new OMb(TMb,new Mjb(0)));mIb(this,pVc,new OMb(TMb,new Mjb(1)));mIb(this,bUc,new OMb(SMb,new e3b(15658734)));mIb(this,cUc,new OMb(SMb,new e3b(1118481)));mIb(this,aUc,new OMb(SMb,new e3b(328965)));mIb(this,CUc,new OMb(TMb,new Mjb(30)));mIb(this,hUc,new OMb(TMb,new Mjb(1)));mIb(this,'uRepeatBase',new OMb(_Mb,new l5b(1,1)));mIb(this,qVc,new OMb(_Mb,new l5b(1,1)));mIb(this,vVc,new OMb(_Mb,new l5b(0,0)))};_.Md=function qyc(a){var b,c;c=new Xqb(hu(ZR,PMc,1,[iUc,jUc]));b=new Xqb(hu(ZR,PMc,1,[lUc,mUc,nUc]));vIb(this,DIb(a,hu(aS,PMc,173,[c,b])))};_.Nd=function ryc(a){var b,c;c=new Xqb(hu(ZR,PMc,1,[oUc]));b=new Xqb(hu(ZR,PMc,1,[pUc]));wIb(this,DIb(a,hu(aS,PMc,173,[c,b])))};var syc;aU(1353,1,{},xyc);_.Od=function yyc(){return Gyc(),vyc};_.Pd=function zyc(){return Hyc(),wyc};var vyc,wyc;aU(1354,1,{},Byc);_.nc=function Cyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};aU(1355,1,{},Eyc);_.nc=function Fyc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};aU(1447,731,gOc,dJc);_.Ld=function eJc(){mIb(this,ZTc,new NMb((fNb(),ZMb)));mIb(this,hUc,new OMb(TMb,new Mjb(1)))};var fJc;aU(1448,1,{},kJc);_.Od=function lJc(){return tJc(),iJc};_.Pd=function mJc(){return uJc(),jJc};var iJc,jJc;aU(1449,1,{},oJc);_.nc=function pJc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};aU(1450,1,{},rJc);_.nc=function sJc(){return OUc};aU(1471,731,gOc,zKc);_.Ld=function AKc(){mIb(this,ZTc,new NMb((fNb(),ZMb)));mIb(this,gVc,new OMb(TMb,new Mjb(0.001953125)));mIb(this,uVc,new OMb(TMb,new Mjb(0.35)))};var BKc;aU(1472,1,{},GKc);_.Od=function HKc(){return PKc(),EKc};_.Pd=function IKc(){return QKc(),FKc};var EKc,FKc;aU(1473,1,{},KKc);_.nc=function LKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};aU(1474,1,{},NKc);_.nc=function OKc(){return OUc};aU(1477,731,gOc,SKc);_.Ld=function TKc(){mIb(this,ZTc,new NMb((fNb(),ZMb)))};var UKc;aU(1478,1,{},ZKc);_.Od=function $Kc(){return gLc(),XKc};_.Pd=function _Kc(){return hLc(),YKc};var XKc,YKc;aU(1479,1,{},bLc);_.nc=function cLc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};aU(1480,1,{},eLc);_.nc=function fLc(){return OUc};aU(1483,731,gOc,jLc);_.Ld=function kLc(){mIb(this,iVc,new NMb((fNb(),ZMb)));mIb(this,DUc,new OMb(_Mb,new l5b(512,512)));mIb(this,rVc,new OMb(_Mb,new l5b(1,1)));mIb(this,PQc,new OMb(TMb,new Mjb(0.05)))};var lLc;aU(1484,1,{},qLc);_.Od=function rLc(){return zLc(),oLc};_.Pd=function sLc(){return ALc(),pLc};var oLc,pLc;aU(1485,1,{},uLc);_.nc=function vLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};aU(1486,1,{},xLc);_.nc=function yLc(){return OUc};aU(1489,731,gOc,CLc);_.Ld=function DLc(){mIb(this,ZTc,new NMb((fNb(),ZMb)));mIb(this,hVc,new OMb(TMb,new Mjb(0.001953125)));mIb(this,uVc,new OMb(TMb,new Mjb(0.35)))};var ELc;aU(1490,1,{},JLc);_.Od=function KLc(){return SLc(),HLc};_.Pd=function LLc(){return TLc(),ILc};var HLc,ILc;aU(1491,1,{},NLc);_.nc=function OLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};aU(1492,1,{},QLc);_.nc=function RLc(){return OUc};var oO=Ajb(oTc,'TerrainDynamic$DemoScene',1239),kO=Ajb(oTc,'TerrainDynamic$DemoScene$1',1240),lO=Ajb(oTc,'TerrainDynamic$DemoScene$2',1241),mO=Ajb(oTc,'TerrainDynamic$DemoScene$3',1242),nO=Ajb(oTc,'TerrainDynamic$DemoScene$4',1243),bR=Ajb(QUc,yVc,1483),_O=Ajb(eTc,'TerrainShader',1352),FQ=Ajb(QUc,'BleachBypassShader',1447),VQ=Ajb(QUc,'HorizontalTiltShiftShader',1471),fR=Ajb(QUc,'VerticalTiltShiftShader',1489),rO=Ajb(oTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1244),pO=Ajb(oTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1245),qO=Ajb(oTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1246),aR=Ajb(QUc,zVc,1484),$Q=Ajb(QUc,AVc,1485),_Q=Ajb(QUc,BVc,1486),$O=Ajb(eTc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1353),YO=Ajb(eTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1354),ZO=Ajb(eTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1355),EQ=Ajb(QUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1448),CQ=Ajb(QUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1449),DQ=Ajb(QUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1450),UQ=Ajb(QUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1472),SQ=Ajb(QUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1473),TQ=Ajb(QUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1474),eR=Ajb(QUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1490),cR=Ajb(QUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1491),dR=Ajb(QUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1492),ZQ=Ajb(QUc,'LuminosityShader',1477),YQ=Ajb(QUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1478),WQ=Ajb(QUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1479),XQ=Ajb(QUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1480);HOc(xi)(38);