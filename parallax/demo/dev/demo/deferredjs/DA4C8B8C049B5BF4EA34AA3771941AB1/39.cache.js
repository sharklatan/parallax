function Asc(){}
function Esc(){}
function Hsc(){}
function Gwc(){}
function Kwc(){}
function Nwc(){}
function tHc(){}
function xHc(){}
function AHc(){}
function PIc(){}
function TIc(){}
function WIc(){}
function WJc(){}
function gJc(){}
function kJc(){}
function nJc(){}
function zJc(){}
function DJc(){}
function GJc(){}
function SJc(){}
function ZJc(){}
function SXb(a,b){a.b=b}
function L6b(a,b){a.k=b}
function ZGc(a,b){aqb(a.b,b)}
function nsc(a){this.a=a}
function qsc(a){this.a=a}
function tsc(a){this.a=a}
function wsc(){wsc=TKc;vsc=new Asc}
function Jsc(){Jsc=TKc;ysc=new Esc}
function Ksc(){Ksc=TKc;zsc=new Hsc}
function Cwc(){Cwc=TKc;Bwc=new Gwc}
function Pwc(){Pwc=TKc;Ewc=new Kwc}
function Qwc(){Qwc=TKc;Fwc=new Nwc}
function pHc(){pHc=TKc;oHc=new tHc}
function CHc(){CHc=TKc;rHc=new xHc}
function DHc(){DHc=TKc;sHc=new AHc}
function LIc(){LIc=TKc;KIc=new PIc}
function YIc(){YIc=TKc;NIc=new TIc}
function ZIc(){ZIc=TKc;OIc=new WIc}
function _Jc(){_Jc=TKc;QJc=new WJc}
function cJc(){cJc=TKc;bJc=new gJc}
function pJc(){pJc=TKc;eJc=new kJc}
function qJc(){qJc=TKc;fJc=new nJc}
function vJc(){vJc=TKc;uJc=new zJc}
function IJc(){IJc=TKc;xJc=new DJc}
function JJc(){JJc=TKc;yJc=new GJc}
function OJc(){OJc=TKc;NJc=new SJc}
function aKc(){aKc=TKc;RJc=new ZJc}
function ksc(a,b){this.a=a;this.b=b}
function xwc(){iIb.call(this,(Cwc(),Bwc))}
function mHc(){iIb.call(this,(pHc(),oHc))}
function IIc(){iIb.call(this,(LIc(),KIc))}
function _Ic(){iIb.call(this,(cJc(),bJc))}
function sJc(){iIb.call(this,(vJc(),uJc))}
function LJc(){iIb.call(this,(OJc(),NJc))}
function dsc(a){a.w+=1;a.w==3&&JOb(a.v,true)}
function esc(){K8b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function csc(a,b,c,d){var e,f,g;g=new x1b(b);bMb(su(XQb(qYb(g).i,gSc),225),c);f=new q7b;e=new D6b(new KVb(a.u,a.t),g);b5b(e._,-500);zOb(f,e);xGb(a.G.k,f,a.c,d,true)}
function bsc(a,b,c,d,e,f){var g,i;g=new p_b;i_b(g,new l2b(16755285));g.j=true;n_b(g,(iZb(),fZb));i=new N6b(b,g);i.d=c;L6b(i,Au(600*Ekb()));_4b(i._,d,e,f);z2b(i.cb,1.5707963267948966);i.S=true;i.U=true;zOb(a.H,i);aqb(a.n,i)}
var ATc='enableDiffuse1',BTc='enableDiffuse2',tTc='h',vTc='heightMap',FTc='heightmap',GTc='r',zTc='tDetail',xTc='tDiffuse1',yTc='tDiffuse2',DTc='uRepeatOverlay',uTc='v';OT(1235,1,BMc);_.zb=function _rc(){k8b(this.b,new esc(this.a))};OT(1236,967,{78:1,186:1,337:1},esc);_.Td=function fsc(a){dsc(this)};_.Fd=function gsc(a){this.u=a.a.Z;this.t=a.a.Y;bMb(su(XQb(qYb(this.f.b).i,tTc),225),new xjb(6/this.u));bMb(su(XQb(qYb(this.D.b).i,uTc),225),new xjb(6/this.t))};_.nb=function hsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;gt((pxb(),oxb),(zxb(),yxb),this);this.b=new zPb(40,lGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new mPb(this.u,this.t,-10000,10000);_4b(this.b._,-1200,800,1200);b5b(this.c._,100);this.s=new q7b;zOb(this.s,this.c);this.d=new uwb(this.b,this.G.c);$4b(this.d.v,0);this.d.s=1;this.d.A=1.2;rwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;pwb(this.d,0.15);p7b(this.H,new f7b(328965,2000,4000));zOb(this.H,new $Wb(1118481));this.e=new BXb(16777215,1.15);_4b(this.e._,500,2000,0);zOb(this.H,this.e);this.q=new UXb(16729088,1.5,0);$4b(this.q._,0);zOb(this.H,this.q);this.g=new zNb(256,256);RMb(this.g,(YDb(),TDb));PMb(this.g,(NDb(),LDb));MMb(this.g,(hCb(),fCb));NMb(this.g,false);this.o=new zNb(256,256);RMb(this.o,TDb);PMb(this.o,LDb);MMb(this.o,fCb);NMb(this.o,false);n=new sJc;u=n.i;bMb(su(u.a[XOc],225),new xjb(0.05));o4b(su(su(u.a[RSc],225).d,297),256,256);bMb(su(u.a[vTc],225),this.g);s=new zNb(2048,2048);RMb(s,TDb);PMb(s,LDb);MMb(s,fCb);s.r=false;YMb(s,(oFb(),nFb));ZMb(s,nFb);c=new dNb('./static/textures/terrain/grasslight-big.jpg',new ksc(this,s));YMb(c,nFb);ZMb(c,nFb);d=new dNb('./static/textures/terrain/backgrounddetailed6.jpg',this);YMb(d,nFb);ZMb(d,nFb);b=new dNb('./static/textures/terrain/grasslight-big-nm.jpg',this);YMb(b,nFb);ZMb(b,nFb);t=new xwc;this.B=t.i;bMb(su(XQb(this.B,LSc),225),this.o);bMb(su(XQb(this.B,MSc),225),new xjb(3.5));bMb(su(XQb(this.B,wTc),225),this.g);bMb(su(XQb(this.B,xTc),225),c);bMb(su(XQb(this.B,yTc),225),d);bMb(su(XQb(this.B,NSc),225),s);bMb(su(XQb(this.B,zTc),225),b);bMb(su(XQb(this.B,ATc),225),(yib(),yib(),xib));bMb(su(XQb(this.B,BTc),225),xib);bMb(su(XQb(this.B,eSc),225),xib);i2b(su(su(XQb(this.B,kSc),225).d,293),16777215);i2b(su(su(XQb(this.B,lSc),225).d,293),16777215);i2b(su(su(XQb(this.B,jSc),225).d,293),1118481);bMb(su(XQb(this.B,QSc),225),new xjb(30));bMb(su(XQb(this.B,CTc),225),new xjb(375));o4b(su(su(XQb(this.B,DTc),225).d,297),6,6);this.A=new Usb;qob(this.A,USc,new dMb((wMb(),iMb),new xjb(1)));qob(this.A,ETc,new dMb(qMb,new s4b(1.5,1.5)));qob(this.A,BSc,new dMb(qMb,new s4b(0,0)));this.k=new Usb;i=new w1b((wsc(),vsc));dIb(qYb(i),this.A);i.c=false;i.b=true;qob(this.k,FTc,i);j=new x1b(n);dIb(qYb(j),u);j.c=false;j.b=true;qob(this.k,_Rc,j);k=new x1b(t);dIb(qYb(k),this.B);k.c=true;k.b=true;qob(this.k,'terrain',k);o=new KVb(this.u,this.t);p=new x$b;r$b(p,new l2b(0));this.r=new D6b(o,p);b5b(this.r._,-500);zOb(this.s,this.r);g=new LVb(6000,6000,64,64);aQb(g);this.v=new D6b(g,k);_4b(this.v._,0,-125,0);y2b(this.v.cb,-1.5707963267948966);JOb(this.v,false);zOb(this.H,this.v);JGb(this.G.k,this.H.b.c,1);this.G.k.ab=true;this.G.k.bb=true;FGb(this.G.k,false);q=new gHc(this.H,this.b);f=new TGc(0.6);e=new jHc(new mHc);bMb(su(XQb(qYb(e.b).i,qSc),225),new xjb(0.65));this.f=new jHc(new IIc);this.D=new jHc(new LJc);bMb(su(XQb(qYb(this.f.b).i,tTc),225),new xjb(6/this.u));bMb(su(XQb(qYb(this.D.b).i,uTc),225),new xjb(6/this.t));bMb(su(XQb(qYb(this.f.b).i,GTc),225),new xjb(0.5));bMb(su(XQb(qYb(this.D.b).i,GTc),225),new xjb(0.5));this.D.a=true;r=new zNb(this.u,this.t);RMb(s,SDb);PMb(s,LDb);MMb(s,fCb);s.f=false;s.r=false;a=new _Gc(this.G.k,r);aqb(a.b,q);aqb(a.b,f);aqb(a.b,e);ZGc(a,this.f);ZGc(a,this.D);this.n=new kqb;new Fxc('./static/models/animated/parrot.js',new nsc(this));new Fxc(sTc,new qsc(this));new Fxc('./static/models/animated/stork.js',new tsc(this));this.p=rh()};_.ob=function isc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){swb(this.d);this.j=I2b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;h2b(this.H.b.c,0.1,e,this.j);JGb(this.G.k,this.H.b.c,1);iXb(this.e,0.1+f*1.0499999999999998);SXb(this.q,0.9+f*0.6);bMb(su(XQb(this.B,MSc),225),new xjb(0.6+f*2.9));if(this.C){this.a=I2b(this.a+-7.5E-4,0,0.05);bMb(su(lob(this.A,USc),225),new xjb(su(su(lob(this.A,USc),225).d,150).a+b*this.a));k4b(su(su(lob(this.A,BSc),225).d,297),b*0.05);p4b(su(su(XQb(this.B,HTc),225).d,297),4*su(su(lob(this.A,BSc),225).d,297).c);dSb(this.r,su(lob(this.k,FTc),281));xGb(this.G.k,this.s,this.c,this.g,true);dSb(this.r,su(lob(this.k,_Rc),281));xGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=su(dqb(this.n,c),305);M6b(d,Au(1000*b));k4b(d._,d.d*b);d._.c>2000&&p4b(d._,-1500-Ekb()*500)}xGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;OT(1237,1,{},ksc);_.Td=function lsc(a){dsc(this.a);csc(this.a,new _Ic,a,this.b)};OT(1238,1,{},nsc);_.yf=function osc(a,b){Axc((su(a,338),su(b,241)));bsc(this.a,su(b,241),500,-3500,500,700);bsc(this.a,su(b,241),500,-3000-Ekb()*500,500,-200);bsc(this.a,su(b,241),500,-3000-Ekb()*500,500,200);bsc(this.a,su(b,241),500,-3000-Ekb()*500,500,1000)};OT(1239,1,{},qsc);_.yf=function rsc(a,b){Axc((su(a,338),su(b,241)));bsc(this.a,su(b,241),1000,-3000-Ekb()*500,350,40)};OT(1240,1,{},tsc);_.yf=function usc(a,b){Axc((su(a,338),su(b,241)));bsc(this.a,su(b,241),1000,-3000-Ekb()*500,350,340)};var vsc;OT(1241,1,{},Asc);_.Nd=function Bsc(){return Jsc(),ysc};_.Od=function Csc(){return Ksc(),zsc};var ysc,zsc;OT(1242,1,{},Esc);_.mc=function Fsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};OT(1243,1,{},Hsc);_.mc=function Isc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};OT(1331,731,oMc,xwc);_.Kd=function ywc(){dIb(this,AMb());dIb(this,BMb());dIb(this,CMb());YHb(this,ATc,new dMb((wMb(),lMb),(yib(),yib(),wib)));YHb(this,BTc,new dMb(lMb,wib));YHb(this,eSc,new dMb(lMb,wib));YHb(this,ITc,new dMb(lMb,wib));YHb(this,xTc,new cMb(oMb));YHb(this,yTc,new cMb(oMb));YHb(this,zTc,new cMb(oMb));YHb(this,LSc,new cMb(oMb));YHb(this,NSc,new cMb(oMb));YHb(this,wTc,new cMb(oMb));YHb(this,MSc,new dMb(iMb,new xjb(1)));YHb(this,JTc,new dMb(iMb,new xjb(0)));YHb(this,CTc,new dMb(iMb,new xjb(1)));YHb(this,kSc,new dMb(hMb,new l2b(15658734)));YHb(this,lSc,new dMb(hMb,new l2b(1118481)));YHb(this,jSc,new dMb(hMb,new l2b(328965)));YHb(this,QSc,new dMb(iMb,new xjb(30)));YHb(this,qSc,new dMb(iMb,new xjb(1)));YHb(this,'uRepeatBase',new dMb(qMb,new s4b(1,1)));YHb(this,DTc,new dMb(qMb,new s4b(1,1)));YHb(this,HTc,new dMb(qMb,new s4b(0,0)))};_.Ld=function zwc(a){var b,c;c=new Iqb(iu(LR,YKc,1,[rSc,sSc]));b=new Iqb(iu(LR,YKc,1,[uSc,vSc,wSc]));fIb(this,nIb(a,iu(OR,YKc,173,[c,b])))};_.Md=function Awc(a){var b,c;c=new Iqb(iu(LR,YKc,1,[xSc]));b=new Iqb(iu(LR,YKc,1,[ySc]));gIb(this,nIb(a,iu(OR,YKc,173,[c,b])))};var Bwc;OT(1332,1,{},Gwc);_.Nd=function Hwc(){return Pwc(),Ewc};_.Od=function Iwc(){return Qwc(),Fwc};var Ewc,Fwc;OT(1333,1,{},Kwc);_.mc=function Lwc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};OT(1334,1,{},Nwc);_.mc=function Owc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};OT(1426,731,oMc,mHc);_.Kd=function nHc(){YHb(this,gSc,new cMb((wMb(),oMb)));YHb(this,qSc,new dMb(iMb,new xjb(1)))};var oHc;OT(1427,1,{},tHc);_.Nd=function uHc(){return CHc(),rHc};_.Od=function vHc(){return DHc(),sHc};var rHc,sHc;OT(1428,1,{},xHc);_.mc=function yHc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};OT(1429,1,{},AHc);_.mc=function BHc(){return aTc};OT(1450,731,oMc,IIc);_.Kd=function JIc(){YHb(this,gSc,new cMb((wMb(),oMb)));YHb(this,tTc,new dMb(iMb,new xjb(0.001953125)));YHb(this,GTc,new dMb(iMb,new xjb(0.35)))};var KIc;OT(1451,1,{},PIc);_.Nd=function QIc(){return YIc(),NIc};_.Od=function RIc(){return ZIc(),OIc};var NIc,OIc;OT(1452,1,{},TIc);_.mc=function UIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};OT(1453,1,{},WIc);_.mc=function XIc(){return aTc};OT(1456,731,oMc,_Ic);_.Kd=function aJc(){YHb(this,gSc,new cMb((wMb(),oMb)))};var bJc;OT(1457,1,{},gJc);_.Nd=function hJc(){return pJc(),eJc};_.Od=function iJc(){return qJc(),fJc};var eJc,fJc;OT(1458,1,{},kJc);_.mc=function lJc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};OT(1459,1,{},nJc);_.mc=function oJc(){return aTc};OT(1462,731,oMc,sJc);_.Kd=function tJc(){YHb(this,vTc,new cMb((wMb(),oMb)));YHb(this,RSc,new dMb(qMb,new s4b(512,512)));YHb(this,ETc,new dMb(qMb,new s4b(1,1)));YHb(this,XOc,new dMb(iMb,new xjb(0.05)))};var uJc;OT(1463,1,{},zJc);_.Nd=function AJc(){return IJc(),xJc};_.Od=function BJc(){return JJc(),yJc};var xJc,yJc;OT(1464,1,{},DJc);_.mc=function EJc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};OT(1465,1,{},GJc);_.mc=function HJc(){return aTc};OT(1468,731,oMc,LJc);_.Kd=function MJc(){YHb(this,gSc,new cMb((wMb(),oMb)));YHb(this,uTc,new dMb(iMb,new xjb(0.001953125)));YHb(this,GTc,new dMb(iMb,new xjb(0.35)))};var NJc;OT(1469,1,{},SJc);_.Nd=function TJc(){return _Jc(),QJc};_.Od=function UJc(){return aKc(),RJc};var QJc,RJc;OT(1470,1,{},WJc);_.mc=function XJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};OT(1471,1,{},ZJc);_.mc=function $Jc(){return aTc};var mO=ljb(wRc,'TerrainDynamic$DemoScene',1236),iO=ljb(wRc,'TerrainDynamic$DemoScene$1',1237),jO=ljb(wRc,'TerrainDynamic$DemoScene$2',1238),kO=ljb(wRc,'TerrainDynamic$DemoScene$3',1239),lO=ljb(wRc,'TerrainDynamic$DemoScene$4',1240),PQ=ljb(cTc,KTc,1462),NO=ljb(mRc,'TerrainShader',1331),rQ=ljb(cTc,'BleachBypassShader',1426),HQ=ljb(cTc,'HorizontalTiltShiftShader',1450),TQ=ljb(cTc,'VerticalTiltShiftShader',1468),pO=ljb(wRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1241),nO=ljb(wRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1242),oO=ljb(wRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1243),OQ=ljb(cTc,LTc,1463),MQ=ljb(cTc,MTc,1464),NQ=ljb(cTc,NTc,1465),MO=ljb(mRc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1332),KO=ljb(mRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1333),LO=ljb(mRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1334),qQ=ljb(cTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1427),oQ=ljb(cTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1428),pQ=ljb(cTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1429),GQ=ljb(cTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1451),EQ=ljb(cTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1452),FQ=ljb(cTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1453),SQ=ljb(cTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1469),QQ=ljb(cTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1470),RQ=ljb(cTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1471),LQ=ljb(cTc,'LuminosityShader',1456),KQ=ljb(cTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1457),IQ=ljb(cTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1458),JQ=ljb(cTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1459);PMc(xi)(39);