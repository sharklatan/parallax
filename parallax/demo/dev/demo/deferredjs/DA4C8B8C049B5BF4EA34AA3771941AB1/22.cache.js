function FJb(){}
function JJb(){}
function MJb(){}
function BJb(){BJb=TKc;AJb=new FJb}
function OJb(){OJb=TKc;DJb=new JJb}
function PJb(){PJb=TKc;EJb=new MJb}
function yJb(){iIb.call(this,(BJb(),AJb))}
function vkc(){K8b.call(this);this.c=0;this.d=0}
OT(749,731,oMc,yJb);_.Kd=function zJb(){YHb(this,'mRefractionRatio',new dMb((wMb(),iMb),new xjb(1.02)));YHb(this,'mFresnelBias',new dMb(iMb,new xjb(0.1)));YHb(this,'mFresnelPower',new dMb(iMb,new xjb(2)));YHb(this,'mFresnelScale',new dMb(iMb,new xjb(1)));YHb(this,FSc,new cMb(oMb))};var AJb;OT(750,1,{},FJb);_.Nd=function GJb(){return OJb(),DJb};_.Od=function HJb(){return PJb(),EJb};var DJb,EJb;OT(751,1,{},JJb);_.mc=function KJb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};OT(752,1,{},MJb);_.mc=function NJb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};OT(1132,1,BMc);_.zb=function tkc(){k8b(this.b,new vkc(this.a))};OT(1133,967,{327:1},vkc);_.nb=function wkc(){var a,b,c,d,e,f,g,i,j;this.a=new zPb(60,lGb(this.G.k),1,100000);b5b(this.a._,3200);this.b=new zPb(60,lGb(this.G.k),1,100000);this.e=new q7b;a=new SVb(100,32,16);j=new lNb('./static/textures/cube/park2/*.jpg');MMb(j,(hCb(),fCb));g=new yJb;bMb(su(XQb(g.i,FSc),225),j);c=new x1b(g);this.f=new kqb;for(b=0;b<500;b++){d=new D6b(a,c);p4b(d._,Ekb()*10000-5000);q4b(d._,Ekb()*10000-5000);b5b(d._,Ekb()*10000-5000);$4b(d.eb,Ekb()*3+1);zOb(this.H,d);aqb(this.f,d)}this.H.W=false;i=new KIb;bMb(su(XQb(i.i,FSc),225),j);f=new x1b(i);BYb(f,(n$b(),k$b));e=new D6b(new bVb(100000,100000,100000),f);zOb(this.e,e);FGb(this.G.k,false)};_.ob=function xkc(a){var b,c,d,e;e=1.0E-4*a;k4b(this.a._,(this.c-this.a._.c)*0.05);l4b(this.a._,(-this.d-this.a._.d)*0.05);XOb(this.a,this.H._);s2b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=su(dqb(this.f,b),304);p4b(d._,5000*Math.cos(e+b));q4b(d._,5000*Math.sin(e+b*1.1))}fGb(this.G.k);xGb(this.G.k,this.e,this.b,null,false);xGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var xM=ljb(tRc,'MaterialsCubemapFresnel$DemoScene',1133),$F=ljb(GSc,'FresnelShader',749),ZF=ljb(GSc,'FresnelShader_Resources_default_InlineClientBundleGenerator',750),XF=ljb(GSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',751),YF=ljb(GSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',752);PMc(xi)(22);