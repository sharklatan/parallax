function qsc(){}
function usc(){}
function xsc(){}
function Lvc(){}
function Pvc(){}
function Svc(){}
function yGc(){}
function CGc(){}
function FGc(){}
function UHc(){}
function YHc(){}
function _Hc(){}
function _Ic(){}
function lIc(){}
function pIc(){}
function sIc(){}
function EIc(){}
function IIc(){}
function LIc(){}
function XIc(){}
function cJc(){}
function DYb(a,b){a.b=b}
function y7b(a,b){a.k=b}
function cGc(a,b){iqb(a.b,b)}
function dsc(a){this.a=a}
function gsc(a){this.a=a}
function jsc(a){this.a=a}
function msc(){msc=YJc;lsc=new qsc}
function zsc(){zsc=YJc;osc=new usc}
function Asc(){Asc=YJc;psc=new xsc}
function Hvc(){Hvc=YJc;Gvc=new Lvc}
function Uvc(){Uvc=YJc;Jvc=new Pvc}
function Vvc(){Vvc=YJc;Kvc=new Svc}
function uGc(){uGc=YJc;tGc=new yGc}
function HGc(){HGc=YJc;wGc=new CGc}
function IGc(){IGc=YJc;xGc=new FGc}
function QHc(){QHc=YJc;PHc=new UHc}
function bIc(){bIc=YJc;SHc=new YHc}
function cIc(){cIc=YJc;THc=new _Hc}
function hIc(){hIc=YJc;gIc=new lIc}
function uIc(){uIc=YJc;jIc=new pIc}
function vIc(){vIc=YJc;kIc=new sIc}
function AIc(){AIc=YJc;zIc=new EIc}
function NIc(){NIc=YJc;CIc=new IIc}
function OIc(){OIc=YJc;DIc=new LIc}
function TIc(){TIc=YJc;SIc=new XIc}
function eJc(){eJc=YJc;VIc=new _Ic}
function fJc(){fJc=YJc;WIc=new cJc}
function asc(a,b){this.a=a;this.b=b}
function Cvc(){rIb.call(this,(Hvc(),Gvc))}
function rGc(){rIb.call(this,(uGc(),tGc))}
function NHc(){rIb.call(this,(QHc(),PHc))}
function eIc(){rIb.call(this,(hIc(),gIc))}
function xIc(){rIb.call(this,(AIc(),zIc))}
function QIc(){rIb.call(this,(TIc(),SIc))}
function Vrc(a){a.w+=1;a.w==3&&mPb(a.v,true)}
function Wrc(){y9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Urc(a,b,c,d){var e,f,g;g=new j2b(b);FMb(qu(GRb(bZb(g).i,jRc),225),c);f=new d8b;e=new q7b(new vWb(a.u,a.t),g);Q5b(e._,-500);bPb(f,e);GGb(a.G.k,f,a.c,d,true)}
function Trc(a,b,c,d,e,f){var g,i;g=new b0b;W_b(g,new Z2b(16755285));g.j=true;__b(g,(VZb(),SZb));i=new A7b(b,g);i.d=c;y7b(i,yu(600*Mkb()));O5b(i._,d,e,f);l3b(i.cb,1.5707963267948966);i.S=true;i.U=true;bPb(a.H,i);iqb(a.n,i)}
var zSc='enableDiffuse1',ASc='enableDiffuse2',sSc='h',uSc='heightMap',FSc='heightmap',ESc='offset',GSc='r',ySc='tDetail',wSc='tDiffuse1',xSc='tDiffuse2',CSc='uRepeatOverlay',tSc='v';ZT(1238,1,HLc);_.zb=function Rrc(){$8b(this.b,new Wrc(this.a))};ZT(1239,972,{78:1,186:1,338:1},Wrc);_.Ud=function Xrc(a){Vrc(this)};_.Gd=function Yrc(a){this.u=a.a.Z;this.t=a.a.Y;FMb(qu(GRb(bZb(this.f.b).i,sSc),225),new Fjb(6/this.u));FMb(qu(GRb(bZb(this.D.b).i,tSc),225),new Fjb(6/this.t))};_.nb=function Zrc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((yxb(),xxb),(Ixb(),Hxb),this);this.b=new eQb(40,uGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new RPb(this.u,this.t,-10000,10000);O5b(this.b._,-1200,800,1200);Q5b(this.c._,100);this.s=new d8b;bPb(this.s,this.c);this.d=new Dwb(this.b,this.G.c);N5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Awb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;ywb(this.d,0.15);b8b(this.H,new T7b(328965,2000,4000));bPb(this.H,new LXb(1118481));this.e=new mYb(16777215,1.15);O5b(this.e._,500,2000,0);bPb(this.H,this.e);this.q=new FYb(16729088,1.5,0);N5b(this.q._,0);bPb(this.H,this.q);this.g=new bOb(256,256);tNb(this.g,(fEb(),aEb));rNb(this.g,(WDb(),UDb));oNb(this.g,(qCb(),oCb));pNb(this.g,false);this.o=new bOb(256,256);tNb(this.o,aEb);rNb(this.o,UDb);oNb(this.o,oCb);pNb(this.o,false);n=new xIc;u=n.i;FMb(qu(u.a[bOc],225),new Fjb(0.05));a5b(qu(qu(u.a[PRc],225).d,297),256,256);FMb(qu(u.a[uSc],225),this.g);s=new bOb(2048,2048);tNb(s,aEb);rNb(s,UDb);oNb(s,oCb);s.r=false;ANb(s,(xFb(),wFb));BNb(s,wFb);c=new HNb('./static/textures/terrain/grasslight-big.jpg',new asc(this,s));ANb(c,wFb);BNb(c,wFb);d=new HNb('./static/textures/terrain/backgrounddetailed6.jpg',this);ANb(d,wFb);BNb(d,wFb);b=new HNb('./static/textures/terrain/grasslight-big-nm.jpg',this);ANb(b,wFb);BNb(b,wFb);t=new Cvc;this.B=t.i;FMb(qu(GRb(this.B,JRc),225),this.o);FMb(qu(GRb(this.B,KRc),225),new Fjb(3.5));FMb(qu(GRb(this.B,vSc),225),this.g);FMb(qu(GRb(this.B,wSc),225),c);FMb(qu(GRb(this.B,xSc),225),d);FMb(qu(GRb(this.B,LRc),225),s);FMb(qu(GRb(this.B,ySc),225),b);FMb(qu(GRb(this.B,zSc),225),(Gib(),Gib(),Fib));FMb(qu(GRb(this.B,ASc),225),Fib);FMb(qu(GRb(this.B,hRc),225),Fib);W2b(qu(qu(GRb(this.B,nRc),225).d,293),16777215);W2b(qu(qu(GRb(this.B,oRc),225).d,293),16777215);W2b(qu(qu(GRb(this.B,mRc),225).d,293),1118481);FMb(qu(GRb(this.B,ORc),225),new Fjb(30));FMb(qu(GRb(this.B,BSc),225),new Fjb(375));a5b(qu(qu(GRb(this.B,CSc),225).d,297),6,6);this.A=new atb;yob(this.A,SRc,new HMb(($Mb(),MMb),new Fjb(1)));yob(this.A,DSc,new HMb(UMb,new e5b(1.5,1.5)));yob(this.A,ESc,new HMb(UMb,new e5b(0,0)));this.k=new atb;i=new i2b((msc(),lsc));mIb(bZb(i),this.A);i.c=false;i.b=true;yob(this.k,FSc,i);j=new j2b(n);mIb(bZb(j),u);j.c=false;j.b=true;yob(this.k,dRc,j);k=new j2b(t);mIb(bZb(k),this.B);k.c=true;k.b=true;yob(this.k,'terrain',k);o=new vWb(this.u,this.t);p=new i_b;c_b(p,new Z2b(0));this.r=new q7b(o,p);Q5b(this.r._,-500);bPb(this.s,this.r);g=new wWb(6000,6000,64,64);LQb(g);this.v=new q7b(g,k);O5b(this.v._,0,-125,0);k3b(this.v.cb,-1.5707963267948966);mPb(this.v,false);bPb(this.H,this.v);SGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;OGb(this.G.k,false);q=new lGc(this.H,this.b);f=new YFc(0.6);e=new oGc(new rGc);FMb(qu(GRb(bZb(e.b).i,tRc),225),new Fjb(0.65));this.f=new oGc(new NHc);this.D=new oGc(new QIc);FMb(qu(GRb(bZb(this.f.b).i,sSc),225),new Fjb(6/this.u));FMb(qu(GRb(bZb(this.D.b).i,tSc),225),new Fjb(6/this.t));FMb(qu(GRb(bZb(this.f.b).i,GSc),225),new Fjb(0.5));FMb(qu(GRb(bZb(this.D.b).i,GSc),225),new Fjb(0.5));this.D.a=true;r=new bOb(this.u,this.t);tNb(s,_Db);rNb(s,UDb);oNb(s,oCb);s.f=false;s.r=false;a=new eGc(this.G.k,r);iqb(a.b,q);iqb(a.b,f);iqb(a.b,e);cGc(a,this.f);cGc(a,this.D);this.n=new sqb;new Kwc('./static/models/animated/parrot.js',new dsc(this));new Kwc(rSc,new gsc(this));new Kwc('./static/models/animated/stork.js',new jsc(this));this.p=rh()};_.ob=function $rc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Bwb(this.d);this.j=u3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;V2b(this.H.a.c,0.1,e,this.j);SGb(this.G.k,this.H.a.c,1);VXb(this.e,0.1+f*1.0499999999999998);DYb(this.q,0.9+f*0.6);FMb(qu(GRb(this.B,KRc),225),new Fjb(0.6+f*2.9));if(this.C){this.a=u3b(this.a+-7.5E-4,0,0.05);FMb(qu(tob(this.A,SRc),225),new Fjb(qu(qu(tob(this.A,SRc),225).d,150).a+b*this.a));Y4b(qu(qu(tob(this.A,ESc),225).d,297),b*0.05);b5b(qu(qu(GRb(this.B,HSc),225).d,297),4*qu(qu(tob(this.A,ESc),225).d,297).c);QSb(this.r,qu(tob(this.k,FSc),282));GGb(this.G.k,this.s,this.c,this.g,true);QSb(this.r,qu(tob(this.k,dRc),282));GGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=qu(lqb(this.n,c),305);z7b(d,yu(1000*b));Y4b(d._,d.d*b);d._.c>2000&&b5b(d._,-1500-Mkb()*500)}GGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;ZT(1240,1,{},asc);_.Ud=function bsc(a){Vrc(this.a);Urc(this.a,new eIc,a,this.b)};ZT(1241,1,{},dsc);_.Af=function esc(a,b){Fwc((qu(a,339),qu(b,242)));Trc(this.a,qu(b,242),500,-3500,500,700);Trc(this.a,qu(b,242),500,-3000-Mkb()*500,500,-200);Trc(this.a,qu(b,242),500,-3000-Mkb()*500,500,200);Trc(this.a,qu(b,242),500,-3000-Mkb()*500,500,1000)};ZT(1242,1,{},gsc);_.Af=function hsc(a,b){Fwc((qu(a,339),qu(b,242)));Trc(this.a,qu(b,242),1000,-3000-Mkb()*500,350,40)};ZT(1243,1,{},jsc);_.Af=function ksc(a,b){Fwc((qu(a,339),qu(b,242)));Trc(this.a,qu(b,242),1000,-3000-Mkb()*500,350,340)};var lsc;ZT(1244,1,{},qsc);_.Od=function rsc(){return zsc(),osc};_.Pd=function ssc(){return Asc(),psc};var osc,psc;ZT(1245,1,{},usc);_.nc=function vsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};ZT(1246,1,{},xsc);_.nc=function ysc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};ZT(1304,730,uLc,Cvc);_.Ld=function Dvc(){mIb(this,cNb());mIb(this,dNb());mIb(this,eNb());fIb(this,zSc,new HMb(($Mb(),PMb),(Gib(),Gib(),Eib)));fIb(this,ASc,new HMb(PMb,Eib));fIb(this,hRc,new HMb(PMb,Eib));fIb(this,ISc,new HMb(PMb,Eib));fIb(this,wSc,new GMb(SMb));fIb(this,xSc,new GMb(SMb));fIb(this,ySc,new GMb(SMb));fIb(this,JRc,new GMb(SMb));fIb(this,LRc,new GMb(SMb));fIb(this,vSc,new GMb(SMb));fIb(this,KRc,new HMb(MMb,new Fjb(1)));fIb(this,JSc,new HMb(MMb,new Fjb(0)));fIb(this,BSc,new HMb(MMb,new Fjb(1)));fIb(this,nRc,new HMb(LMb,new Z2b(15658734)));fIb(this,oRc,new HMb(LMb,new Z2b(1118481)));fIb(this,mRc,new HMb(LMb,new Z2b(328965)));fIb(this,ORc,new HMb(MMb,new Fjb(30)));fIb(this,tRc,new HMb(MMb,new Fjb(1)));fIb(this,'uRepeatBase',new HMb(UMb,new e5b(1,1)));fIb(this,CSc,new HMb(UMb,new e5b(1,1)));fIb(this,HSc,new HMb(UMb,new e5b(0,0)))};_.Md=function Evc(a){var b,c;c=new Qqb(gu(WR,bKc,1,[uRc,vRc]));b=new Qqb(gu(WR,bKc,1,[xRc,yRc,zRc]));oIb(this,wIb(a,gu(ZR,bKc,173,[c,b])))};_.Nd=function Fvc(a){var b,c;c=new Qqb(gu(WR,bKc,1,[ARc]));b=new Qqb(gu(WR,bKc,1,[BRc]));pIb(this,wIb(a,gu(ZR,bKc,173,[c,b])))};var Gvc;ZT(1305,1,{},Lvc);_.Od=function Mvc(){return Uvc(),Jvc};_.Pd=function Nvc(){return Vvc(),Kvc};var Jvc,Kvc;ZT(1306,1,{},Pvc);_.nc=function Qvc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};ZT(1307,1,{},Svc);_.nc=function Tvc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};ZT(1399,730,uLc,rGc);_.Ld=function sGc(){fIb(this,jRc,new GMb(($Mb(),SMb)));fIb(this,tRc,new HMb(MMb,new Fjb(1)))};var tGc;ZT(1400,1,{},yGc);_.Od=function zGc(){return HGc(),wGc};_.Pd=function AGc(){return IGc(),xGc};var wGc,xGc;ZT(1401,1,{},CGc);_.nc=function DGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};ZT(1402,1,{},FGc);_.nc=function GGc(){return $Rc};ZT(1423,730,uLc,NHc);_.Ld=function OHc(){fIb(this,jRc,new GMb(($Mb(),SMb)));fIb(this,sSc,new HMb(MMb,new Fjb(0.001953125)));fIb(this,GSc,new HMb(MMb,new Fjb(0.35)))};var PHc;ZT(1424,1,{},UHc);_.Od=function VHc(){return bIc(),SHc};_.Pd=function WHc(){return cIc(),THc};var SHc,THc;ZT(1425,1,{},YHc);_.nc=function ZHc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};ZT(1426,1,{},_Hc);_.nc=function aIc(){return $Rc};ZT(1429,730,uLc,eIc);_.Ld=function fIc(){fIb(this,jRc,new GMb(($Mb(),SMb)))};var gIc;ZT(1430,1,{},lIc);_.Od=function mIc(){return uIc(),jIc};_.Pd=function nIc(){return vIc(),kIc};var jIc,kIc;ZT(1431,1,{},pIc);_.nc=function qIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};ZT(1432,1,{},sIc);_.nc=function tIc(){return $Rc};ZT(1435,730,uLc,xIc);_.Ld=function yIc(){fIb(this,uSc,new GMb(($Mb(),SMb)));fIb(this,PRc,new HMb(UMb,new e5b(512,512)));fIb(this,DSc,new HMb(UMb,new e5b(1,1)));fIb(this,bOc,new HMb(MMb,new Fjb(0.05)))};var zIc;ZT(1436,1,{},EIc);_.Od=function FIc(){return NIc(),CIc};_.Pd=function GIc(){return OIc(),DIc};var CIc,DIc;ZT(1437,1,{},IIc);_.nc=function JIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};ZT(1438,1,{},LIc);_.nc=function MIc(){return $Rc};ZT(1441,730,uLc,QIc);_.Ld=function RIc(){fIb(this,jRc,new GMb(($Mb(),SMb)));fIb(this,tSc,new HMb(MMb,new Fjb(0.001953125)));fIb(this,GSc,new HMb(MMb,new Fjb(0.35)))};var SIc;ZT(1442,1,{},XIc);_.Od=function YIc(){return eJc(),VIc};_.Pd=function ZIc(){return fJc(),WIc};var VIc,WIc;ZT(1443,1,{},_Ic);_.nc=function aJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};ZT(1444,1,{},cJc);_.nc=function dJc(){return $Rc};var lO=tjb(AQc,'TerrainDynamic$DemoScene',1239),hO=tjb(AQc,'TerrainDynamic$DemoScene$1',1240),iO=tjb(AQc,'TerrainDynamic$DemoScene$2',1241),jO=tjb(AQc,'TerrainDynamic$DemoScene$3',1242),kO=tjb(AQc,'TerrainDynamic$DemoScene$4',1243),$Q=tjb(aSc,KSc,1435),YO=tjb(qQc,'TerrainShader',1304),CQ=tjb(aSc,'BleachBypassShader',1399),SQ=tjb(aSc,'HorizontalTiltShiftShader',1423),cR=tjb(aSc,'VerticalTiltShiftShader',1441),oO=tjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1244),mO=tjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1245),nO=tjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1246),ZQ=tjb(aSc,LSc,1436),XQ=tjb(aSc,MSc,1437),YQ=tjb(aSc,NSc,1438),XO=tjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1305),VO=tjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1306),WO=tjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1307),BQ=tjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1400),zQ=tjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1401),AQ=tjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1402),RQ=tjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1424),PQ=tjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1425),QQ=tjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1426),bR=tjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1442),_Q=tjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1443),aR=tjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1444),WQ=tjb(aSc,'LuminosityShader',1429),VQ=tjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1430),TQ=tjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1431),UQ=tjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1432);VLc(xi)(38);