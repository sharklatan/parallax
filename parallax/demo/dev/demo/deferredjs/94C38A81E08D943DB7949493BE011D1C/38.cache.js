function usc(){}
function ysc(){}
function Bsc(){}
function Pvc(){}
function Tvc(){}
function Wvc(){}
function CGc(){}
function GGc(){}
function JGc(){}
function YHc(){}
function aIc(){}
function dIc(){}
function pIc(){}
function tIc(){}
function wIc(){}
function IIc(){}
function MIc(){}
function PIc(){}
function _Ic(){}
function dJc(){}
function gJc(){}
function IYb(a,b){a.b=b}
function D7b(a,b){a.k=b}
function gGc(a,b){nqb(a.b,b)}
function hsc(a){this.a=a}
function ksc(a){this.a=a}
function nsc(a){this.a=a}
function Dsc(){Dsc=aKc;ssc=new ysc}
function qsc(){qsc=aKc;psc=new usc}
function Esc(){Esc=aKc;tsc=new Bsc}
function Lvc(){Lvc=aKc;Kvc=new Pvc}
function Yvc(){Yvc=aKc;Nvc=new Tvc}
function Zvc(){Zvc=aKc;Ovc=new Wvc}
function yGc(){yGc=aKc;xGc=new CGc}
function LGc(){LGc=aKc;AGc=new GGc}
function MGc(){MGc=aKc;BGc=new JGc}
function UHc(){UHc=aKc;THc=new YHc}
function fIc(){fIc=aKc;WHc=new aIc}
function gIc(){gIc=aKc;XHc=new dIc}
function lIc(){lIc=aKc;kIc=new pIc}
function yIc(){yIc=aKc;nIc=new tIc}
function zIc(){zIc=aKc;oIc=new wIc}
function EIc(){EIc=aKc;DIc=new IIc}
function RIc(){RIc=aKc;GIc=new MIc}
function SIc(){SIc=aKc;HIc=new PIc}
function XIc(){XIc=aKc;WIc=new _Ic}
function iJc(){iJc=aKc;ZIc=new dJc}
function jJc(){jJc=aKc;$Ic=new gJc}
function esc(a,b){this.a=a;this.b=b}
function Gvc(){wIb.call(this,(Lvc(),Kvc))}
function vGc(){wIb.call(this,(yGc(),xGc))}
function RHc(){wIb.call(this,(UHc(),THc))}
function iIc(){wIb.call(this,(lIc(),kIc))}
function BIc(){wIb.call(this,(EIc(),DIc))}
function UIc(){wIb.call(this,(XIc(),WIc))}
function Zrc(a){a.w+=1;a.w==3&&rPb(a.v,true)}
function $rc(){D9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Yrc(a,b,c,d){var e,f,g;g=new o2b(b);KMb(zu(LRb(gZb(g).i,ARc),225),c);f=new i8b;e=new v7b(new AWb(a.u,a.t),g);V5b(e._,-500);gPb(f,e);LGb(a.G.k,f,a.c,d,true)}
function Xrc(a,b,c,d,e,f){var g,i;g=new g0b;__b(g,new c3b(16755285));g.j=true;e0b(g,($Zb(),XZb));i=new F7b(b,g);i.d=c;D7b(i,Hu(600*Qkb()));T5b(i._,d,e,f);q3b(i.cb,1.5707963267948966);i.S=true;i.U=true;gPb(a.H,i);nqb(a.n,i)}
var QSc='enableDiffuse1',RSc='enableDiffuse2',JSc='h',LSc='heightMap',WSc='heightmap',VSc='offset',XSc='r',PSc='tDetail',NSc='tDiffuse1',OSc='tDiffuse2',TSc='uRepeatOverlay',KSc='v';fU(1236,1,LLc);_.zb=function Vrc(){d9b(this.b,new $rc(this.a))};fU(1237,970,{78:1,186:1,338:1},$rc);_.Ud=function _rc(a){Zrc(this)};_.Gd=function asc(a){this.u=a.a.Z;this.t=a.a.Y;KMb(zu(LRb(gZb(this.f.b).i,JSc),225),new Jjb(6/this.u));KMb(zu(LRb(gZb(this.D.b).i,KSc),225),new Jjb(6/this.t))};_.nb=function bsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;nt((Dxb(),Cxb),(Nxb(),Mxb),this);this.b=new jQb(40,zGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new WPb(this.u,this.t,-10000,10000);T5b(this.b._,-1200,800,1200);V5b(this.c._,100);this.s=new i8b;gPb(this.s,this.c);this.d=new Iwb(this.b,this.G.c);S5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Fwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Dwb(this.d,0.15);g8b(this.H,new Y7b(328965,2000,4000));gPb(this.H,new QXb(1118481));this.e=new rYb(16777215,1.15);T5b(this.e._,500,2000,0);gPb(this.H,this.e);this.q=new KYb(16729088,1.5,0);S5b(this.q._,0);gPb(this.H,this.q);this.g=new gOb(256,256);yNb(this.g,(kEb(),fEb));wNb(this.g,(_Db(),ZDb));tNb(this.g,(vCb(),tCb));uNb(this.g,false);this.o=new gOb(256,256);yNb(this.o,fEb);wNb(this.o,ZDb);tNb(this.o,tCb);uNb(this.o,false);n=new BIc;u=n.i;KMb(zu(u.a[hOc],225),new Jjb(0.05));f5b(zu(zu(u.a[eSc],225).d,297),256,256);KMb(zu(u.a[LSc],225),this.g);s=new gOb(2048,2048);yNb(s,fEb);wNb(s,ZDb);tNb(s,tCb);s.r=false;FNb(s,(CFb(),BFb));GNb(s,BFb);c=new MNb('./static/textures/terrain/grasslight-big.jpg',new esc(this,s));FNb(c,BFb);GNb(c,BFb);d=new MNb('./static/textures/terrain/backgrounddetailed6.jpg',this);FNb(d,BFb);GNb(d,BFb);b=new MNb('./static/textures/terrain/grasslight-big-nm.jpg',this);FNb(b,BFb);GNb(b,BFb);t=new Gvc;this.B=t.i;KMb(zu(LRb(this.B,$Rc),225),this.o);KMb(zu(LRb(this.B,_Rc),225),new Jjb(3.5));KMb(zu(LRb(this.B,MSc),225),this.g);KMb(zu(LRb(this.B,NSc),225),c);KMb(zu(LRb(this.B,OSc),225),d);KMb(zu(LRb(this.B,aSc),225),s);KMb(zu(LRb(this.B,PSc),225),b);KMb(zu(LRb(this.B,QSc),225),(Kib(),Kib(),Jib));KMb(zu(LRb(this.B,RSc),225),Jib);KMb(zu(LRb(this.B,yRc),225),Jib);_2b(zu(zu(LRb(this.B,ERc),225).d,293),16777215);_2b(zu(zu(LRb(this.B,FRc),225).d,293),16777215);_2b(zu(zu(LRb(this.B,DRc),225).d,293),1118481);KMb(zu(LRb(this.B,dSc),225),new Jjb(30));KMb(zu(LRb(this.B,SSc),225),new Jjb(375));f5b(zu(zu(LRb(this.B,TSc),225).d,297),6,6);this.A=new ftb;Dob(this.A,hSc,new MMb((dNb(),RMb),new Jjb(1)));Dob(this.A,USc,new MMb(ZMb,new j5b(1.5,1.5)));Dob(this.A,VSc,new MMb(ZMb,new j5b(0,0)));this.k=new ftb;i=new n2b((qsc(),psc));rIb(gZb(i),this.A);i.c=false;i.b=true;Dob(this.k,WSc,i);j=new o2b(n);rIb(gZb(j),u);j.c=false;j.b=true;Dob(this.k,uRc,j);k=new o2b(t);rIb(gZb(k),this.B);k.c=true;k.b=true;Dob(this.k,'terrain',k);o=new AWb(this.u,this.t);p=new n_b;h_b(p,new c3b(0));this.r=new v7b(o,p);V5b(this.r._,-500);gPb(this.s,this.r);g=new BWb(6000,6000,64,64);QQb(g);this.v=new v7b(g,k);T5b(this.v._,0,-125,0);p3b(this.v.cb,-1.5707963267948966);rPb(this.v,false);gPb(this.H,this.v);XGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;TGb(this.G.k,false);q=new pGc(this.H,this.b);f=new aGc(0.6);e=new sGc(new vGc);KMb(zu(LRb(gZb(e.b).i,KRc),225),new Jjb(0.65));this.f=new sGc(new RHc);this.D=new sGc(new UIc);KMb(zu(LRb(gZb(this.f.b).i,JSc),225),new Jjb(6/this.u));KMb(zu(LRb(gZb(this.D.b).i,KSc),225),new Jjb(6/this.t));KMb(zu(LRb(gZb(this.f.b).i,XSc),225),new Jjb(0.5));KMb(zu(LRb(gZb(this.D.b).i,XSc),225),new Jjb(0.5));this.D.a=true;r=new gOb(this.u,this.t);yNb(s,eEb);wNb(s,ZDb);tNb(s,tCb);s.f=false;s.r=false;a=new iGc(this.G.k,r);nqb(a.b,q);nqb(a.b,f);nqb(a.b,e);gGc(a,this.f);gGc(a,this.D);this.n=new xqb;new Owc('./static/models/animated/parrot.js',new hsc(this));new Owc(ISc,new ksc(this));new Owc('./static/models/animated/stork.js',new nsc(this));this.p=rh()};_.ob=function csc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Gwb(this.d);this.j=z3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;$2b(this.H.a.c,0.1,e,this.j);XGb(this.G.k,this.H.a.c,1);$Xb(this.e,0.1+f*1.0499999999999998);IYb(this.q,0.9+f*0.6);KMb(zu(LRb(this.B,_Rc),225),new Jjb(0.6+f*2.9));if(this.C){this.a=z3b(this.a+-7.5E-4,0,0.05);KMb(zu(yob(this.A,hSc),225),new Jjb(zu(zu(yob(this.A,hSc),225).d,150).a+b*this.a));b5b(zu(zu(yob(this.A,VSc),225).d,297),b*0.05);g5b(zu(zu(LRb(this.B,YSc),225).d,297),4*zu(zu(yob(this.A,VSc),225).d,297).c);VSb(this.r,zu(yob(this.k,WSc),282));LGb(this.G.k,this.s,this.c,this.g,true);VSb(this.r,zu(yob(this.k,uRc),282));LGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=zu(qqb(this.n,c),305);E7b(d,Hu(1000*b));b5b(d._,d.d*b);d._.c>2000&&g5b(d._,-1500-Qkb()*500)}LGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;fU(1238,1,{},esc);_.Ud=function fsc(a){Zrc(this.a);Yrc(this.a,new iIc,a,this.b)};fU(1239,1,{},hsc);_.Af=function isc(a,b){Jwc((zu(a,339),zu(b,242)));Xrc(this.a,zu(b,242),500,-3500,500,700);Xrc(this.a,zu(b,242),500,-3000-Qkb()*500,500,-200);Xrc(this.a,zu(b,242),500,-3000-Qkb()*500,500,200);Xrc(this.a,zu(b,242),500,-3000-Qkb()*500,500,1000)};fU(1240,1,{},ksc);_.Af=function lsc(a,b){Jwc((zu(a,339),zu(b,242)));Xrc(this.a,zu(b,242),1000,-3000-Qkb()*500,350,40)};fU(1241,1,{},nsc);_.Af=function osc(a,b){Jwc((zu(a,339),zu(b,242)));Xrc(this.a,zu(b,242),1000,-3000-Qkb()*500,350,340)};var psc;fU(1242,1,{},usc);_.Od=function vsc(){return Dsc(),ssc};_.Pd=function wsc(){return Esc(),tsc};var ssc,tsc;fU(1243,1,{},ysc);_.nc=function zsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};fU(1244,1,{},Bsc);_.nc=function Csc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};fU(1302,728,yLc,Gvc);_.Ld=function Hvc(){rIb(this,hNb());rIb(this,iNb());rIb(this,jNb());kIb(this,QSc,new MMb((dNb(),UMb),(Kib(),Kib(),Iib)));kIb(this,RSc,new MMb(UMb,Iib));kIb(this,yRc,new MMb(UMb,Iib));kIb(this,ZSc,new MMb(UMb,Iib));kIb(this,NSc,new LMb(XMb));kIb(this,OSc,new LMb(XMb));kIb(this,PSc,new LMb(XMb));kIb(this,$Rc,new LMb(XMb));kIb(this,aSc,new LMb(XMb));kIb(this,MSc,new LMb(XMb));kIb(this,_Rc,new MMb(RMb,new Jjb(1)));kIb(this,$Sc,new MMb(RMb,new Jjb(0)));kIb(this,SSc,new MMb(RMb,new Jjb(1)));kIb(this,ERc,new MMb(QMb,new c3b(15658734)));kIb(this,FRc,new MMb(QMb,new c3b(1118481)));kIb(this,DRc,new MMb(QMb,new c3b(328965)));kIb(this,dSc,new MMb(RMb,new Jjb(30)));kIb(this,KRc,new MMb(RMb,new Jjb(1)));kIb(this,'uRepeatBase',new MMb(ZMb,new j5b(1,1)));kIb(this,TSc,new MMb(ZMb,new j5b(1,1)));kIb(this,YSc,new MMb(ZMb,new j5b(0,0)))};_.Md=function Ivc(a){var b,c;c=new Vqb(pu(cS,fKc,1,[LRc,MRc]));b=new Vqb(pu(cS,fKc,1,[ORc,PRc,QRc]));tIb(this,BIb(a,pu(fS,fKc,173,[c,b])))};_.Nd=function Jvc(a){var b,c;c=new Vqb(pu(cS,fKc,1,[RRc]));b=new Vqb(pu(cS,fKc,1,[SRc]));uIb(this,BIb(a,pu(fS,fKc,173,[c,b])))};var Kvc;fU(1303,1,{},Pvc);_.Od=function Qvc(){return Yvc(),Nvc};_.Pd=function Rvc(){return Zvc(),Ovc};var Nvc,Ovc;fU(1304,1,{},Tvc);_.nc=function Uvc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};fU(1305,1,{},Wvc);_.nc=function Xvc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};fU(1397,728,yLc,vGc);_.Ld=function wGc(){kIb(this,ARc,new LMb((dNb(),XMb)));kIb(this,KRc,new MMb(RMb,new Jjb(1)))};var xGc;fU(1398,1,{},CGc);_.Od=function DGc(){return LGc(),AGc};_.Pd=function EGc(){return MGc(),BGc};var AGc,BGc;fU(1399,1,{},GGc);_.nc=function HGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};fU(1400,1,{},JGc);_.nc=function KGc(){return pSc};fU(1421,728,yLc,RHc);_.Ld=function SHc(){kIb(this,ARc,new LMb((dNb(),XMb)));kIb(this,JSc,new MMb(RMb,new Jjb(0.001953125)));kIb(this,XSc,new MMb(RMb,new Jjb(0.35)))};var THc;fU(1422,1,{},YHc);_.Od=function ZHc(){return fIc(),WHc};_.Pd=function $Hc(){return gIc(),XHc};var WHc,XHc;fU(1423,1,{},aIc);_.nc=function bIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};fU(1424,1,{},dIc);_.nc=function eIc(){return pSc};fU(1427,728,yLc,iIc);_.Ld=function jIc(){kIb(this,ARc,new LMb((dNb(),XMb)))};var kIc;fU(1428,1,{},pIc);_.Od=function qIc(){return yIc(),nIc};_.Pd=function rIc(){return zIc(),oIc};var nIc,oIc;fU(1429,1,{},tIc);_.nc=function uIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};fU(1430,1,{},wIc);_.nc=function xIc(){return pSc};fU(1433,728,yLc,BIc);_.Ld=function CIc(){kIb(this,LSc,new LMb((dNb(),XMb)));kIb(this,eSc,new MMb(ZMb,new j5b(512,512)));kIb(this,USc,new MMb(ZMb,new j5b(1,1)));kIb(this,hOc,new MMb(RMb,new Jjb(0.05)))};var DIc;fU(1434,1,{},IIc);_.Od=function JIc(){return RIc(),GIc};_.Pd=function KIc(){return SIc(),HIc};var GIc,HIc;fU(1435,1,{},MIc);_.nc=function NIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};fU(1436,1,{},PIc);_.nc=function QIc(){return pSc};fU(1439,728,yLc,UIc);_.Ld=function VIc(){kIb(this,ARc,new LMb((dNb(),XMb)));kIb(this,KSc,new MMb(RMb,new Jjb(0.001953125)));kIb(this,XSc,new MMb(RMb,new Jjb(0.35)))};var WIc;fU(1440,1,{},_Ic);_.Od=function aJc(){return iJc(),ZIc};_.Pd=function bJc(){return jJc(),$Ic};var ZIc,$Ic;fU(1441,1,{},dJc);_.nc=function eJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};fU(1442,1,{},gJc);_.nc=function hJc(){return pSc};var tO=xjb(RQc,'TerrainDynamic$DemoScene',1237),pO=xjb(RQc,'TerrainDynamic$DemoScene$1',1238),qO=xjb(RQc,'TerrainDynamic$DemoScene$2',1239),rO=xjb(RQc,'TerrainDynamic$DemoScene$3',1240),sO=xjb(RQc,'TerrainDynamic$DemoScene$4',1241),gR=xjb(rSc,_Sc,1433),eP=xjb(HQc,'TerrainShader',1302),KQ=xjb(rSc,'BleachBypassShader',1397),$Q=xjb(rSc,'HorizontalTiltShiftShader',1421),kR=xjb(rSc,'VerticalTiltShiftShader',1439),wO=xjb(RQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1242),uO=xjb(RQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1243),vO=xjb(RQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1244),fR=xjb(rSc,aTc,1434),dR=xjb(rSc,bTc,1435),eR=xjb(rSc,cTc,1436),dP=xjb(HQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1303),bP=xjb(HQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1304),cP=xjb(HQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1305),JQ=xjb(rSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1398),HQ=xjb(rSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1399),IQ=xjb(rSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1400),ZQ=xjb(rSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1422),XQ=xjb(rSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1423),YQ=xjb(rSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1424),jR=xjb(rSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1440),hR=xjb(rSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1441),iR=xjb(rSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1442),cR=xjb(rSc,'LuminosityShader',1427),bR=xjb(rSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1428),_Q=xjb(rSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1429),aR=xjb(rSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1430);ZLc(xi)(38);