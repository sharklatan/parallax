function pIb(){}
function tIb(){}
function wIb(){}
function lIb(){lIb=YEc;kIb=new pIb}
function yIb(){yIb=YEc;nIb=new tIb}
function zIb(){zIb=YEc;oIb=new wIb}
function iIb(){UGb.call(this,(lIb(),kIb))}
function Wic(){m7b.call(this);this.c=0;this.d=0}
RS(743,725,sGc,iIb);_.Jd=function jIb(){IGb(this,'mRefractionRatio',new PKb((gLb(),UKb),new mib(1.02)));IGb(this,'mFresnelBias',new PKb(UKb,new mib(0.1)));IGb(this,'mFresnelPower',new PKb(UKb,new mib(2)));IGb(this,'mFresnelScale',new PKb(UKb,new mib(1)));IGb(this,FMc,new OKb($Kb))};var kIb;RS(744,1,{},pIb);_.Md=function qIb(){return yIb(),nIb};_.Nd=function rIb(){return zIb(),oIb};var nIb,oIb;RS(745,1,{},tIb);_.ac=function uIb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};RS(746,1,{},wIb);_.ac=function xIb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};RS(1124,1,FGc);_.zb=function Uic(){O6b(this.b,new Wic(this.a))};RS(1125,960,{324:1},Wic);_.nb=function Xic(){var a,b,c,d,e,f,g,i,j;this.a=new kOb(60,XEb(this.D.k),1,100000);H3b(this.a._,3200);this.b=new kOb(60,XEb(this.D.k),1,100000);this.e=new U5b;a=new DUb(100,32,16);j=new XLb('./static/textures/cube/park2/*.jpg');wLb(j,(UAb(),SAb));g=new iIb;NKb(su(IPb(g.i,FMc),225),j);c=new $_b(g);this.f=new _ob;for(b=0;b<500;b++){d=new h5b(a,c);V2b(d._,tjb()*10000-5000);W2b(d._,tjb()*10000-5000);H3b(d._,tjb()*10000-5000);E3b(d.eb,tjb()*3+1);jNb(this.F,d);Rob(this.f,d)}this.F.W=false;i=new uHb;NKb(su(IPb(i.i,FMc),225),j);f=new $_b(i);mXb(f,(_Yb(),YYb));e=new h5b(new OTb(100000,100000,100000),f);jNb(this.e,e);pFb(this.D.k,false)};_.ob=function Yic(a){var b,c,d,e;e=1.0E-4*a;Q2b(this.a._,(this.c-this.a._.c)*0.05);R2b(this.a._,(-this.d-this.a._.d)*0.05);INb(this.a,this.F._);W0b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=su(Uob(this.f,b),303);V2b(d._,5000*Math.cos(e+b));W2b(d._,5000*Math.sin(e+b*1.1))}REb(this.D.k);hFb(this.D.k,this.e,this.b,null,false);hFb(this.D.k,this.F,this.a,null,false)};_.c=0;_.d=0;var pM=aib(vLc,'MaterialsCubemapFresnel$DemoScene',1125),VF=aib(GMc,'FresnelShader',743),UF=aib(GMc,'FresnelShader_Resources_default_InlineClientBundleGenerator',744),SF=aib(GMc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',745),TF=aib(GMc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',746);SGc(xi)(21);