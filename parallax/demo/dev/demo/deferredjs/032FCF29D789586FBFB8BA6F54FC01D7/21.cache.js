function gKb(){}
function kKb(){}
function nKb(){}
function cKb(){cKb=WJc;bKb=new gKb}
function pKb(){pKb=WJc;eKb=new kKb}
function qKb(){qKb=WJc;fKb=new nKb}
function _Jb(){qIb.call(this,(cKb(),bKb))}
function Nkc(){x9b.call(this);this.c=0;this.d=0}
YT(753,729,sLc,_Jb);_.Ld=function aKb(){eIb(this,'mRefractionRatio',new GMb((ZMb(),LMb),new Djb(1.02)));eIb(this,'mFresnelBias',new GMb(LMb,new Djb(0.1)));eIb(this,'mFresnelPower',new GMb(LMb,new Djb(2)));eIb(this,'mFresnelScale',new GMb(LMb,new Djb(1)));eIb(this,ERc,new FMb(RMb))};var bKb;YT(754,1,{},gKb);_.Od=function hKb(){return pKb(),eKb};_.Pd=function iKb(){return qKb(),fKb};var eKb,fKb;YT(755,1,{},kKb);_.nc=function lKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};YT(756,1,{},nKb);_.nc=function oKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};YT(1138,1,FLc);_.zb=function Lkc(){Z8b(this.b,new Nkc(this.a))};YT(1139,971,{327:1},Nkc);_.nb=function Okc(){var a,b,c,d,e,f,g,i,j;this.a=new dQb(60,tGb(this.G.k),1,100000);P5b(this.a._,3200);this.b=new dQb(60,tGb(this.G.k),1,100000);this.e=new c8b;a=new CWb(100,32,16);j=new ONb('./static/textures/cube/park2/*.jpg');nNb(j,(pCb(),nCb));g=new _Jb;EMb(pu(FRb(g.i,ERc),225),j);c=new i2b(g);this.f=new rqb;for(b=0;b<500;b++){e=new p7b(a,c);a5b(e._,Kkb()*10000-5000);b5b(e._,Kkb()*10000-5000);P5b(e._,Kkb()*10000-5000);M5b(e.eb,Kkb()*3+1);aPb(this.H,e);hqb(this.f,e)}this.H.W=false;i=new SIb;EMb(pu(FRb(i.i,ERc),225),j);f=new i2b(i);lZb(f,(Z$b(),W$b));d=new p7b(new NVb(100000,100000,100000),f);aPb(this.e,d);NGb(this.G.k,false)};_.ob=function Pkc(a){var b,c,d,e;e=1.0E-4*a;X4b(this.a._,(this.c-this.a._.c)*0.05);Y4b(this.a._,(-this.d-this.a._.d)*0.05);zPb(this.a,this.H._);d3b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=pu(kqb(this.f,b),304);a5b(d._,5000*Math.cos(e+b));b5b(d._,5000*Math.sin(e+b*1.1))}mGb(this.G.k,true);FGb(this.G.k,this.e,this.b,null,false);FGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var xM=rjb(xQc,'MaterialsCubemapFresnel$DemoScene',1139),ZF=rjb(FRc,'FresnelShader',753),YF=rjb(FRc,'FresnelShader_Resources_default_InlineClientBundleGenerator',754),WF=rjb(FRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',755),XF=rjb(FRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',756);TLc(xi)(21);