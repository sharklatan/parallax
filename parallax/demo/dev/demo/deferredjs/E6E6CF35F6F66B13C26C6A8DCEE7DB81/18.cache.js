function Gvc(){}
function Kvc(){}
function Nvc(){}
function dAc(){}
function hAc(){}
function kAc(){}
function Klc(a){this.b=a}
function mAc(){mAc=eRc;bAc=new hAc}
function nAc(){nAc=eRc;cAc=new kAc}
function _zc(){_zc=eRc;$zc=new dAc}
function Cvc(){Cvc=eRc;Bvc=new Gvc}
function Pvc(){Pvc=eRc;Evc=new Kvc}
function Qvc(){Qvc=eRc;Fvc=new Nvc}
function zvc(){mKb.call(this,(Cvc(),Bvc))}
function Wzc(){mKb.call(this,(_zc(),$zc))}
function Glc(){obc.call(this);this.e=0;this.f=0}
function Flc(a,b){var c,d,e,f,g,i;d=new BPb(yYc);d.n=4;T6b(d.C,0.998,0.998);T6b(d.B,0.001,0.001);vPb(d,(rHb(),qHb));wPb(d,qHb);jPb(d,(MDb(),KDb));e=new BPb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');T6b(e.C,0.998,0.998);T6b(e.B,0.001,0.001);vPb(e,qHb);wPb(e,qHb);jPb(e,KDb);c=new BPb(AYc);T6b(c.C,0.998,0.998);T6b(c.B,0.001,0.001);vPb(c,qHb);wPb(c,qHb);jPb(c,KDb);g=new Wzc;i=g.j;AOb(Xu(i.b[BYc],227),(Vjb(),Vjb(),Ujb));AOb(Xu(i.b[CYc],227),Ujb);AOb(Xu(i.b[DYc],227),a.c.g);AOb(Xu(i.b[EYc],227),c);AOb(Xu(i.b[FYc],227),d);AOb(Xu(i.b[GYc],227),e);N4b(Xu(Xu(i.b[HYc],227).e,294),10526880);N4b(Xu(Xu(i.b[IYc],227).e,294),10526880);N4b(Xu(Xu(i.b[JYc],227).e,294),10526880);AOb(Xu(i.b[KYc],227),new Ukb(0.145));AOb(Xu(i.b[LYc],227),new Ukb(0.75));AOb(Xu(i.b[MYc],227),new Ukb(16));t8b(Xu(Xu(i.b[NYc],227).e,302),0.001,0.001,0.998,0.998);f=new a4b(g);f.d=true;a.d=new h9b(b,f);V6b(a.d.ab,-50);E7b(a.d.fb,100);bRb(a.d,true);a.d.V=true;YQb(a.I,a.d)}
var BYc='enableBump',DYc='tBeckmann',KYc='uRoughness',LYc='uSpecularBrightness';rV(1120,1,QSc);_.Db=function Dlc(){Qac(this.c,new Glc(this.b))};rV(1121,975,{324:1},Glc);_.ob=function Hlc(){var a,b,c,d,e,f,g;this.b=new ZRb(27,pIb(this.H.n),1,10000);H7b(this.b.ab,1200);YQb(this.I,new CZb(5592405));d=new w$b(16777215,1.5,1000);F7b(d.ab,0,0,600);YQb(this.I,d);f=new E$b(1);F7b(f.ab,0.05,0.05,1);YQb(this.I,f);f.ab.sf(700);f.T=true;f.u=true;f.J=2048;f.H=2048;f.B=200;f.A=1500;f.e=40;f.v=-0.005;f.F=0.15;a=new d$b(16777215,0.85);F7b(a.ab,1,-0.5,1);M4b(a.M,0.6,1,0.85);YQb(this.I,a);a.ab.sf(500);a.T=true;a.J=2048;a.H=2048;a.B=200;a.A=1500;a.f=-500;a.g=500;a.i=500;a.e=-500;a.v=-0.005;a.F=0.15;b=new d$b(16777215,0.85);F7b(b.ab,1,-0.5,-1);YQb(this.I,b);new nLc(new zvc);c=new nLc(new wMc);c.b=true;g=new YPb(512,512);oPb(g,(_Fb(),VFb));mPb(g,(QFb(),OFb));jPb(g,(MDb(),KDb));g.g=false;this.c=new cLc(this.H.n,g);new xBc(zYc,new Klc(this));NIb(this.H.n,new Q4b(5001561),1);e=new GHb(this.H.n,this.I);e.i=false;JIb(this.H.n,false);this.H.n.bb=true;this.H.n.cb=true};_.pb=function Ilc(a){var b,c;b=this.e*0.001;c=this.f*0.001;if(this.d){W4b(this.d.db,0.05*(b-this.d.db.e));V4b(this.d.db,0.05*(c-this.d.db.d))}iIb(this.H.n,true);BIb(this.H.n,this.I,this.b,null,false)};_.e=0;_.f=0;rV(1122,1,{},Klc);_.Ff=function Llc(a,b){Flc(this.b,Xu(b,243))};rV(1254,733,DSc,zvc);_.Rd=function Avc(){};var Bvc;rV(1255,1,{},Gvc);_.Ud=function Hvc(){return Pvc(),Evc};_.Vd=function Ivc(){return Qvc(),Fvc};var Evc,Fvc;rV(1256,1,{},Kvc);_.tc=function Lvc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};rV(1257,1,{},Nvc);_.tc=function Ovc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};rV(1352,733,DSc,Wzc);_.Rd=function Xzc(){hKb(this,ZOb());hKb(this,$Ob());hKb(this,_Ob());aKb(this,BYc,new COb((VOb(),KOb),Alb(0)));aKb(this,CYc,new COb(KOb,Alb(0)));aKb(this,EYc,new BOb(NOb));aKb(this,DYc,new BOb(NOb));aKb(this,IYc,new COb(GOb,new Q4b(15658734)));aKb(this,JYc,new COb(GOb,new Q4b(1118481)));aKb(this,HYc,new COb(GOb,new Q4b(328965)));aKb(this,OYc,new COb(HOb,new Ukb(1)));aKb(this,KYc,new COb(HOb,new Ukb(0.15)));aKb(this,LYc,new COb(HOb,new Ukb(0.75)));aKb(this,FYc,new BOb(NOb));aKb(this,MYc,new COb(HOb,new Ukb(1)));aKb(this,GYc,new BOb(NOb));aKb(this,NYc,new COb(TOb,new x8b(0,0,1,1)));aKb(this,'uWrapRGB',new COb(ROb,new L7b(0.75,0.375,0.1875)))};_.Sd=function Yzc(a){var b,c;c=new esb(Nu(mT,kRc,1,[PYc,QYc,RYc]));b=new esb(Nu(mT,kRc,1,[SYc,TYc,UYc]));jKb(this,rKb(a,Nu(pT,kRc,173,[c,b])))};_.Td=function Zzc(a){var b,c;c=new esb(Nu(mT,kRc,1,[VYc]));b=new esb(Nu(mT,kRc,1,[WYc]));kKb(this,rKb(a,Nu(pT,kRc,173,[c,b])))};var $zc;rV(1353,1,{},dAc);_.Ud=function eAc(){return mAc(),bAc};_.Vd=function fAc(){return nAc(),cAc};var bAc,cAc;rV(1354,1,{},hAc);_.tc=function iAc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};rV(1355,1,{},kAc);_.tc=function lAc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var SM=Ikb(RXc,'MaterialsBumpmapSkin$DemoScene',1121),RM=Ikb(RXc,'MaterialsBumpmapSkin$DemoScene$1',1122),jP=Ikb(KXc,'BeckmannShader',1254),iP=Ikb(KXc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1255),gP=Ikb(KXc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1256),hP=Ikb(KXc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1257),KP=Ikb(KXc,'SkinSimpleShader',1352),JP=Ikb(KXc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1353),HP=Ikb(KXc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1354),IP=Ikb(KXc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1355);cTc(Ii)(18);