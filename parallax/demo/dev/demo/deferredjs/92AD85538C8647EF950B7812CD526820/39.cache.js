function wsc(){}
function Asc(){}
function Dsc(){}
function Cwc(){}
function Gwc(){}
function Jwc(){}
function pHc(){}
function tHc(){}
function wHc(){}
function LIc(){}
function PIc(){}
function SIc(){}
function SJc(){}
function cJc(){}
function gJc(){}
function jJc(){}
function vJc(){}
function zJc(){}
function CJc(){}
function OJc(){}
function VJc(){}
function OXb(a,b){a.b=b}
function H6b(a,b){a.k=b}
function VGc(a,b){Ypb(a.b,b)}
function jsc(a){this.a=a}
function msc(a){this.a=a}
function psc(a){this.a=a}
function ssc(){ssc=PKc;rsc=new wsc}
function Fsc(){Fsc=PKc;usc=new Asc}
function Gsc(){Gsc=PKc;vsc=new Dsc}
function ywc(){ywc=PKc;xwc=new Cwc}
function Lwc(){Lwc=PKc;Awc=new Gwc}
function Mwc(){Mwc=PKc;Bwc=new Jwc}
function lHc(){lHc=PKc;kHc=new pHc}
function yHc(){yHc=PKc;nHc=new tHc}
function zHc(){zHc=PKc;oHc=new wHc}
function HIc(){HIc=PKc;GIc=new LIc}
function UIc(){UIc=PKc;JIc=new PIc}
function VIc(){VIc=PKc;KIc=new SIc}
function $Ic(){$Ic=PKc;ZIc=new cJc}
function lJc(){lJc=PKc;aJc=new gJc}
function mJc(){mJc=PKc;bJc=new jJc}
function rJc(){rJc=PKc;qJc=new vJc}
function EJc(){EJc=PKc;tJc=new zJc}
function FJc(){FJc=PKc;uJc=new CJc}
function KJc(){KJc=PKc;JJc=new OJc}
function XJc(){XJc=PKc;MJc=new SJc}
function YJc(){YJc=PKc;NJc=new VJc}
function gsc(a,b){this.a=a;this.b=b}
function twc(){eIb.call(this,(ywc(),xwc))}
function iHc(){eIb.call(this,(lHc(),kHc))}
function EIc(){eIb.call(this,(HIc(),GIc))}
function XIc(){eIb.call(this,($Ic(),ZIc))}
function oJc(){eIb.call(this,(rJc(),qJc))}
function HJc(){eIb.call(this,(KJc(),JJc))}
function _rc(a){a.w+=1;a.w==3&&FOb(a.v,true)}
function asc(){G8b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function $rc(a,b,c,d){var e,f,g;g=new t1b(b);ZLb(Au(TQb(mYb(g).i,lSc),225),c);f=new m7b;e=new z6b(new GVb(a.u,a.t),g);Z4b(e._,-500);vOb(f,e);tGb(a.G.k,f,a.c,d,true)}
function Zrc(a,b,c,d,e,f){var g,i;g=new l_b;e_b(g,new h2b(16755285));g.j=true;j_b(g,(eZb(),bZb));i=new J6b(b,g);i.d=c;H6b(i,Iu(600*Akb()));X4b(i._,d,e,f);v2b(i.cb,1.5707963267948966);i.S=true;i.U=true;vOb(a.H,i);Ypb(a.n,i)}
var FTc='enableDiffuse1',GTc='enableDiffuse2',yTc='h',ATc='heightMap',KTc='heightmap',LTc='r',ETc='tDetail',CTc='tDiffuse1',DTc='tDiffuse2',ITc='uRepeatOverlay',zTc='v';TT(1232,1,xMc);_.zb=function Xrc(){g8b(this.b,new asc(this.a))};TT(1233,964,{78:1,186:1,337:1},asc);_.Td=function bsc(a){_rc(this)};_.Fd=function csc(a){this.u=a.a.Z;this.t=a.a.Y;ZLb(Au(TQb(mYb(this.f.b).i,yTc),225),new tjb(6/this.u));ZLb(Au(TQb(mYb(this.D.b).i,zTc),225),new tjb(6/this.t))};_.nb=function dsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ot((lxb(),kxb),(vxb(),uxb),this);this.b=new vPb(40,hGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new iPb(this.u,this.t,-10000,10000);X4b(this.b._,-1200,800,1200);Z4b(this.c._,100);this.s=new m7b;vOb(this.s,this.c);this.d=new qwb(this.b,this.G.c);W4b(this.d.v,0);this.d.s=1;this.d.A=1.2;nwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;lwb(this.d,0.15);l7b(this.H,new b7b(328965,2000,4000));vOb(this.H,new WWb(1118481));this.e=new xXb(16777215,1.15);X4b(this.e._,500,2000,0);vOb(this.H,this.e);this.q=new QXb(16729088,1.5,0);W4b(this.q._,0);vOb(this.H,this.q);this.g=new vNb(256,256);NMb(this.g,(UDb(),PDb));LMb(this.g,(JDb(),HDb));IMb(this.g,(dCb(),bCb));JMb(this.g,false);this.o=new vNb(256,256);NMb(this.o,PDb);LMb(this.o,HDb);IMb(this.o,bCb);JMb(this.o,false);n=new oJc;u=n.i;ZLb(Au(u.a[VOc],225),new tjb(0.05));k4b(Au(Au(u.a[WSc],225).d,297),256,256);ZLb(Au(u.a[ATc],225),this.g);s=new vNb(2048,2048);NMb(s,PDb);LMb(s,HDb);IMb(s,bCb);s.r=false;UMb(s,(kFb(),jFb));VMb(s,jFb);c=new _Mb('./static/textures/terrain/grasslight-big.jpg',new gsc(this,s));UMb(c,jFb);VMb(c,jFb);d=new _Mb('./static/textures/terrain/backgrounddetailed6.jpg',this);UMb(d,jFb);VMb(d,jFb);b=new _Mb('./static/textures/terrain/grasslight-big-nm.jpg',this);UMb(b,jFb);VMb(b,jFb);t=new twc;this.B=t.i;ZLb(Au(TQb(this.B,QSc),225),this.o);ZLb(Au(TQb(this.B,RSc),225),new tjb(3.5));ZLb(Au(TQb(this.B,BTc),225),this.g);ZLb(Au(TQb(this.B,CTc),225),c);ZLb(Au(TQb(this.B,DTc),225),d);ZLb(Au(TQb(this.B,SSc),225),s);ZLb(Au(TQb(this.B,ETc),225),b);ZLb(Au(TQb(this.B,FTc),225),(uib(),uib(),tib));ZLb(Au(TQb(this.B,GTc),225),tib);ZLb(Au(TQb(this.B,jSc),225),tib);e2b(Au(Au(TQb(this.B,pSc),225).d,293),16777215);e2b(Au(Au(TQb(this.B,qSc),225).d,293),16777215);e2b(Au(Au(TQb(this.B,oSc),225).d,293),1118481);ZLb(Au(TQb(this.B,VSc),225),new tjb(30));ZLb(Au(TQb(this.B,HTc),225),new tjb(375));k4b(Au(Au(TQb(this.B,ITc),225).d,297),6,6);this.A=new Qsb;mob(this.A,ZSc,new _Lb((sMb(),eMb),new tjb(1)));mob(this.A,JTc,new _Lb(mMb,new o4b(1.5,1.5)));mob(this.A,GSc,new _Lb(mMb,new o4b(0,0)));this.k=new Qsb;i=new s1b((ssc(),rsc));_Hb(mYb(i),this.A);i.c=false;i.b=true;mob(this.k,KTc,i);j=new t1b(n);_Hb(mYb(j),u);j.c=false;j.b=true;mob(this.k,eSc,j);k=new t1b(t);_Hb(mYb(k),this.B);k.c=true;k.b=true;mob(this.k,'terrain',k);o=new GVb(this.u,this.t);p=new t$b;n$b(p,new h2b(0));this.r=new z6b(o,p);Z4b(this.r._,-500);vOb(this.s,this.r);g=new HVb(6000,6000,64,64);YPb(g);this.v=new z6b(g,k);X4b(this.v._,0,-125,0);u2b(this.v.cb,-1.5707963267948966);FOb(this.v,false);vOb(this.H,this.v);FGb(this.G.k,this.H.b.c,1);this.G.k.ab=true;this.G.k.bb=true;BGb(this.G.k,false);q=new cHc(this.H,this.b);f=new PGc(0.6);e=new fHc(new iHc);ZLb(Au(TQb(mYb(e.b).i,vSc),225),new tjb(0.65));this.f=new fHc(new EIc);this.D=new fHc(new HJc);ZLb(Au(TQb(mYb(this.f.b).i,yTc),225),new tjb(6/this.u));ZLb(Au(TQb(mYb(this.D.b).i,zTc),225),new tjb(6/this.t));ZLb(Au(TQb(mYb(this.f.b).i,LTc),225),new tjb(0.5));ZLb(Au(TQb(mYb(this.D.b).i,LTc),225),new tjb(0.5));this.D.a=true;r=new vNb(this.u,this.t);NMb(s,ODb);LMb(s,HDb);IMb(s,bCb);s.f=false;s.r=false;a=new XGc(this.G.k,r);Ypb(a.b,q);Ypb(a.b,f);Ypb(a.b,e);VGc(a,this.f);VGc(a,this.D);this.n=new gqb;new Bxc('./static/models/animated/parrot.js',new jsc(this));new Bxc(xTc,new msc(this));new Bxc('./static/models/animated/stork.js',new psc(this));this.p=rh()};_.ob=function esc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){owb(this.d);this.j=E2b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;d2b(this.H.b.c,0.1,e,this.j);FGb(this.G.k,this.H.b.c,1);eXb(this.e,0.1+f*1.0499999999999998);OXb(this.q,0.9+f*0.6);ZLb(Au(TQb(this.B,RSc),225),new tjb(0.6+f*2.9));if(this.C){this.a=E2b(this.a+-7.5E-4,0,0.05);ZLb(Au(hob(this.A,ZSc),225),new tjb(Au(Au(hob(this.A,ZSc),225).d,150).a+b*this.a));g4b(Au(Au(hob(this.A,GSc),225).d,297),b*0.05);l4b(Au(Au(TQb(this.B,MTc),225).d,297),4*Au(Au(hob(this.A,GSc),225).d,297).c);_Rb(this.r,Au(hob(this.k,KTc),281));tGb(this.G.k,this.s,this.c,this.g,true);_Rb(this.r,Au(hob(this.k,eSc),281));tGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=Au(_pb(this.n,c),305);I6b(d,Iu(1000*b));g4b(d._,d.d*b);d._.c>2000&&l4b(d._,-1500-Akb()*500)}tGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;TT(1234,1,{},gsc);_.Td=function hsc(a){_rc(this.a);$rc(this.a,new XIc,a,this.b)};TT(1235,1,{},jsc);_.yf=function ksc(a,b){wxc((Au(a,338),Au(b,241)));Zrc(this.a,Au(b,241),500,-3500,500,700);Zrc(this.a,Au(b,241),500,-3000-Akb()*500,500,-200);Zrc(this.a,Au(b,241),500,-3000-Akb()*500,500,200);Zrc(this.a,Au(b,241),500,-3000-Akb()*500,500,1000)};TT(1236,1,{},msc);_.yf=function nsc(a,b){wxc((Au(a,338),Au(b,241)));Zrc(this.a,Au(b,241),1000,-3000-Akb()*500,350,40)};TT(1237,1,{},psc);_.yf=function qsc(a,b){wxc((Au(a,338),Au(b,241)));Zrc(this.a,Au(b,241),1000,-3000-Akb()*500,350,340)};var rsc;TT(1238,1,{},wsc);_.Nd=function xsc(){return Fsc(),usc};_.Od=function ysc(){return Gsc(),vsc};var usc,vsc;TT(1239,1,{},Asc);_.mc=function Bsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};TT(1240,1,{},Dsc);_.mc=function Esc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};TT(1328,728,kMc,twc);_.Kd=function uwc(){_Hb(this,wMb());_Hb(this,xMb());_Hb(this,yMb());UHb(this,FTc,new _Lb((sMb(),hMb),(uib(),uib(),sib)));UHb(this,GTc,new _Lb(hMb,sib));UHb(this,jSc,new _Lb(hMb,sib));UHb(this,NTc,new _Lb(hMb,sib));UHb(this,CTc,new $Lb(kMb));UHb(this,DTc,new $Lb(kMb));UHb(this,ETc,new $Lb(kMb));UHb(this,QSc,new $Lb(kMb));UHb(this,SSc,new $Lb(kMb));UHb(this,BTc,new $Lb(kMb));UHb(this,RSc,new _Lb(eMb,new tjb(1)));UHb(this,OTc,new _Lb(eMb,new tjb(0)));UHb(this,HTc,new _Lb(eMb,new tjb(1)));UHb(this,pSc,new _Lb(dMb,new h2b(15658734)));UHb(this,qSc,new _Lb(dMb,new h2b(1118481)));UHb(this,oSc,new _Lb(dMb,new h2b(328965)));UHb(this,VSc,new _Lb(eMb,new tjb(30)));UHb(this,vSc,new _Lb(eMb,new tjb(1)));UHb(this,'uRepeatBase',new _Lb(mMb,new o4b(1,1)));UHb(this,ITc,new _Lb(mMb,new o4b(1,1)));UHb(this,MTc,new _Lb(mMb,new o4b(0,0)))};_.Ld=function vwc(a){var b,c;c=new Eqb(qu(QR,UKc,1,[wSc,xSc]));b=new Eqb(qu(QR,UKc,1,[zSc,ASc,BSc]));bIb(this,jIb(a,qu(TR,UKc,173,[c,b])))};_.Md=function wwc(a){var b,c;c=new Eqb(qu(QR,UKc,1,[CSc]));b=new Eqb(qu(QR,UKc,1,[DSc]));cIb(this,jIb(a,qu(TR,UKc,173,[c,b])))};var xwc;TT(1329,1,{},Cwc);_.Nd=function Dwc(){return Lwc(),Awc};_.Od=function Ewc(){return Mwc(),Bwc};var Awc,Bwc;TT(1330,1,{},Gwc);_.mc=function Hwc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};TT(1331,1,{},Jwc);_.mc=function Kwc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};TT(1423,728,kMc,iHc);_.Kd=function jHc(){UHb(this,lSc,new $Lb((sMb(),kMb)));UHb(this,vSc,new _Lb(eMb,new tjb(1)))};var kHc;TT(1424,1,{},pHc);_.Nd=function qHc(){return yHc(),nHc};_.Od=function rHc(){return zHc(),oHc};var nHc,oHc;TT(1425,1,{},tHc);_.mc=function uHc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};TT(1426,1,{},wHc);_.mc=function xHc(){return fTc};TT(1447,728,kMc,EIc);_.Kd=function FIc(){UHb(this,lSc,new $Lb((sMb(),kMb)));UHb(this,yTc,new _Lb(eMb,new tjb(0.001953125)));UHb(this,LTc,new _Lb(eMb,new tjb(0.35)))};var GIc;TT(1448,1,{},LIc);_.Nd=function MIc(){return UIc(),JIc};_.Od=function NIc(){return VIc(),KIc};var JIc,KIc;TT(1449,1,{},PIc);_.mc=function QIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};TT(1450,1,{},SIc);_.mc=function TIc(){return fTc};TT(1453,728,kMc,XIc);_.Kd=function YIc(){UHb(this,lSc,new $Lb((sMb(),kMb)))};var ZIc;TT(1454,1,{},cJc);_.Nd=function dJc(){return lJc(),aJc};_.Od=function eJc(){return mJc(),bJc};var aJc,bJc;TT(1455,1,{},gJc);_.mc=function hJc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};TT(1456,1,{},jJc);_.mc=function kJc(){return fTc};TT(1459,728,kMc,oJc);_.Kd=function pJc(){UHb(this,ATc,new $Lb((sMb(),kMb)));UHb(this,WSc,new _Lb(mMb,new o4b(512,512)));UHb(this,JTc,new _Lb(mMb,new o4b(1,1)));UHb(this,VOc,new _Lb(eMb,new tjb(0.05)))};var qJc;TT(1460,1,{},vJc);_.Nd=function wJc(){return EJc(),tJc};_.Od=function xJc(){return FJc(),uJc};var tJc,uJc;TT(1461,1,{},zJc);_.mc=function AJc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};TT(1462,1,{},CJc);_.mc=function DJc(){return fTc};TT(1465,728,kMc,HJc);_.Kd=function IJc(){UHb(this,lSc,new $Lb((sMb(),kMb)));UHb(this,zTc,new _Lb(eMb,new tjb(0.001953125)));UHb(this,LTc,new _Lb(eMb,new tjb(0.35)))};var JJc;TT(1466,1,{},OJc);_.Nd=function PJc(){return XJc(),MJc};_.Od=function QJc(){return YJc(),NJc};var MJc,NJc;TT(1467,1,{},SJc);_.mc=function TJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};TT(1468,1,{},VJc);_.mc=function WJc(){return fTc};var rO=hjb(BRc,'TerrainDynamic$DemoScene',1233),nO=hjb(BRc,'TerrainDynamic$DemoScene$1',1234),oO=hjb(BRc,'TerrainDynamic$DemoScene$2',1235),pO=hjb(BRc,'TerrainDynamic$DemoScene$3',1236),qO=hjb(BRc,'TerrainDynamic$DemoScene$4',1237),UQ=hjb(hTc,PTc,1459),SO=hjb(rRc,'TerrainShader',1328),wQ=hjb(hTc,'BleachBypassShader',1423),MQ=hjb(hTc,'HorizontalTiltShiftShader',1447),YQ=hjb(hTc,'VerticalTiltShiftShader',1465),uO=hjb(BRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1238),sO=hjb(BRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1239),tO=hjb(BRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1240),TQ=hjb(hTc,QTc,1460),RQ=hjb(hTc,RTc,1461),SQ=hjb(hTc,STc,1462),RO=hjb(rRc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1329),PO=hjb(rRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1330),QO=hjb(rRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1331),vQ=hjb(hTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1424),tQ=hjb(hTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1425),uQ=hjb(hTc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1426),LQ=hjb(hTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1448),JQ=hjb(hTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1449),KQ=hjb(hTc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1450),XQ=hjb(hTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1466),VQ=hjb(hTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1467),WQ=hjb(hTc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1468),QQ=hjb(hTc,'LuminosityShader',1453),PQ=hjb(hTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1454),NQ=hjb(hTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1455),OQ=hjb(hTc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1456);LMc(xi)(39);