function Bsc(){}
function Fsc(){}
function Isc(){}
function Wvc(){}
function $vc(){}
function bwc(){}
function JGc(){}
function NGc(){}
function QGc(){}
function dIc(){}
function hIc(){}
function kIc(){}
function wIc(){}
function AIc(){}
function DIc(){}
function PIc(){}
function TIc(){}
function WIc(){}
function gJc(){}
function kJc(){}
function nJc(){}
function OYb(a,b){a.b=b}
function J7b(a,b){a.k=b}
function nGc(a,b){tqb(a.b,b)}
function osc(a){this.a=a}
function rsc(a){this.a=a}
function usc(a){this.a=a}
function xsc(){xsc=hKc;wsc=new Bsc}
function Ksc(){Ksc=hKc;zsc=new Fsc}
function Lsc(){Lsc=hKc;Asc=new Isc}
function Svc(){Svc=hKc;Rvc=new Wvc}
function dwc(){dwc=hKc;Uvc=new $vc}
function ewc(){ewc=hKc;Vvc=new bwc}
function FGc(){FGc=hKc;EGc=new JGc}
function SGc(){SGc=hKc;HGc=new NGc}
function TGc(){TGc=hKc;IGc=new QGc}
function _Hc(){_Hc=hKc;$Hc=new dIc}
function mIc(){mIc=hKc;bIc=new hIc}
function nIc(){nIc=hKc;cIc=new kIc}
function sIc(){sIc=hKc;rIc=new wIc}
function FIc(){FIc=hKc;uIc=new AIc}
function GIc(){GIc=hKc;vIc=new DIc}
function LIc(){LIc=hKc;KIc=new PIc}
function YIc(){YIc=hKc;NIc=new TIc}
function ZIc(){ZIc=hKc;OIc=new WIc}
function cJc(){cJc=hKc;bJc=new gJc}
function pJc(){pJc=hKc;eJc=new kJc}
function qJc(){qJc=hKc;fJc=new nJc}
function lsc(a,b){this.a=a;this.b=b}
function Nvc(){CIb.call(this,(Svc(),Rvc))}
function CGc(){CIb.call(this,(FGc(),EGc))}
function YHc(){CIb.call(this,(_Hc(),$Hc))}
function pIc(){CIb.call(this,(sIc(),rIc))}
function IIc(){CIb.call(this,(LIc(),KIc))}
function _Ic(){CIb.call(this,(cJc(),bJc))}
function esc(a){a.w+=1;a.w==3&&xPb(a.v,true)}
function fsc(){J9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function dsc(a,b,c,d){var e,f,g;g=new u2b(b);QMb(su(RRb(mZb(g).i,xRc),225),c);f=new o8b;e=new B7b(new GWb(a.u,a.t),g);_5b(e._,-500);mPb(f,e);RGb(a.G.k,f,a.c,d,true)}
function csc(a,b,c,d,e,f){var g,i;g=new m0b;f0b(g,new i3b(16755285));g.j=true;k0b(g,(e$b(),b$b));i=new L7b(b,g);i.d=c;J7b(i,Au(600*Wkb()));Z5b(i._,d,e,f);w3b(i.cb,1.5707963267948966);i.S=true;i.U=true;mPb(a.H,i);tqb(a.n,i)}
var NSc='enableDiffuse1',OSc='enableDiffuse2',GSc='h',ISc='heightMap',TSc='heightmap',SSc='offset',USc='r',MSc='tDetail',KSc='tDiffuse1',LSc='tDiffuse2',QSc='uRepeatOverlay',HSc='v';bU(1240,1,SLc);_.zb=function asc(){j9b(this.b,new fsc(this.a))};bU(1241,974,{78:1,186:1,338:1},fsc);_.Ud=function gsc(a){esc(this)};_.Gd=function hsc(a){this.u=a.a.Z;this.t=a.a.Y;QMb(su(RRb(mZb(this.f.b).i,GSc),225),new Pjb(6/this.u));QMb(su(RRb(mZb(this.D.b).i,HSc),225),new Pjb(6/this.t))};_.nb=function isc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;gt((Jxb(),Ixb),(Txb(),Sxb),this);this.b=new pQb(40,FGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new aQb(this.u,this.t,-10000,10000);Z5b(this.b._,-1200,800,1200);_5b(this.c._,100);this.s=new o8b;mPb(this.s,this.c);this.d=new Owb(this.b,this.G.c);Y5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Lwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Jwb(this.d,0.15);m8b(this.H,new c8b(328965,2000,4000));mPb(this.H,new WXb(1118481));this.e=new xYb(16777215,1.15);Z5b(this.e._,500,2000,0);mPb(this.H,this.e);this.q=new QYb(16729088,1.5,0);Y5b(this.q._,0);mPb(this.H,this.q);this.g=new mOb(256,256);ENb(this.g,(qEb(),lEb));CNb(this.g,(fEb(),dEb));zNb(this.g,(BCb(),zCb));ANb(this.g,false);this.o=new mOb(256,256);ENb(this.o,lEb);CNb(this.o,dEb);zNb(this.o,zCb);ANb(this.o,false);n=new IIc;u=n.i;QMb(su(u.a[mOc],225),new Pjb(0.05));l5b(su(su(u.a[bSc],225).d,297),256,256);QMb(su(u.a[ISc],225),this.g);s=new mOb(2048,2048);ENb(s,lEb);CNb(s,dEb);zNb(s,zCb);s.r=false;LNb(s,(IFb(),HFb));MNb(s,HFb);c=new SNb('./static/textures/terrain/grasslight-big.jpg',new lsc(this,s));LNb(c,HFb);MNb(c,HFb);d=new SNb('./static/textures/terrain/backgrounddetailed6.jpg',this);LNb(d,HFb);MNb(d,HFb);b=new SNb('./static/textures/terrain/grasslight-big-nm.jpg',this);LNb(b,HFb);MNb(b,HFb);t=new Nvc;this.B=t.i;QMb(su(RRb(this.B,XRc),225),this.o);QMb(su(RRb(this.B,YRc),225),new Pjb(3.5));QMb(su(RRb(this.B,JSc),225),this.g);QMb(su(RRb(this.B,KSc),225),c);QMb(su(RRb(this.B,LSc),225),d);QMb(su(RRb(this.B,ZRc),225),s);QMb(su(RRb(this.B,MSc),225),b);QMb(su(RRb(this.B,NSc),225),(Qib(),Qib(),Pib));QMb(su(RRb(this.B,OSc),225),Pib);QMb(su(RRb(this.B,vRc),225),Pib);f3b(su(su(RRb(this.B,BRc),225).d,293),16777215);f3b(su(su(RRb(this.B,CRc),225).d,293),16777215);f3b(su(su(RRb(this.B,ARc),225).d,293),1118481);QMb(su(RRb(this.B,aSc),225),new Pjb(30));QMb(su(RRb(this.B,PSc),225),new Pjb(375));l5b(su(su(RRb(this.B,QSc),225).d,297),6,6);this.A=new ltb;Job(this.A,eSc,new SMb((jNb(),XMb),new Pjb(1)));Job(this.A,RSc,new SMb(dNb,new p5b(1.5,1.5)));Job(this.A,SSc,new SMb(dNb,new p5b(0,0)));this.k=new ltb;i=new t2b((xsc(),wsc));xIb(mZb(i),this.A);i.c=false;i.b=true;Job(this.k,TSc,i);j=new u2b(n);xIb(mZb(j),u);j.c=false;j.b=true;Job(this.k,rRc,j);k=new u2b(t);xIb(mZb(k),this.B);k.c=true;k.b=true;Job(this.k,'terrain',k);o=new GWb(this.u,this.t);p=new t_b;n_b(p,new i3b(0));this.r=new B7b(o,p);_5b(this.r._,-500);mPb(this.s,this.r);g=new HWb(6000,6000,64,64);WQb(g);this.v=new B7b(g,k);Z5b(this.v._,0,-125,0);v3b(this.v.cb,-1.5707963267948966);xPb(this.v,false);mPb(this.H,this.v);bHb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;ZGb(this.G.k,false);q=new wGc(this.H,this.b);f=new hGc(0.6);e=new zGc(new CGc);QMb(su(RRb(mZb(e.b).i,HRc),225),new Pjb(0.65));this.f=new zGc(new YHc);this.D=new zGc(new _Ic);QMb(su(RRb(mZb(this.f.b).i,GSc),225),new Pjb(6/this.u));QMb(su(RRb(mZb(this.D.b).i,HSc),225),new Pjb(6/this.t));QMb(su(RRb(mZb(this.f.b).i,USc),225),new Pjb(0.5));QMb(su(RRb(mZb(this.D.b).i,USc),225),new Pjb(0.5));this.D.a=true;r=new mOb(this.u,this.t);ENb(s,kEb);CNb(s,dEb);zNb(s,zCb);s.f=false;s.r=false;a=new pGc(this.G.k,r);tqb(a.b,q);tqb(a.b,f);tqb(a.b,e);nGc(a,this.f);nGc(a,this.D);this.n=new Dqb;new Vwc('./static/models/animated/parrot.js',new osc(this));new Vwc(FSc,new rsc(this));new Vwc('./static/models/animated/stork.js',new usc(this));this.p=rh()};_.ob=function jsc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Mwb(this.d);this.j=F3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;e3b(this.H.a.c,0.1,e,this.j);bHb(this.G.k,this.H.a.c,1);eYb(this.e,0.1+f*1.0499999999999998);OYb(this.q,0.9+f*0.6);QMb(su(RRb(this.B,YRc),225),new Pjb(0.6+f*2.9));if(this.C){this.a=F3b(this.a+-7.5E-4,0,0.05);QMb(su(Eob(this.A,eSc),225),new Pjb(su(su(Eob(this.A,eSc),225).d,150).a+b*this.a));h5b(su(su(Eob(this.A,SSc),225).d,297),b*0.05);m5b(su(su(RRb(this.B,VSc),225).d,297),4*su(su(Eob(this.A,SSc),225).d,297).c);_Sb(this.r,su(Eob(this.k,TSc),282));RGb(this.G.k,this.s,this.c,this.g,true);_Sb(this.r,su(Eob(this.k,rRc),282));RGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=su(wqb(this.n,c),305);K7b(d,Au(1000*b));h5b(d._,d.d*b);d._.c>2000&&m5b(d._,-1500-Wkb()*500)}RGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;bU(1242,1,{},lsc);_.Ud=function msc(a){esc(this.a);dsc(this.a,new pIc,a,this.b)};bU(1243,1,{},osc);_.Af=function psc(a,b){Qwc((su(a,339),su(b,242)));csc(this.a,su(b,242),500,-3500,500,700);csc(this.a,su(b,242),500,-3000-Wkb()*500,500,-200);csc(this.a,su(b,242),500,-3000-Wkb()*500,500,200);csc(this.a,su(b,242),500,-3000-Wkb()*500,500,1000)};bU(1244,1,{},rsc);_.Af=function ssc(a,b){Qwc((su(a,339),su(b,242)));csc(this.a,su(b,242),1000,-3000-Wkb()*500,350,40)};bU(1245,1,{},usc);_.Af=function vsc(a,b){Qwc((su(a,339),su(b,242)));csc(this.a,su(b,242),1000,-3000-Wkb()*500,350,340)};var wsc;bU(1246,1,{},Bsc);_.Od=function Csc(){return Ksc(),zsc};_.Pd=function Dsc(){return Lsc(),Asc};var zsc,Asc;bU(1247,1,{},Fsc);_.nc=function Gsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};bU(1248,1,{},Isc);_.nc=function Jsc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};bU(1306,732,FLc,Nvc);_.Ld=function Ovc(){xIb(this,nNb());xIb(this,oNb());xIb(this,pNb());qIb(this,NSc,new SMb((jNb(),$Mb),(Qib(),Qib(),Oib)));qIb(this,OSc,new SMb($Mb,Oib));qIb(this,vRc,new SMb($Mb,Oib));qIb(this,WSc,new SMb($Mb,Oib));qIb(this,KSc,new RMb(bNb));qIb(this,LSc,new RMb(bNb));qIb(this,MSc,new RMb(bNb));qIb(this,XRc,new RMb(bNb));qIb(this,ZRc,new RMb(bNb));qIb(this,JSc,new RMb(bNb));qIb(this,YRc,new SMb(XMb,new Pjb(1)));qIb(this,XSc,new SMb(XMb,new Pjb(0)));qIb(this,PSc,new SMb(XMb,new Pjb(1)));qIb(this,BRc,new SMb(WMb,new i3b(15658734)));qIb(this,CRc,new SMb(WMb,new i3b(1118481)));qIb(this,ARc,new SMb(WMb,new i3b(328965)));qIb(this,aSc,new SMb(XMb,new Pjb(30)));qIb(this,HRc,new SMb(XMb,new Pjb(1)));qIb(this,'uRepeatBase',new SMb(dNb,new p5b(1,1)));qIb(this,QSc,new SMb(dNb,new p5b(1,1)));qIb(this,VSc,new SMb(dNb,new p5b(0,0)))};_.Md=function Pvc(a){var b,c;c=new _qb(iu($R,mKc,1,[IRc,JRc]));b=new _qb(iu($R,mKc,1,[LRc,MRc,NRc]));zIb(this,HIb(a,iu(bS,mKc,173,[c,b])))};_.Nd=function Qvc(a){var b,c;c=new _qb(iu($R,mKc,1,[ORc]));b=new _qb(iu($R,mKc,1,[PRc]));AIb(this,HIb(a,iu(bS,mKc,173,[c,b])))};var Rvc;bU(1307,1,{},Wvc);_.Od=function Xvc(){return dwc(),Uvc};_.Pd=function Yvc(){return ewc(),Vvc};var Uvc,Vvc;bU(1308,1,{},$vc);_.nc=function _vc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};bU(1309,1,{},bwc);_.nc=function cwc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};bU(1401,732,FLc,CGc);_.Ld=function DGc(){qIb(this,xRc,new RMb((jNb(),bNb)));qIb(this,HRc,new SMb(XMb,new Pjb(1)))};var EGc;bU(1402,1,{},JGc);_.Od=function KGc(){return SGc(),HGc};_.Pd=function LGc(){return TGc(),IGc};var HGc,IGc;bU(1403,1,{},NGc);_.nc=function OGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};bU(1404,1,{},QGc);_.nc=function RGc(){return mSc};bU(1425,732,FLc,YHc);_.Ld=function ZHc(){qIb(this,xRc,new RMb((jNb(),bNb)));qIb(this,GSc,new SMb(XMb,new Pjb(0.001953125)));qIb(this,USc,new SMb(XMb,new Pjb(0.35)))};var $Hc;bU(1426,1,{},dIc);_.Od=function eIc(){return mIc(),bIc};_.Pd=function fIc(){return nIc(),cIc};var bIc,cIc;bU(1427,1,{},hIc);_.nc=function iIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};bU(1428,1,{},kIc);_.nc=function lIc(){return mSc};bU(1431,732,FLc,pIc);_.Ld=function qIc(){qIb(this,xRc,new RMb((jNb(),bNb)))};var rIc;bU(1432,1,{},wIc);_.Od=function xIc(){return FIc(),uIc};_.Pd=function yIc(){return GIc(),vIc};var uIc,vIc;bU(1433,1,{},AIc);_.nc=function BIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};bU(1434,1,{},DIc);_.nc=function EIc(){return mSc};bU(1437,732,FLc,IIc);_.Ld=function JIc(){qIb(this,ISc,new RMb((jNb(),bNb)));qIb(this,bSc,new SMb(dNb,new p5b(512,512)));qIb(this,RSc,new SMb(dNb,new p5b(1,1)));qIb(this,mOc,new SMb(XMb,new Pjb(0.05)))};var KIc;bU(1438,1,{},PIc);_.Od=function QIc(){return YIc(),NIc};_.Pd=function RIc(){return ZIc(),OIc};var NIc,OIc;bU(1439,1,{},TIc);_.nc=function UIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};bU(1440,1,{},WIc);_.nc=function XIc(){return mSc};bU(1443,732,FLc,_Ic);_.Ld=function aJc(){qIb(this,xRc,new RMb((jNb(),bNb)));qIb(this,HSc,new SMb(XMb,new Pjb(0.001953125)));qIb(this,USc,new SMb(XMb,new Pjb(0.35)))};var bJc;bU(1444,1,{},gJc);_.Od=function hJc(){return pJc(),eJc};_.Pd=function iJc(){return qJc(),fJc};var eJc,fJc;bU(1445,1,{},kJc);_.nc=function lJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};bU(1446,1,{},nJc);_.nc=function oJc(){return mSc};var pO=Djb(OQc,'TerrainDynamic$DemoScene',1241),lO=Djb(OQc,'TerrainDynamic$DemoScene$1',1242),mO=Djb(OQc,'TerrainDynamic$DemoScene$2',1243),nO=Djb(OQc,'TerrainDynamic$DemoScene$3',1244),oO=Djb(OQc,'TerrainDynamic$DemoScene$4',1245),cR=Djb(oSc,YSc,1437),aP=Djb(EQc,'TerrainShader',1306),GQ=Djb(oSc,'BleachBypassShader',1401),WQ=Djb(oSc,'HorizontalTiltShiftShader',1425),gR=Djb(oSc,'VerticalTiltShiftShader',1443),sO=Djb(OQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1246),qO=Djb(OQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1247),rO=Djb(OQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1248),bR=Djb(oSc,ZSc,1438),_Q=Djb(oSc,$Sc,1439),aR=Djb(oSc,_Sc,1440),_O=Djb(EQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1307),ZO=Djb(EQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1308),$O=Djb(EQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1309),FQ=Djb(oSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1402),DQ=Djb(oSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1403),EQ=Djb(oSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1404),VQ=Djb(oSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1426),TQ=Djb(oSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1427),UQ=Djb(oSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1428),fR=Djb(oSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1444),dR=Djb(oSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1445),eR=Djb(oSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1446),$Q=Djb(oSc,'LuminosityShader',1431),ZQ=Djb(oSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1432),XQ=Djb(oSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1433),YQ=Djb(oSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1434);eMc(xi)(38);