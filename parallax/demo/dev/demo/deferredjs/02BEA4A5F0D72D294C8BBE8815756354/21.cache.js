function KLb(){}
function OLb(){}
function RLb(){}
function GLb(){GLb=PQc;FLb=new KLb}
function TLb(){TLb=PQc;ILb=new OLb}
function ULb(){ULb=PQc;JLb=new RLb}
function DLb(){UJb.call(this,(GLb(),FLb))}
function Kmc(){Wac.call(this);this.d=0;this.e=0}
WU(751,727,nSc,DLb);_.Od=function ELb(){IJb(this,'mRefractionRatio',new iOb((BOb(),nOb),new Bkb(1.02)));IJb(this,'mFresnelBias',new iOb(nOb,new Bkb(0.1)));IJb(this,'mFresnelPower',new iOb(nOb,new Bkb(2)));IJb(this,'mFresnelScale',new iOb(nOb,new Bkb(1)));IJb(this,EYc,new hOb(tOb))};var FLb;WU(752,1,{},KLb);_.Rd=function LLb(){return TLb(),ILb};_.Sd=function MLb(){return ULb(),JLb};var ILb,JLb;WU(753,1,{},OLb);_.qc=function PLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};WU(754,1,{},RLb);_.qc=function SLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};WU(1135,1,ASc);_.Db=function Imc(){wac(this.c,new Kmc(this.b))};WU(1136,969,{328:1},Kmc);_.ob=function Lmc(){var a,b,c,d,e,f,g,i,j;this.b=new FRb(60,XHb(this.H.n),1,100000);n7b(this.b.ab,3200);this.c=new FRb(60,XHb(this.H.n),1,100000);this.f=new C9b;a=new aYb(100,32,16);j=new qPb('./static/textures/cube/park2/*.jpg');ROb(j,(sDb(),qDb));g=new DLb;gOb(Eu(dTb(g.j,EYc),227),j);c=new I3b(g);this.g=new orb;for(b=0;b<500;b++){e=new P8b(a,c);A6b(e.ab,Ilb()*10000-5000);B6b(e.ab,Ilb()*10000-5000);n7b(e.ab,Ilb()*10000-5000);k7b(e.fb,Ilb()*3+1);EQb(this.I,e);erb(this.g,e)}this.I.X=false;i=new uKb;gOb(Eu(dTb(i.j,EYc),227),j);f=new I3b(i);L$b(f,(x0b(),u0b));d=new P8b(new lXb(100000,100000,100000),f);EQb(this.f,d);pIb(this.H.n,false)};_.pb=function Mmc(a){var b,c,d,e;e=1.0E-4*a;v6b(this.b.ab,(this.d-this.b.ab.d)*0.05);w6b(this.b.ab,(-this.e-this.b.ab.e)*0.05);bRb(this.b,this.I.ab);D4b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Eu(hrb(this.g,b),305);A6b(d.ab,5000*Math.cos(e+b));B6b(d.ab,5000*Math.sin(e+b*1.1))}QHb(this.H.n,true);hIb(this.H.n,this.f,this.c,null,false);hIb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var PM=pkb(wXc,'MaterialsCubemapFresnel$DemoScene',1136),pG=pkb(FYc,'FresnelShader',751),oG=pkb(FYc,'FresnelShader_Resources_default_InlineClientBundleGenerator',752),mG=pkb(FYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',753),nG=pkb(FYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',754);OSc(Hi)(21);