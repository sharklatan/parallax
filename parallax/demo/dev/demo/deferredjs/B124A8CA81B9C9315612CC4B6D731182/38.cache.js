function osc(){}
function ssc(){}
function vsc(){}
function Jvc(){}
function Nvc(){}
function Qvc(){}
function wGc(){}
function AGc(){}
function DGc(){}
function SHc(){}
function WHc(){}
function ZHc(){}
function ZIc(){}
function jIc(){}
function nIc(){}
function qIc(){}
function CIc(){}
function GIc(){}
function JIc(){}
function VIc(){}
function aJc(){}
function CYb(a,b){a.b=b}
function x7b(a,b){a.k=b}
function aGc(a,b){hqb(a.b,b)}
function bsc(a){this.a=a}
function esc(a){this.a=a}
function hsc(a){this.a=a}
function ksc(){ksc=WJc;jsc=new osc}
function xsc(){xsc=WJc;msc=new ssc}
function ysc(){ysc=WJc;nsc=new vsc}
function Fvc(){Fvc=WJc;Evc=new Jvc}
function Svc(){Svc=WJc;Hvc=new Nvc}
function Tvc(){Tvc=WJc;Ivc=new Qvc}
function sGc(){sGc=WJc;rGc=new wGc}
function FGc(){FGc=WJc;uGc=new AGc}
function GGc(){GGc=WJc;vGc=new DGc}
function OHc(){OHc=WJc;NHc=new SHc}
function _Hc(){_Hc=WJc;QHc=new WHc}
function aIc(){aIc=WJc;RHc=new ZHc}
function fIc(){fIc=WJc;eIc=new jIc}
function sIc(){sIc=WJc;hIc=new nIc}
function tIc(){tIc=WJc;iIc=new qIc}
function yIc(){yIc=WJc;xIc=new CIc}
function LIc(){LIc=WJc;AIc=new GIc}
function MIc(){MIc=WJc;BIc=new JIc}
function RIc(){RIc=WJc;QIc=new VIc}
function cJc(){cJc=WJc;TIc=new ZIc}
function dJc(){dJc=WJc;UIc=new aJc}
function $rc(a,b){this.a=a;this.b=b}
function Avc(){qIb.call(this,(Fvc(),Evc))}
function pGc(){qIb.call(this,(sGc(),rGc))}
function LHc(){qIb.call(this,(OHc(),NHc))}
function cIc(){qIb.call(this,(fIc(),eIc))}
function vIc(){qIb.call(this,(yIc(),xIc))}
function OIc(){qIb.call(this,(RIc(),QIc))}
function Trc(a){a.w+=1;a.w==3&&lPb(a.v,true)}
function Urc(){x9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Src(a,b,c,d){var e,f,g;g=new i2b(b);EMb(pu(FRb(aZb(g).i,jRc),225),c);f=new c8b;e=new p7b(new uWb(a.u,a.t),g);P5b(e._,-500);aPb(f,e);FGb(a.G.k,f,a.c,d,true)}
function Rrc(a,b,c,d,e,f){var g,i;g=new a0b;V_b(g,new Y2b(16755285));g.j=true;$_b(g,(UZb(),RZb));i=new z7b(b,g);i.d=c;x7b(i,xu(600*Kkb()));N5b(i._,d,e,f);k3b(i.cb,1.5707963267948966);i.S=true;i.U=true;aPb(a.H,i);hqb(a.n,i)}
var zSc='enableDiffuse1',ASc='enableDiffuse2',sSc='h',uSc='heightMap',FSc='heightmap',ESc='offset',GSc='r',ySc='tDetail',wSc='tDiffuse1',xSc='tDiffuse2',CSc='uRepeatOverlay',tSc='v';YT(1237,1,FLc);_.zb=function Prc(){Z8b(this.b,new Urc(this.a))};YT(1238,971,{78:1,186:1,338:1},Urc);_.Ud=function Vrc(a){Trc(this)};_.Gd=function Wrc(a){this.u=a.a.Z;this.t=a.a.Y;EMb(pu(FRb(aZb(this.f.b).i,sSc),225),new Djb(6/this.u));EMb(pu(FRb(aZb(this.D.b).i,tSc),225),new Djb(6/this.t))};_.nb=function Xrc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;et((xxb(),wxb),(Hxb(),Gxb),this);this.b=new dQb(40,tGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new QPb(this.u,this.t,-10000,10000);N5b(this.b._,-1200,800,1200);P5b(this.c._,100);this.s=new c8b;aPb(this.s,this.c);this.d=new Cwb(this.b,this.G.c);M5b(this.d.v,0);this.d.s=1;this.d.A=1.2;zwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;xwb(this.d,0.15);a8b(this.H,new S7b(328965,2000,4000));aPb(this.H,new KXb(1118481));this.e=new lYb(16777215,1.15);N5b(this.e._,500,2000,0);aPb(this.H,this.e);this.q=new EYb(16729088,1.5,0);M5b(this.q._,0);aPb(this.H,this.q);this.g=new aOb(256,256);sNb(this.g,(eEb(),_Db));qNb(this.g,(VDb(),TDb));nNb(this.g,(pCb(),nCb));oNb(this.g,false);this.o=new aOb(256,256);sNb(this.o,_Db);qNb(this.o,TDb);nNb(this.o,nCb);oNb(this.o,false);n=new vIc;u=n.i;EMb(pu(u.a[_Nc],225),new Djb(0.05));_4b(pu(pu(u.a[PRc],225).d,297),256,256);EMb(pu(u.a[uSc],225),this.g);s=new aOb(2048,2048);sNb(s,_Db);qNb(s,TDb);nNb(s,nCb);s.r=false;zNb(s,(wFb(),vFb));ANb(s,vFb);c=new GNb('./static/textures/terrain/grasslight-big.jpg',new $rc(this,s));zNb(c,vFb);ANb(c,vFb);d=new GNb('./static/textures/terrain/backgrounddetailed6.jpg',this);zNb(d,vFb);ANb(d,vFb);b=new GNb('./static/textures/terrain/grasslight-big-nm.jpg',this);zNb(b,vFb);ANb(b,vFb);t=new Avc;this.B=t.i;EMb(pu(FRb(this.B,JRc),225),this.o);EMb(pu(FRb(this.B,KRc),225),new Djb(3.5));EMb(pu(FRb(this.B,vSc),225),this.g);EMb(pu(FRb(this.B,wSc),225),c);EMb(pu(FRb(this.B,xSc),225),d);EMb(pu(FRb(this.B,LRc),225),s);EMb(pu(FRb(this.B,ySc),225),b);EMb(pu(FRb(this.B,zSc),225),(Eib(),Eib(),Dib));EMb(pu(FRb(this.B,ASc),225),Dib);EMb(pu(FRb(this.B,hRc),225),Dib);V2b(pu(pu(FRb(this.B,nRc),225).d,293),16777215);V2b(pu(pu(FRb(this.B,oRc),225).d,293),16777215);V2b(pu(pu(FRb(this.B,mRc),225).d,293),1118481);EMb(pu(FRb(this.B,ORc),225),new Djb(30));EMb(pu(FRb(this.B,BSc),225),new Djb(375));_4b(pu(pu(FRb(this.B,CSc),225).d,297),6,6);this.A=new _sb;xob(this.A,SRc,new GMb((ZMb(),LMb),new Djb(1)));xob(this.A,DSc,new GMb(TMb,new d5b(1.5,1.5)));xob(this.A,ESc,new GMb(TMb,new d5b(0,0)));this.k=new _sb;i=new h2b((ksc(),jsc));lIb(aZb(i),this.A);i.c=false;i.b=true;xob(this.k,FSc,i);j=new i2b(n);lIb(aZb(j),u);j.c=false;j.b=true;xob(this.k,dRc,j);k=new i2b(t);lIb(aZb(k),this.B);k.c=true;k.b=true;xob(this.k,'terrain',k);o=new uWb(this.u,this.t);p=new h_b;b_b(p,new Y2b(0));this.r=new p7b(o,p);P5b(this.r._,-500);aPb(this.s,this.r);g=new vWb(6000,6000,64,64);KQb(g);this.v=new p7b(g,k);N5b(this.v._,0,-125,0);j3b(this.v.cb,-1.5707963267948966);lPb(this.v,false);aPb(this.H,this.v);RGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;NGb(this.G.k,false);q=new jGc(this.H,this.b);f=new WFc(0.6);e=new mGc(new pGc);EMb(pu(FRb(aZb(e.b).i,tRc),225),new Djb(0.65));this.f=new mGc(new LHc);this.D=new mGc(new OIc);EMb(pu(FRb(aZb(this.f.b).i,sSc),225),new Djb(6/this.u));EMb(pu(FRb(aZb(this.D.b).i,tSc),225),new Djb(6/this.t));EMb(pu(FRb(aZb(this.f.b).i,GSc),225),new Djb(0.5));EMb(pu(FRb(aZb(this.D.b).i,GSc),225),new Djb(0.5));this.D.a=true;r=new aOb(this.u,this.t);sNb(s,$Db);qNb(s,TDb);nNb(s,nCb);s.f=false;s.r=false;a=new cGc(this.G.k,r);hqb(a.b,q);hqb(a.b,f);hqb(a.b,e);aGc(a,this.f);aGc(a,this.D);this.n=new rqb;new Iwc('./static/models/animated/parrot.js',new bsc(this));new Iwc(rSc,new esc(this));new Iwc('./static/models/animated/stork.js',new hsc(this));this.p=rh()};_.ob=function Yrc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Awb(this.d);this.j=t3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;U2b(this.H.a.c,0.1,e,this.j);RGb(this.G.k,this.H.a.c,1);UXb(this.e,0.1+f*1.0499999999999998);CYb(this.q,0.9+f*0.6);EMb(pu(FRb(this.B,KRc),225),new Djb(0.6+f*2.9));if(this.C){this.a=t3b(this.a+-7.5E-4,0,0.05);EMb(pu(sob(this.A,SRc),225),new Djb(pu(pu(sob(this.A,SRc),225).d,150).a+b*this.a));X4b(pu(pu(sob(this.A,ESc),225).d,297),b*0.05);a5b(pu(pu(FRb(this.B,HSc),225).d,297),4*pu(pu(sob(this.A,ESc),225).d,297).c);PSb(this.r,pu(sob(this.k,FSc),282));FGb(this.G.k,this.s,this.c,this.g,true);PSb(this.r,pu(sob(this.k,dRc),282));FGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=pu(kqb(this.n,c),305);y7b(d,xu(1000*b));X4b(d._,d.d*b);d._.c>2000&&a5b(d._,-1500-Kkb()*500)}FGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;YT(1239,1,{},$rc);_.Ud=function _rc(a){Trc(this.a);Src(this.a,new cIc,a,this.b)};YT(1240,1,{},bsc);_.Af=function csc(a,b){Dwc((pu(a,339),pu(b,242)));Rrc(this.a,pu(b,242),500,-3500,500,700);Rrc(this.a,pu(b,242),500,-3000-Kkb()*500,500,-200);Rrc(this.a,pu(b,242),500,-3000-Kkb()*500,500,200);Rrc(this.a,pu(b,242),500,-3000-Kkb()*500,500,1000)};YT(1241,1,{},esc);_.Af=function fsc(a,b){Dwc((pu(a,339),pu(b,242)));Rrc(this.a,pu(b,242),1000,-3000-Kkb()*500,350,40)};YT(1242,1,{},hsc);_.Af=function isc(a,b){Dwc((pu(a,339),pu(b,242)));Rrc(this.a,pu(b,242),1000,-3000-Kkb()*500,350,340)};var jsc;YT(1243,1,{},osc);_.Od=function psc(){return xsc(),msc};_.Pd=function qsc(){return ysc(),nsc};var msc,nsc;YT(1244,1,{},ssc);_.nc=function tsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};YT(1245,1,{},vsc);_.nc=function wsc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};YT(1303,729,sLc,Avc);_.Ld=function Bvc(){lIb(this,bNb());lIb(this,cNb());lIb(this,dNb());eIb(this,zSc,new GMb((ZMb(),OMb),(Eib(),Eib(),Cib)));eIb(this,ASc,new GMb(OMb,Cib));eIb(this,hRc,new GMb(OMb,Cib));eIb(this,ISc,new GMb(OMb,Cib));eIb(this,wSc,new FMb(RMb));eIb(this,xSc,new FMb(RMb));eIb(this,ySc,new FMb(RMb));eIb(this,JRc,new FMb(RMb));eIb(this,LRc,new FMb(RMb));eIb(this,vSc,new FMb(RMb));eIb(this,KRc,new GMb(LMb,new Djb(1)));eIb(this,JSc,new GMb(LMb,new Djb(0)));eIb(this,BSc,new GMb(LMb,new Djb(1)));eIb(this,nRc,new GMb(KMb,new Y2b(15658734)));eIb(this,oRc,new GMb(KMb,new Y2b(1118481)));eIb(this,mRc,new GMb(KMb,new Y2b(328965)));eIb(this,ORc,new GMb(LMb,new Djb(30)));eIb(this,tRc,new GMb(LMb,new Djb(1)));eIb(this,'uRepeatBase',new GMb(TMb,new d5b(1,1)));eIb(this,CSc,new GMb(TMb,new d5b(1,1)));eIb(this,HSc,new GMb(TMb,new d5b(0,0)))};_.Md=function Cvc(a){var b,c;c=new Pqb(fu(VR,_Jc,1,[uRc,vRc]));b=new Pqb(fu(VR,_Jc,1,[xRc,yRc,zRc]));nIb(this,vIb(a,fu(YR,_Jc,173,[c,b])))};_.Nd=function Dvc(a){var b,c;c=new Pqb(fu(VR,_Jc,1,[ARc]));b=new Pqb(fu(VR,_Jc,1,[BRc]));oIb(this,vIb(a,fu(YR,_Jc,173,[c,b])))};var Evc;YT(1304,1,{},Jvc);_.Od=function Kvc(){return Svc(),Hvc};_.Pd=function Lvc(){return Tvc(),Ivc};var Hvc,Ivc;YT(1305,1,{},Nvc);_.nc=function Ovc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1306,1,{},Qvc);_.nc=function Rvc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1398,729,sLc,pGc);_.Ld=function qGc(){eIb(this,jRc,new FMb((ZMb(),RMb)));eIb(this,tRc,new GMb(LMb,new Djb(1)))};var rGc;YT(1399,1,{},wGc);_.Od=function xGc(){return FGc(),uGc};_.Pd=function yGc(){return GGc(),vGc};var uGc,vGc;YT(1400,1,{},AGc);_.nc=function BGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};YT(1401,1,{},DGc);_.nc=function EGc(){return $Rc};YT(1422,729,sLc,LHc);_.Ld=function MHc(){eIb(this,jRc,new FMb((ZMb(),RMb)));eIb(this,sSc,new GMb(LMb,new Djb(0.001953125)));eIb(this,GSc,new GMb(LMb,new Djb(0.35)))};var NHc;YT(1423,1,{},SHc);_.Od=function THc(){return _Hc(),QHc};_.Pd=function UHc(){return aIc(),RHc};var QHc,RHc;YT(1424,1,{},WHc);_.nc=function XHc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1425,1,{},ZHc);_.nc=function $Hc(){return $Rc};YT(1428,729,sLc,cIc);_.Ld=function dIc(){eIb(this,jRc,new FMb((ZMb(),RMb)))};var eIc;YT(1429,1,{},jIc);_.Od=function kIc(){return sIc(),hIc};_.Pd=function lIc(){return tIc(),iIc};var hIc,iIc;YT(1430,1,{},nIc);_.nc=function oIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};YT(1431,1,{},qIc);_.nc=function rIc(){return $Rc};YT(1434,729,sLc,vIc);_.Ld=function wIc(){eIb(this,uSc,new FMb((ZMb(),RMb)));eIb(this,PRc,new GMb(TMb,new d5b(512,512)));eIb(this,DSc,new GMb(TMb,new d5b(1,1)));eIb(this,_Nc,new GMb(LMb,new Djb(0.05)))};var xIc;YT(1435,1,{},CIc);_.Od=function DIc(){return LIc(),AIc};_.Pd=function EIc(){return MIc(),BIc};var AIc,BIc;YT(1436,1,{},GIc);_.nc=function HIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};YT(1437,1,{},JIc);_.nc=function KIc(){return $Rc};YT(1440,729,sLc,OIc);_.Ld=function PIc(){eIb(this,jRc,new FMb((ZMb(),RMb)));eIb(this,tSc,new GMb(LMb,new Djb(0.001953125)));eIb(this,GSc,new GMb(LMb,new Djb(0.35)))};var QIc;YT(1441,1,{},VIc);_.Od=function WIc(){return cJc(),TIc};_.Pd=function XIc(){return dJc(),UIc};var TIc,UIc;YT(1442,1,{},ZIc);_.nc=function $Ic(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1443,1,{},aJc);_.nc=function bJc(){return $Rc};var kO=rjb(AQc,'TerrainDynamic$DemoScene',1238),gO=rjb(AQc,'TerrainDynamic$DemoScene$1',1239),hO=rjb(AQc,'TerrainDynamic$DemoScene$2',1240),iO=rjb(AQc,'TerrainDynamic$DemoScene$3',1241),jO=rjb(AQc,'TerrainDynamic$DemoScene$4',1242),ZQ=rjb(aSc,KSc,1434),XO=rjb(qQc,'TerrainShader',1303),BQ=rjb(aSc,'BleachBypassShader',1398),RQ=rjb(aSc,'HorizontalTiltShiftShader',1422),bR=rjb(aSc,'VerticalTiltShiftShader',1440),nO=rjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1243),lO=rjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1244),mO=rjb(AQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1245),YQ=rjb(aSc,LSc,1435),WQ=rjb(aSc,MSc,1436),XQ=rjb(aSc,NSc,1437),WO=rjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1304),UO=rjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1305),VO=rjb(qQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1306),AQ=rjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1399),yQ=rjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1400),zQ=rjb(aSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1401),QQ=rjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1423),OQ=rjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1424),PQ=rjb(aSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1425),aR=rjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1441),$Q=rjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1442),_Q=rjb(aSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1443),VQ=rjb(aSc,'LuminosityShader',1428),UQ=rjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1429),SQ=rjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1430),TQ=rjb(aSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1431);TLc(xi)(38);