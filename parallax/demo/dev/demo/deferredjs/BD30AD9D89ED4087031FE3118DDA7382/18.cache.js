function jtc(){}
function ntc(){}
function qtc(){}
function Gxc(){}
function Kxc(){}
function Nxc(){}
function Fjc(a){this.a=a}
function ftc(){ftc=mMc;etc=new jtc}
function stc(){stc=mMc;htc=new ntc}
function ttc(){ttc=mMc;itc=new qtc}
function Cxc(){Cxc=mMc;Bxc=new Gxc}
function Pxc(){Pxc=mMc;Exc=new Kxc}
function Qxc(){Qxc=mMc;Fxc=new Nxc}
function xxc(){nIb.call(this,(Cxc(),Bxc))}
function ctc(){nIb.call(this,(ftc(),etc))}
function Bjc(){j9b.call(this);this.d=0;this.e=0}
function Ajc(a,b){var c,d,e,f,g,i;d=new CNb(uTc);d.k=4;P4b(d.B,0.998,0.998);P4b(d.A,0.001,0.001);wNb(d,(tFb(),sFb));xNb(d,sFb);kNb(d,(mCb(),kCb));e=new CNb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');P4b(e.B,0.998,0.998);P4b(e.A,0.001,0.001);wNb(e,sFb);xNb(e,sFb);kNb(e,kCb);c=new CNb('./static/models/obj/leeperrysmith/Map-COL.jpg');P4b(c.B,0.998,0.998);P4b(c.A,0.001,0.001);wNb(c,sFb);xNb(c,sFb);kNb(c,kCb);g=new xxc;i=g.i;BMb(qu(i.a[wTc],225),(Cib(),Cib(),Bib));BMb(qu(i.a[xTc],225),Bib);BMb(qu(i.a[yTc],225),a.b.e);BMb(qu(i.a[zTc],225),c);BMb(qu(i.a[ATc],225),d);BMb(qu(i.a[BTc],225),e);J2b(qu(qu(i.a[CTc],225).d,292),10526880);J2b(qu(qu(i.a[DTc],225).d,292),10526880);J2b(qu(qu(i.a[ETc],225).d,292),10526880);BMb(qu(i.a[FTc],225),new Bjb(0.145));BMb(qu(i.a[GTc],225),new Bjb(0.75));BMb(qu(i.a[HTc],225),new Bjb(16));p6b(qu(qu(i.a[ITc],225).d,300),0.001,0.001,0.998,0.998);f=new Y1b(g);f.c=true;a.c=new d7b(b,f);R4b(a.c._,-50);A5b(a.c.eb,100);cPb(a.c,true);a.c.U=true;ZOb(a.H,a.c)}
var wTc='enableBump',yTc='tBeckmann',FTc='uRoughness',GTc='uSpecularBrightness';YT(1116,1,WNc);_.zb=function yjc(){L8b(this.b,new Bjc(this.a))};YT(1117,971,{322:1},Bjc);_.nb=function Cjc(){var a,b,c,d,e,f,g;this.a=new ZPb(27,qGb(this.G.k),1,10000);D5b(this.a._,1200);ZOb(this.H,new yXb(5592405));d=new sYb(16777215,1.5,1000);B5b(d._,0,0,600);ZOb(this.H,d);f=new AYb(1);B5b(f._,0.05,0.05,1);ZOb(this.H,f);f._.lf(700);f.S=true;f.t=true;f.I=2048;f.G=2048;f.A=200;f.w=1500;f.d=40;f.u=-0.005;f.D=0.15;a=new _Xb(16777215,0.85);B5b(a._,1,-0.5,1);I2b(a.L,0.6,1,0.85);ZOb(this.H,a);a._.lf(500);a.S=true;a.I=2048;a.G=2048;a.A=200;a.w=1500;a.e=-500;a.f=500;a.g=500;a.d=-500;a.u=-0.005;a.D=0.15;b=new _Xb(16777215,0.85);B5b(b._,1,-0.5,-1);ZOb(this.H,b);new EIc(new ctc);c=new EIc(new rJc);c.a=true;g=new ZNb(512,512);pNb(g,(bEb(),XDb));nNb(g,(SDb(),QDb));kNb(g,(mCb(),kCb));g.f=false;this.b=new uIc(this.G.k,g);new $yc(vTc,new Fjc(this));OGb(this.G.k,new M2b(5001561),1);e=new HFb(this.G.k,this.H);e.g=false;KGb(this.G.k,false);this.G.k.ab=true;this.G.k.bb=true};_.ob=function Djc(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){S2b(this.c.cb,0.05*(b-this.c.cb.d));R2b(this.c.cb,0.05*(c-this.c.cb.c))}jGb(this.G.k,true);CGb(this.G.k,this.H,this.a,null,false)};_.d=0;_.e=0;YT(1118,1,{},Fjc);_.yf=function Gjc(a,b){Ajc(this.a,qu(b,241))};YT(1246,729,JNc,ctc);_.Kd=function dtc(){};var etc;YT(1247,1,{},jtc);_.Nd=function ktc(){return stc(),htc};_.Od=function ltc(){return ttc(),itc};var htc,itc;YT(1248,1,{},ntc);_.mc=function otc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};YT(1249,1,{},qtc);_.mc=function rtc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};YT(1343,729,JNc,xxc);_.Kd=function yxc(){iIb(this,$Mb());iIb(this,_Mb());iIb(this,aNb());bIb(this,wTc,new DMb((WMb(),LMb),hkb(0)));bIb(this,xTc,new DMb(LMb,hkb(0)));bIb(this,zTc,new CMb(OMb));bIb(this,yTc,new CMb(OMb));bIb(this,DTc,new DMb(HMb,new M2b(15658734)));bIb(this,ETc,new DMb(HMb,new M2b(1118481)));bIb(this,CTc,new DMb(HMb,new M2b(328965)));bIb(this,JTc,new DMb(IMb,new Bjb(1)));bIb(this,FTc,new DMb(IMb,new Bjb(0.15)));bIb(this,GTc,new DMb(IMb,new Bjb(0.75)));bIb(this,ATc,new CMb(OMb));bIb(this,HTc,new DMb(IMb,new Bjb(1)));bIb(this,BTc,new CMb(OMb));bIb(this,ITc,new DMb(UMb,new t6b(0,0,1,1)));bIb(this,'uWrapRGB',new DMb(SMb,new H5b(0.75,0.375,0.1875)))};_.Ld=function zxc(a){var b,c;c=new Mqb(gu(VR,rMc,1,[KTc,LTc,MTc]));b=new Mqb(gu(VR,rMc,1,[NTc,OTc,PTc]));kIb(this,sIb(a,gu(YR,rMc,173,[c,b])))};_.Md=function Axc(a){var b,c;c=new Mqb(gu(VR,rMc,1,[QTc]));b=new Mqb(gu(VR,rMc,1,[RTc]));lIb(this,sIb(a,gu(YR,rMc,173,[c,b])))};var Bxc;YT(1344,1,{},Gxc);_.Nd=function Hxc(){return Pxc(),Exc};_.Od=function Ixc(){return Qxc(),Fxc};var Exc,Fxc;YT(1345,1,{},Kxc);_.mc=function Lxc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1346,1,{},Nxc);_.mc=function Oxc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var cM=pjb(MSc,'MaterialsBumpmapSkin$DemoScene',1117),bM=pjb(MSc,'MaterialsBumpmapSkin$DemoScene$1',1118),sO=pjb(FSc,'BeckmannShader',1246),rO=pjb(FSc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1247),pO=pjb(FSc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1248),qO=pjb(FSc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1249),TO=pjb(FSc,'SkinSimpleShader',1343),SO=pjb(FSc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1344),QO=pjb(FSc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1345),RO=pjb(FSc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1346);iOc(xi)(18);