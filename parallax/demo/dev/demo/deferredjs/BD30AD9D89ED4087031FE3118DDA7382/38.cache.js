function Ssc(){}
function Wsc(){}
function Zsc(){}
function _xc(){}
function dyc(){}
function gyc(){}
function OIc(){}
function SIc(){}
function VIc(){}
function iKc(){}
function mKc(){}
function pKc(){}
function BKc(){}
function FKc(){}
function IKc(){}
function UKc(){}
function YKc(){}
function _Kc(){}
function lLc(){}
function pLc(){}
function sLc(){}
function qYb(a,b){a.b=b}
function l7b(a,b){a.k=b}
function sIc(a,b){eqb(a.b,b)}
function Fsc(a){this.a=a}
function Isc(a){this.a=a}
function Lsc(a){this.a=a}
function Osc(){Osc=mMc;Nsc=new Ssc}
function _sc(){_sc=mMc;Qsc=new Wsc}
function atc(){atc=mMc;Rsc=new Zsc}
function Xxc(){Xxc=mMc;Wxc=new _xc}
function XIc(){XIc=mMc;MIc=new SIc}
function KIc(){KIc=mMc;JIc=new OIc}
function YIc(){YIc=mMc;NIc=new VIc}
function iyc(){iyc=mMc;Zxc=new dyc}
function jyc(){jyc=mMc;$xc=new gyc}
function eKc(){eKc=mMc;dKc=new iKc}
function rKc(){rKc=mMc;gKc=new mKc}
function sKc(){sKc=mMc;hKc=new pKc}
function xKc(){xKc=mMc;wKc=new BKc}
function KKc(){KKc=mMc;zKc=new FKc}
function LKc(){LKc=mMc;AKc=new IKc}
function QKc(){QKc=mMc;PKc=new UKc}
function bLc(){bLc=mMc;SKc=new YKc}
function cLc(){cLc=mMc;TKc=new _Kc}
function hLc(){hLc=mMc;gLc=new lLc}
function uLc(){uLc=mMc;jLc=new pLc}
function vLc(){vLc=mMc;kLc=new sLc}
function Csc(a,b){this.a=a;this.b=b}
function Sxc(){nIb.call(this,(Xxc(),Wxc))}
function HIc(){nIb.call(this,(KIc(),JIc))}
function bKc(){nIb.call(this,(eKc(),dKc))}
function uKc(){nIb.call(this,(xKc(),wKc))}
function NKc(){nIb.call(this,(QKc(),PKc))}
function eLc(){nIb.call(this,(hLc(),gLc))}
function vsc(a){a.w+=1;a.w==3&&hPb(a.v,true)}
function wsc(){j9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function usc(a,b,c,d){var e,f,g;g=new Y1b(b);BMb(qu(vRb(QYb(g).i,zTc),225),c);f=new R7b;e=new d7b(new iWb(a.u,a.t),g);D5b(e._,-500);ZOb(f,e);CGb(a.G.k,f,a.c,d,true)}
function tsc(a,b,c,d,e,f){var g,i;g=new Q_b;J_b(g,new M2b(16755285));g.j=true;O_b(g,(IZb(),FZb));i=new n7b(b,g);i.d=c;l7b(i,yu(600*Ikb()));B5b(i._,d,e,f);$2b(i.cb,1.5707963267948966);i.S=true;i.U=true;ZOb(a.H,i);eqb(a.n,i)}
var QUc='enableDiffuse1',RUc='enableDiffuse2',JUc='h',LUc='heightMap',WUc='heightmap',VUc='offset',XUc='r',PUc='tDetail',NUc='tDiffuse1',OUc='tDiffuse2',TUc='uRepeatOverlay',KUc='v';YT(1235,1,WNc);_.zb=function rsc(){L8b(this.b,new wsc(this.a))};YT(1236,971,{78:1,186:1,337:1},wsc);_.Td=function xsc(a){vsc(this)};_.Fd=function ysc(a){this.u=a.a.Z;this.t=a.a.Y;BMb(qu(vRb(QYb(this.f.b).i,JUc),225),new Bjb(6/this.u));BMb(qu(vRb(QYb(this.D.b).i,KUc),225),new Bjb(6/this.t))};_.nb=function zsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((uxb(),txb),(Exb(),Dxb),this);this.b=new ZPb(40,qGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new MPb(this.u,this.t,-10000,10000);B5b(this.b._,-1200,800,1200);D5b(this.c._,100);this.s=new R7b;ZOb(this.s,this.c);this.d=new zwb(this.b,this.G.c);A5b(this.d.v,0);this.d.s=1;this.d.A=1.2;wwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;uwb(this.d,0.15);Q7b(this.H,new G7b(328965,2000,4000));ZOb(this.H,new yXb(1118481));this.e=new _Xb(16777215,1.15);B5b(this.e._,500,2000,0);ZOb(this.H,this.e);this.q=new sYb(16729088,1.5,0);A5b(this.q._,0);ZOb(this.H,this.q);this.g=new ZNb(256,256);pNb(this.g,(bEb(),YDb));nNb(this.g,(SDb(),QDb));kNb(this.g,(mCb(),kCb));lNb(this.g,false);this.o=new ZNb(256,256);pNb(this.o,YDb);nNb(this.o,QDb);kNb(this.o,kCb);lNb(this.o,false);n=new NKc;u=n.i;BMb(qu(u.a[qQc],225),new Bjb(0.05));P4b(qu(qu(u.a[eUc],225).d,296),256,256);BMb(qu(u.a[LUc],225),this.g);s=new ZNb(2048,2048);pNb(s,YDb);nNb(s,QDb);kNb(s,kCb);s.r=false;wNb(s,(tFb(),sFb));xNb(s,sFb);c=new DNb('./static/textures/terrain/grasslight-big.jpg',new Csc(this,s));wNb(c,sFb);xNb(c,sFb);d=new DNb('./static/textures/terrain/backgrounddetailed6.jpg',this);wNb(d,sFb);xNb(d,sFb);b=new DNb('./static/textures/terrain/grasslight-big-nm.jpg',this);wNb(b,sFb);xNb(b,sFb);t=new Sxc;this.B=t.i;BMb(qu(vRb(this.B,$Tc),225),this.o);BMb(qu(vRb(this.B,_Tc),225),new Bjb(3.5));BMb(qu(vRb(this.B,MUc),225),this.g);BMb(qu(vRb(this.B,NUc),225),c);BMb(qu(vRb(this.B,OUc),225),d);BMb(qu(vRb(this.B,aUc),225),s);BMb(qu(vRb(this.B,PUc),225),b);BMb(qu(vRb(this.B,QUc),225),(Cib(),Cib(),Bib));BMb(qu(vRb(this.B,RUc),225),Bib);BMb(qu(vRb(this.B,xTc),225),Bib);J2b(qu(qu(vRb(this.B,DTc),225).d,292),16777215);J2b(qu(qu(vRb(this.B,ETc),225).d,292),16777215);J2b(qu(qu(vRb(this.B,CTc),225).d,292),1118481);BMb(qu(vRb(this.B,dUc),225),new Bjb(30));BMb(qu(vRb(this.B,SUc),225),new Bjb(375));P4b(qu(qu(vRb(this.B,TUc),225).d,296),6,6);this.A=new Ysb;uob(this.A,hUc,new DMb((WMb(),IMb),new Bjb(1)));uob(this.A,UUc,new DMb(QMb,new T4b(1.5,1.5)));uob(this.A,VUc,new DMb(QMb,new T4b(0,0)));this.k=new Ysb;i=new X1b((Osc(),Nsc));iIb(QYb(i),this.A);i.c=false;i.b=true;uob(this.k,WUc,i);j=new Y1b(n);iIb(QYb(j),u);j.c=false;j.b=true;uob(this.k,sTc,j);k=new Y1b(t);iIb(QYb(k),this.B);k.c=true;k.b=true;uob(this.k,'terrain',k);o=new iWb(this.u,this.t);p=new X$b;R$b(p,new M2b(0));this.r=new d7b(o,p);D5b(this.r._,-500);ZOb(this.s,this.r);g=new jWb(6000,6000,64,64);AQb(g);this.v=new d7b(g,k);B5b(this.v._,0,-125,0);Z2b(this.v.cb,-1.5707963267948966);hPb(this.v,false);ZOb(this.H,this.v);OGb(this.G.k,this.H.b.c,1);this.G.k.ab=true;this.G.k.bb=true;KGb(this.G.k,false);q=new BIc(this.H,this.b);f=new mIc(0.6);e=new EIc(new HIc);BMb(qu(vRb(QYb(e.b).i,JTc),225),new Bjb(0.65));this.f=new EIc(new bKc);this.D=new EIc(new eLc);BMb(qu(vRb(QYb(this.f.b).i,JUc),225),new Bjb(6/this.u));BMb(qu(vRb(QYb(this.D.b).i,KUc),225),new Bjb(6/this.t));BMb(qu(vRb(QYb(this.f.b).i,XUc),225),new Bjb(0.5));BMb(qu(vRb(QYb(this.D.b).i,XUc),225),new Bjb(0.5));this.D.a=true;r=new ZNb(this.u,this.t);pNb(s,XDb);nNb(s,QDb);kNb(s,kCb);s.f=false;s.r=false;a=new uIc(this.G.k,r);eqb(a.b,q);eqb(a.b,f);eqb(a.b,e);sIc(a,this.f);sIc(a,this.D);this.n=new oqb;new $yc('./static/models/animated/parrot.js',new Fsc(this));new $yc(IUc,new Isc(this));new $yc('./static/models/animated/stork.js',new Lsc(this));this.p=rh()};_.ob=function Asc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){xwb(this.d);this.j=h3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;I2b(this.H.b.c,0.1,e,this.j);OGb(this.G.k,this.H.b.c,1);IXb(this.e,0.1+f*1.0499999999999998);qYb(this.q,0.9+f*0.6);BMb(qu(vRb(this.B,_Tc),225),new Bjb(0.6+f*2.9));if(this.C){this.a=h3b(this.a+-7.5E-4,0,0.05);BMb(qu(pob(this.A,hUc),225),new Bjb(qu(qu(pob(this.A,hUc),225).d,150).a+b*this.a));L4b(qu(qu(pob(this.A,VUc),225).d,296),b*0.05);Q4b(qu(qu(vRb(this.B,YUc),225).d,296),4*qu(qu(pob(this.A,VUc),225).d,296).c);DSb(this.r,qu(pob(this.k,WUc),281));CGb(this.G.k,this.s,this.c,this.g,true);DSb(this.r,qu(pob(this.k,sTc),281));CGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=qu(hqb(this.n,c),304);m7b(d,yu(1000*b));L4b(d._,d.d*b);d._.c>2000&&Q4b(d._,-1500-Ikb()*500)}CGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;YT(1237,1,{},Csc);_.Td=function Dsc(a){vsc(this.a);usc(this.a,new uKc,a,this.b)};YT(1238,1,{},Fsc);_.yf=function Gsc(a,b){Vyc((qu(a,338),qu(b,241)));tsc(this.a,qu(b,241),500,-3500,500,700);tsc(this.a,qu(b,241),500,-3000-Ikb()*500,500,-200);tsc(this.a,qu(b,241),500,-3000-Ikb()*500,500,200);tsc(this.a,qu(b,241),500,-3000-Ikb()*500,500,1000)};YT(1239,1,{},Isc);_.yf=function Jsc(a,b){Vyc((qu(a,338),qu(b,241)));tsc(this.a,qu(b,241),1000,-3000-Ikb()*500,350,40)};YT(1240,1,{},Lsc);_.yf=function Msc(a,b){Vyc((qu(a,338),qu(b,241)));tsc(this.a,qu(b,241),1000,-3000-Ikb()*500,350,340)};var Nsc;YT(1241,1,{},Ssc);_.Nd=function Tsc(){return _sc(),Qsc};_.Od=function Usc(){return atc(),Rsc};var Qsc,Rsc;YT(1242,1,{},Wsc);_.mc=function Xsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};YT(1243,1,{},Zsc);_.mc=function $sc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};YT(1349,729,JNc,Sxc);_.Kd=function Txc(){iIb(this,$Mb());iIb(this,_Mb());iIb(this,aNb());bIb(this,QUc,new DMb((WMb(),LMb),(Cib(),Cib(),Aib)));bIb(this,RUc,new DMb(LMb,Aib));bIb(this,xTc,new DMb(LMb,Aib));bIb(this,ZUc,new DMb(LMb,Aib));bIb(this,NUc,new CMb(OMb));bIb(this,OUc,new CMb(OMb));bIb(this,PUc,new CMb(OMb));bIb(this,$Tc,new CMb(OMb));bIb(this,aUc,new CMb(OMb));bIb(this,MUc,new CMb(OMb));bIb(this,_Tc,new DMb(IMb,new Bjb(1)));bIb(this,$Uc,new DMb(IMb,new Bjb(0)));bIb(this,SUc,new DMb(IMb,new Bjb(1)));bIb(this,DTc,new DMb(HMb,new M2b(15658734)));bIb(this,ETc,new DMb(HMb,new M2b(1118481)));bIb(this,CTc,new DMb(HMb,new M2b(328965)));bIb(this,dUc,new DMb(IMb,new Bjb(30)));bIb(this,JTc,new DMb(IMb,new Bjb(1)));bIb(this,'uRepeatBase',new DMb(QMb,new T4b(1,1)));bIb(this,TUc,new DMb(QMb,new T4b(1,1)));bIb(this,YUc,new DMb(QMb,new T4b(0,0)))};_.Ld=function Uxc(a){var b,c;c=new Mqb(gu(VR,rMc,1,[KTc,LTc]));b=new Mqb(gu(VR,rMc,1,[NTc,OTc,PTc]));kIb(this,sIb(a,gu(YR,rMc,173,[c,b])))};_.Md=function Vxc(a){var b,c;c=new Mqb(gu(VR,rMc,1,[QTc]));b=new Mqb(gu(VR,rMc,1,[RTc]));lIb(this,sIb(a,gu(YR,rMc,173,[c,b])))};var Wxc;YT(1350,1,{},_xc);_.Nd=function ayc(){return iyc(),Zxc};_.Od=function byc(){return jyc(),$xc};var Zxc,$xc;YT(1351,1,{},dyc);_.mc=function eyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1352,1,{},gyc);_.mc=function hyc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};YT(1444,729,JNc,HIc);_.Kd=function IIc(){bIb(this,zTc,new CMb((WMb(),OMb)));bIb(this,JTc,new DMb(IMb,new Bjb(1)))};var JIc;YT(1445,1,{},OIc);_.Nd=function PIc(){return XIc(),MIc};_.Od=function QIc(){return YIc(),NIc};var MIc,NIc;YT(1446,1,{},SIc);_.mc=function TIc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};YT(1447,1,{},VIc);_.mc=function WIc(){return pUc};YT(1468,729,JNc,bKc);_.Kd=function cKc(){bIb(this,zTc,new CMb((WMb(),OMb)));bIb(this,JUc,new DMb(IMb,new Bjb(0.001953125)));bIb(this,XUc,new DMb(IMb,new Bjb(0.35)))};var dKc;YT(1469,1,{},iKc);_.Nd=function jKc(){return rKc(),gKc};_.Od=function kKc(){return sKc(),hKc};var gKc,hKc;YT(1470,1,{},mKc);_.mc=function nKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1471,1,{},pKc);_.mc=function qKc(){return pUc};YT(1474,729,JNc,uKc);_.Kd=function vKc(){bIb(this,zTc,new CMb((WMb(),OMb)))};var wKc;YT(1475,1,{},BKc);_.Nd=function CKc(){return KKc(),zKc};_.Od=function DKc(){return LKc(),AKc};var zKc,AKc;YT(1476,1,{},FKc);_.mc=function GKc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};YT(1477,1,{},IKc);_.mc=function JKc(){return pUc};YT(1480,729,JNc,NKc);_.Kd=function OKc(){bIb(this,LUc,new CMb((WMb(),OMb)));bIb(this,eUc,new DMb(QMb,new T4b(512,512)));bIb(this,UUc,new DMb(QMb,new T4b(1,1)));bIb(this,qQc,new DMb(IMb,new Bjb(0.05)))};var PKc;YT(1481,1,{},UKc);_.Nd=function VKc(){return bLc(),SKc};_.Od=function WKc(){return cLc(),TKc};var SKc,TKc;YT(1482,1,{},YKc);_.mc=function ZKc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};YT(1483,1,{},_Kc);_.mc=function aLc(){return pUc};YT(1486,729,JNc,eLc);_.Kd=function fLc(){bIb(this,zTc,new CMb((WMb(),OMb)));bIb(this,KUc,new DMb(IMb,new Bjb(0.001953125)));bIb(this,XUc,new DMb(IMb,new Bjb(0.35)))};var gLc;YT(1487,1,{},lLc);_.Nd=function mLc(){return uLc(),jLc};_.Od=function nLc(){return vLc(),kLc};var jLc,kLc;YT(1488,1,{},pLc);_.mc=function qLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};YT(1489,1,{},sLc);_.mc=function tLc(){return pUc};var kO=pjb(PSc,'TerrainDynamic$DemoScene',1236),gO=pjb(PSc,'TerrainDynamic$DemoScene$1',1237),hO=pjb(PSc,'TerrainDynamic$DemoScene$2',1238),iO=pjb(PSc,'TerrainDynamic$DemoScene$3',1239),jO=pjb(PSc,'TerrainDynamic$DemoScene$4',1240),ZQ=pjb(rUc,_Uc,1480),XO=pjb(FSc,'TerrainShader',1349),BQ=pjb(rUc,'BleachBypassShader',1444),RQ=pjb(rUc,'HorizontalTiltShiftShader',1468),bR=pjb(rUc,'VerticalTiltShiftShader',1486),nO=pjb(PSc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1241),lO=pjb(PSc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1242),mO=pjb(PSc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1243),YQ=pjb(rUc,aVc,1481),WQ=pjb(rUc,bVc,1482),XQ=pjb(rUc,cVc,1483),WO=pjb(FSc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1350),UO=pjb(FSc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1351),VO=pjb(FSc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1352),AQ=pjb(rUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1445),yQ=pjb(rUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1446),zQ=pjb(rUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1447),QQ=pjb(rUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1469),OQ=pjb(rUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1470),PQ=pjb(rUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1471),aR=pjb(rUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1487),$Q=pjb(rUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1488),_Q=pjb(rUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1489),VQ=pjb(rUc,'LuminosityShader',1474),UQ=pjb(rUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1475),SQ=pjb(rUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1476),TQ=pjb(rUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1477);iOc(xi)(38);