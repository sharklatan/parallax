function dKb(){}
function hKb(){}
function kKb(){}
function mKb(){mKb=mMc;bKb=new hKb}
function nKb(){nKb=mMc;cKb=new kKb}
function _Jb(){_Jb=mMc;$Jb=new dKb}
function YJb(){nIb.call(this,(_Jb(),$Jb))}
function Wkc(){j9b.call(this);this.c=0;this.d=0}
YT(753,729,JNc,YJb);_.Kd=function ZJb(){bIb(this,'mRefractionRatio',new DMb((WMb(),IMb),new Bjb(1.02)));bIb(this,'mFresnelBias',new DMb(IMb,new Bjb(0.1)));bIb(this,'mFresnelPower',new DMb(IMb,new Bjb(2)));bIb(this,'mFresnelScale',new DMb(IMb,new Bjb(1)));bIb(this,UTc,new CMb(OMb))};var $Jb;YT(754,1,{},dKb);_.Nd=function eKb(){return mKb(),bKb};_.Od=function fKb(){return nKb(),cKb};var bKb,cKb;YT(755,1,{},hKb);_.mc=function iKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};YT(756,1,{},kKb);_.mc=function lKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};YT(1136,1,WNc);_.zb=function Ukc(){L8b(this.b,new Wkc(this.a))};YT(1137,971,{326:1},Wkc);_.nb=function Xkc(){var a,b,c,d,e,f,g,i,j;this.a=new ZPb(60,qGb(this.G.k),1,100000);D5b(this.a._,3200);this.b=new ZPb(60,qGb(this.G.k),1,100000);this.e=new R7b;a=new qWb(100,32,16);j=new LNb('./static/textures/cube/park2/*.jpg');kNb(j,(mCb(),kCb));g=new YJb;BMb(qu(vRb(g.i,UTc),225),j);c=new Y1b(g);this.f=new oqb;for(b=0;b<500;b++){e=new d7b(a,c);Q4b(e._,Ikb()*10000-5000);R4b(e._,Ikb()*10000-5000);D5b(e._,Ikb()*10000-5000);A5b(e.eb,Ikb()*3+1);ZOb(this.H,e);eqb(this.f,e)}this.H.W=false;i=new PIb;BMb(qu(vRb(i.i,UTc),225),j);f=new Y1b(i);_Yb(f,(N$b(),K$b));d=new d7b(new BVb(100000,100000,100000),f);ZOb(this.e,d);KGb(this.G.k,false)};_.ob=function Ykc(a){var b,c,d,e;e=1.0E-4*a;L4b(this.a._,(this.c-this.a._.c)*0.05);M4b(this.a._,(-this.d-this.a._.d)*0.05);vPb(this.a,this.H._);T2b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(hqb(this.f,b),303);Q4b(d._,5000*Math.cos(e+b));R4b(d._,5000*Math.sin(e+b*1.1))}jGb(this.G.k,true);CGb(this.G.k,this.e,this.b,null,false);CGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var xM=pjb(MSc,'MaterialsCubemapFresnel$DemoScene',1137),$F=pjb(VTc,'FresnelShader',753),ZF=pjb(VTc,'FresnelShader_Resources_default_InlineClientBundleGenerator',754),XF=pjb(VTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',755),YF=pjb(VTc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',756);iOc(xi)(21);