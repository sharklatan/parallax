function Nuc(){}
function Ruc(){}
function Uuc(){}
function UNc(){}
function xNc(){}
function BNc(){}
function ENc(){}
function QNc(){}
function XNc(){}
function Yzc(){}
function aAc(){}
function dAc(){}
function hOc(){}
function lOc(){}
function oOc(){}
function oPc(){}
function kPc(){}
function rPc(){}
function RZb(a,b){a.b=b}
function M8b(a,b){a.k=b}
function Auc(a){this.a=a}
function Duc(a){this.a=a}
function Guc(a){this.a=a}
function tNc(){tNc=EQc;sNc=new xNc}
function GNc(){GNc=EQc;vNc=new BNc}
function HNc(){HNc=EQc;wNc=new ENc}
function MNc(){MNc=EQc;LNc=new QNc}
function ZNc(){ZNc=EQc;ONc=new UNc}
function $Nc(){$Nc=EQc;PNc=new XNc}
function Juc(){Juc=EQc;Iuc=new Nuc}
function Wuc(){Wuc=EQc;Luc=new Ruc}
function Xuc(){Xuc=EQc;Muc=new Uuc}
function Uzc(){Uzc=EQc;Tzc=new Yzc}
function fAc(){fAc=EQc;Wzc=new aAc}
function gAc(){gAc=EQc;Xzc=new dAc}
function gPc(){gPc=EQc;fPc=new kPc}
function tPc(){tPc=EQc;iPc=new oPc}
function uPc(){uPc=EQc;jPc=new rPc}
function dOc(){dOc=EQc;cOc=new hOc}
function qOc(){qOc=EQc;fOc=new lOc}
function rOc(){rOc=EQc;gOc=new oOc}
function xuc(a,b){this.a=a;this.b=b}
function qNc(){JJb.call(this,(tNc(),sNc))}
function JNc(){JJb.call(this,(MNc(),LNc))}
function Pzc(){JJb.call(this,(Uzc(),Tzc))}
function aOc(){JJb.call(this,(dOc(),cOc))}
function dPc(){JJb.call(this,(gPc(),fPc))}
function quc(a){a.w+=1;a.w==3&&EQb(a.v,true)}
function ruc(){Lac.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function puc(a,b,c,d){var e,f,g;g=new x3b(b);XNb(zu(USb(p$b(g).i,cYc),227),c);f=new r9b;e=new E8b(new JXb(a.u,a.t),g);c7b(e._,-500);tQb(f,e);YHb(a.G.k,f,a.c,d,true)}
function ouc(a,b,c,d,e,f){var g,i;g=new p1b;i1b(g,new l4b(16755285));g.j=true;n1b(g,(h_b(),e_b));i=new O8b(b,g);i.d=c;M8b(i,Hu(600*xlb()));a7b(i._,d,e,f);z4b(i.cb,1.5707963267948966);i.S=true;i.U=true;tQb(a.H,i);Vqb(a.n,i)}
var mZc='enableDiffuse1',nZc='enableDiffuse2',hZc='heightMap',sZc='heightmap',tZc='r',lZc='tDetail',jZc='tDiffuse1',kZc='tDiffuse2',pZc='uRepeatOverlay';PU(1241,1,nSc);_.zb=function muc(){lac(this.b,new ruc(this.a))};PU(1242,972,{78:1,186:1,339:1},ruc);_.Ud=function suc(a){quc(this)};_.Gd=function tuc(a){this.u=a.a.Z;this.t=a.a.Y;XNb(zu(USb(p$b(this.f.b).i,fZc),227),new qkb(6/this.u));XNb(zu(USb(p$b(this.D.b).i,gZc),227),new qkb(6/this.t))};_.nb=function uuc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;nt((jyb(),iyb),(tyb(),syb),this);this.b=new uRb(40,MHb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new hRb(this.u,this.t,-10000,10000);a7b(this.b._,-1200,800,1200);c7b(this.c._,100);this.s=new r9b;tQb(this.s,this.c);this.d=new oxb(this.b,this.G.c);_6b(this.d.v,0);this.d.s=1;this.d.A=1.2;lxb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;jxb(this.d,0.15);p9b(this.H,new f9b(328965,2000,4000));tQb(this.H,new ZYb(1118481));this.e=new AZb(16777215,1.15);a7b(this.e._,500,2000,0);tQb(this.H,this.e);this.q=new TZb(16729088,1.5,0);_6b(this.q._,0);tQb(this.H,this.q);this.g=new tPb(256,256);LOb(this.g,(wFb(),rFb));JOb(this.g,(lFb(),jFb));GOb(this.g,(hDb(),fDb));HOb(this.g,false);this.o=new tPb(256,256);LOb(this.o,rFb);JOb(this.o,jFb);GOb(this.o,fDb);HOb(this.o,false);n=new aOc;u=n.i;XNb(zu(u.a[LUc],227),new qkb(0.05));o6b(zu(zu(u.a[IYc],227).d,298),256,256);XNb(zu(u.a[hZc],227),this.g);s=new tPb(2048,2048);LOb(s,rFb);JOb(s,jFb);GOb(s,fDb);s.r=false;SOb(s,(OGb(),NGb));TOb(s,NGb);c=new ZOb('./static/textures/terrain/grasslight-big.jpg',new xuc(this,s));SOb(c,NGb);TOb(c,NGb);d=new ZOb('./static/textures/terrain/backgrounddetailed6.jpg',this);SOb(d,NGb);TOb(d,NGb);b=new ZOb('./static/textures/terrain/grasslight-big-nm.jpg',this);SOb(b,NGb);TOb(b,NGb);t=new Pzc;this.B=t.i;XNb(zu(USb(this.B,CYc),227),this.o);XNb(zu(USb(this.B,DYc),227),new qkb(3.5));XNb(zu(USb(this.B,iZc),227),this.g);XNb(zu(USb(this.B,jZc),227),c);XNb(zu(USb(this.B,kZc),227),d);XNb(zu(USb(this.B,EYc),227),s);XNb(zu(USb(this.B,lZc),227),b);XNb(zu(USb(this.B,mZc),227),(rjb(),rjb(),qjb));XNb(zu(USb(this.B,nZc),227),qjb);XNb(zu(USb(this.B,aYc),227),qjb);i4b(zu(zu(USb(this.B,gYc),227).d,294),16777215);i4b(zu(zu(USb(this.B,hYc),227).d,294),16777215);i4b(zu(zu(USb(this.B,fYc),227).d,294),1118481);XNb(zu(USb(this.B,HYc),227),new qkb(30));XNb(zu(USb(this.B,oZc),227),new qkb(375));o6b(zu(zu(USb(this.B,pZc),227).d,298),6,6);this.A=new Ntb;jpb(this.A,LYc,new ZNb((qOb(),cOb),new qkb(1)));jpb(this.A,qZc,new ZNb(kOb,new s6b(1.5,1.5)));jpb(this.A,rZc,new ZNb(kOb,new s6b(0,0)));this.k=new Ntb;i=new w3b((Juc(),Iuc));EJb(p$b(i),this.A);i.c=false;i.b=true;jpb(this.k,sZc,i);j=new x3b(n);EJb(p$b(j),u);j.c=false;j.b=true;jpb(this.k,XXc,j);k=new x3b(t);EJb(p$b(k),this.B);k.c=true;k.b=true;jpb(this.k,'terrain',k);o=new JXb(this.u,this.t);p=new w0b;q0b(p,new l4b(0));this.r=new E8b(o,p);c7b(this.r._,-500);tQb(this.s,this.r);g=new KXb(6000,6000,64,64);ZRb(g);this.v=new E8b(g,k);a7b(this.v._,0,-125,0);y4b(this.v.cb,-1.5707963267948966);EQb(this.v,false);tQb(this.H,this.v);iIb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;eIb(this.G.k,false);q=new JKc(this.H,this.b);f=new kKc(0.6);e=new NKc(new TKc);XNb(zu(USb(p$b(e.b).i,mYc),227),new qkb(0.65));this.f=new NKc(new qNc);this.D=new NKc(new dPc);XNb(zu(USb(p$b(this.f.b).i,fZc),227),new qkb(6/this.u));XNb(zu(USb(p$b(this.D.b).i,gZc),227),new qkb(6/this.t));XNb(zu(USb(p$b(this.f.b).i,tZc),227),new qkb(0.5));XNb(zu(USb(p$b(this.D.b).i,tZc),227),new qkb(0.5));this.D.a=true;r=new tPb(this.u,this.t);LOb(s,qFb);JOb(s,jFb);GOb(s,fDb);s.f=false;s.r=false;a=new CKc(this.G.k,r);Vqb(a.c,q);Vqb(a.c,f);Vqb(a.c,e);AKc(a,this.f);AKc(a,this.D);this.n=new drb;new XAc('./static/models/animated/parrot.js',new Auc(this));new XAc(eZc,new Duc(this));new XAc('./static/models/animated/stork.js',new Guc(this));this.p=rh()};_.ob=function vuc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){mxb(this.d);this.j=I4b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;h4b(this.H.a.c,0.1,e,this.j);iIb(this.G.k,this.H.a.c,1);hZb(this.e,0.1+f*1.0499999999999998);RZb(this.q,0.9+f*0.6);XNb(zu(USb(this.B,DYc),227),new qkb(0.6+f*2.9));if(this.C){this.a=I4b(this.a+-7.5E-4,0,0.05);XNb(zu(epb(this.A,LYc),227),new qkb(zu(zu(epb(this.A,LYc),227).d,150).a+b*this.a));k6b(zu(zu(epb(this.A,rZc),227).d,298),b*0.05);p6b(zu(zu(USb(this.B,uZc),227).d,298),4*zu(zu(epb(this.A,rZc),227).d,298).c);cUb(this.r,zu(epb(this.k,sZc),283));YHb(this.G.k,this.s,this.c,this.g,true);cUb(this.r,zu(epb(this.k,XXc),283));YHb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=zu(Yqb(this.n,c),306);N8b(d,Hu(1000*b));k6b(d._,d.d*b);d._.c>2000&&p6b(d._,-1500-xlb()*500)}YHb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;PU(1243,1,{},xuc);_.Ud=function yuc(a){quc(this.a);puc(this.a,new JNc,a,this.b)};PU(1244,1,{},Auc);_.zf=function Buc(a,b){SAc((zu(a,340),zu(b,243)));ouc(this.a,zu(b,243),500,-3500,500,700);ouc(this.a,zu(b,243),500,-3000-xlb()*500,500,-200);ouc(this.a,zu(b,243),500,-3000-xlb()*500,500,200);ouc(this.a,zu(b,243),500,-3000-xlb()*500,500,1000)};PU(1245,1,{},Duc);_.zf=function Euc(a,b){SAc((zu(a,340),zu(b,243)));ouc(this.a,zu(b,243),1000,-3000-xlb()*500,350,40)};PU(1246,1,{},Guc);_.zf=function Huc(a,b){SAc((zu(a,340),zu(b,243)));ouc(this.a,zu(b,243),1000,-3000-xlb()*500,350,340)};var Iuc;PU(1247,1,{},Nuc);_.Od=function Ouc(){return Wuc(),Luc};_.Pd=function Puc(){return Xuc(),Muc};var Luc,Muc;PU(1248,1,{},Ruc);_.nc=function Suc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};PU(1249,1,{},Uuc);_.nc=function Vuc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};PU(1356,730,aSc,Pzc);_.Ld=function Qzc(){EJb(this,uOb());EJb(this,vOb());EJb(this,wOb());xJb(this,mZc,new ZNb((qOb(),fOb),(rjb(),rjb(),pjb)));xJb(this,nZc,new ZNb(fOb,pjb));xJb(this,aYc,new ZNb(fOb,pjb));xJb(this,vZc,new ZNb(fOb,pjb));xJb(this,jZc,new YNb(iOb));xJb(this,kZc,new YNb(iOb));xJb(this,lZc,new YNb(iOb));xJb(this,CYc,new YNb(iOb));xJb(this,EYc,new YNb(iOb));xJb(this,iZc,new YNb(iOb));xJb(this,DYc,new ZNb(cOb,new qkb(1)));xJb(this,wZc,new ZNb(cOb,new qkb(0)));xJb(this,oZc,new ZNb(cOb,new qkb(1)));xJb(this,gYc,new ZNb(bOb,new l4b(15658734)));xJb(this,hYc,new ZNb(bOb,new l4b(1118481)));xJb(this,fYc,new ZNb(bOb,new l4b(328965)));xJb(this,HYc,new ZNb(cOb,new qkb(30)));xJb(this,mYc,new ZNb(cOb,new qkb(1)));xJb(this,'uRepeatBase',new ZNb(kOb,new s6b(1,1)));xJb(this,pZc,new ZNb(kOb,new s6b(1,1)));xJb(this,uZc,new ZNb(kOb,new s6b(0,0)))};_.Md=function Rzc(a){var b,c;c=new Brb(pu(KS,JQc,1,[nYc,oYc]));b=new Brb(pu(KS,JQc,1,[qYc,rYc,sYc]));GJb(this,OJb(a,pu(NS,JQc,173,[c,b])))};_.Nd=function Szc(a){var b,c;c=new Brb(pu(KS,JQc,1,[tYc]));b=new Brb(pu(KS,JQc,1,[uYc]));HJb(this,OJb(a,pu(NS,JQc,173,[c,b])))};var Tzc;PU(1357,1,{},Yzc);_.Od=function Zzc(){return fAc(),Wzc};_.Pd=function $zc(){return gAc(),Xzc};var Wzc,Xzc;PU(1358,1,{},aAc);_.nc=function bAc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};PU(1359,1,{},dAc);_.nc=function eAc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};PU(1497,730,aSc,qNc);_.Ld=function rNc(){xJb(this,cYc,new YNb((qOb(),iOb)));xJb(this,fZc,new ZNb(cOb,new qkb(0.001953125)));xJb(this,tZc,new ZNb(cOb,new qkb(0.35)))};var sNc;PU(1498,1,{},xNc);_.Od=function yNc(){return GNc(),vNc};_.Pd=function zNc(){return HNc(),wNc};var vNc,wNc;PU(1499,1,{},BNc);_.nc=function CNc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};PU(1500,1,{},ENc);_.nc=function FNc(){return ZYc};PU(1503,730,aSc,JNc);_.Ld=function KNc(){xJb(this,cYc,new YNb((qOb(),iOb)))};var LNc;PU(1504,1,{},QNc);_.Od=function RNc(){return ZNc(),ONc};_.Pd=function SNc(){return $Nc(),PNc};var ONc,PNc;PU(1505,1,{},UNc);_.nc=function VNc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};PU(1506,1,{},XNc);_.nc=function YNc(){return ZYc};PU(1509,730,aSc,aOc);_.Ld=function bOc(){xJb(this,hZc,new YNb((qOb(),iOb)));xJb(this,IYc,new ZNb(kOb,new s6b(512,512)));xJb(this,qZc,new ZNb(kOb,new s6b(1,1)));xJb(this,LUc,new ZNb(cOb,new qkb(0.05)))};var cOc;PU(1510,1,{},hOc);_.Od=function iOc(){return qOc(),fOc};_.Pd=function jOc(){return rOc(),gOc};var fOc,gOc;PU(1511,1,{},lOc);_.nc=function mOc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};PU(1512,1,{},oOc);_.nc=function pOc(){return ZYc};PU(1527,730,aSc,dPc);_.Ld=function ePc(){xJb(this,cYc,new YNb((qOb(),iOb)));xJb(this,gZc,new ZNb(cOb,new qkb(0.001953125)));xJb(this,tZc,new ZNb(cOb,new qkb(0.35)))};var fPc;PU(1528,1,{},kPc);_.Od=function lPc(){return tPc(),iPc};_.Pd=function mPc(){return uPc(),jPc};var iPc,jPc;PU(1529,1,{},oPc);_.nc=function pPc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};PU(1530,1,{},rPc);_.nc=function sPc(){return ZYc};var zO=ekb(sXc,'TerrainDynamic$DemoScene',1242),vO=ekb(sXc,'TerrainDynamic$DemoScene$1',1243),wO=ekb(sXc,'TerrainDynamic$DemoScene$2',1244),xO=ekb(sXc,'TerrainDynamic$DemoScene$3',1245),yO=ekb(sXc,'TerrainDynamic$DemoScene$4',1246),CR=ekb(xZc,yZc,1509),kP=ekb(iXc,'TerrainShader',1356),uR=ekb(xZc,'HorizontalTiltShiftShader',1497),OR=ekb(xZc,'VerticalTiltShiftShader',1527),CO=ekb(sXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1247),AO=ekb(sXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1248),BO=ekb(sXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1249),BR=ekb(xZc,zZc,1510),zR=ekb(xZc,AZc,1511),AR=ekb(xZc,BZc,1512),jP=ekb(iXc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1357),hP=ekb(iXc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1358),iP=ekb(iXc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1359),tR=ekb(xZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1498),rR=ekb(xZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1499),sR=ekb(xZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1500),NR=ekb(xZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1528),LR=ekb(xZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1529),MR=ekb(xZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1530),yR=ekb(xZc,'LuminosityShader',1503),xR=ekb(xZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1504),vR=ekb(xZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1505),wR=ekb(xZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1506);BSc(xi)(38);