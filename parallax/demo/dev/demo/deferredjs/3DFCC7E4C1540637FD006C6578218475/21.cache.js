function AKb(){}
function EKb(){}
function HKb(){}
function wKb(){wKb=ZKc;vKb=new AKb}
function JKb(){JKb=ZKc;yKb=new EKb}
function KKb(){KKb=ZKc;zKb=new HKb}
function tKb(){KIb.call(this,(wKb(),vKb))}
function Clc(){mac.call(this);this.c=0;this.d=0}
qU(753,729,vMc,tKb);_.Ld=function uKb(){yIb(this,'mRefractionRatio',new $Mb((rNb(),dNb),new Ujb(1.02)));yIb(this,'mFresnelBias',new $Mb(dNb,new Ujb(0.1)));yIb(this,'mFresnelPower',new $Mb(dNb,new Ujb(2)));yIb(this,'mFresnelScale',new $Mb(dNb,new Ujb(1)));yIb(this,USc,new ZMb(jNb))};var vKb;qU(754,1,{},AKb);_.Od=function BKb(){return JKb(),yKb};_.Pd=function CKb(){return KKb(),zKb};var yKb,zKb;qU(755,1,{},EKb);_.nc=function FKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};qU(756,1,{},HKb);_.nc=function IKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};qU(1144,1,JMc);_.zb=function Alc(){O9b(this.b,new Clc(this.a))};qU(1145,977,{327:1},Clc);_.nb=function Dlc(){var a,b,c,d,e,f,g,i,j;this.a=new xQb(60,NGb(this.G.k),1,100000);S6b(this.a._,3200);this.b=new xQb(60,NGb(this.G.k),1,100000);this.e=new T8b;a=new ZWb(100,32,16);j=new gOb('./static/textures/cube/park2/*.jpg');HNb(j,(JCb(),HCb));g=new tKb;YMb(zu(aSb(g.i,USc),225),j);c=new k3b(g);this.f=new Iqb;for(b=0;b<500;b++){e=new uYb(a,c);d6b(e._,_kb()*10000-5000);e6b(e._,_kb()*10000-5000);S6b(e._,_kb()*10000-5000);P6b(e.eb,_kb()*3+1);uPb(this.H,e);yqb(this.f,e)}this.H.W=false;i=new kJb;YMb(zu(aSb(i.i,USc),225),j);f=new k3b(i);n$b(f,(__b(),Y_b));d=new uYb(new iWb(100000,100000,100000),f);uPb(this.e,d);fHb(this.G.k,false)};_.ob=function Elc(a){var b,c,d,e;e=1.0E-4*a;$5b(this.a._,(this.c-this.a._.c)*0.05);_5b(this.a._,(-this.d-this.a._.d)*0.05);TPb(this.a,this.H._);g4b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=zu(Bqb(this.f,b),304);d6b(d._,5000*Math.cos(e+b));e6b(d._,5000*Math.sin(e+b*1.1))}GGb(this.G.k,true);ZGb(this.G.k,this.e,this.b,null,false);ZGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var MM=Ijb(NRc,'MaterialsCubemapFresnel$DemoScene',1145),gG=Ijb(VSc,'FresnelShader',753),fG=Ijb(VSc,'FresnelShader_Resources_default_InlineClientBundleGenerator',754),dG=Ijb(VSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',755),eG=Ijb(VSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',756);XMc(xi)(21);