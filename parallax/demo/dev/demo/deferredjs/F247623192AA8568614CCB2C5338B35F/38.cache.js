function ktc(){}
function otc(){}
function rtc(){}
function tyc(){}
function xyc(){}
function Ayc(){}
function gJc(){}
function kJc(){}
function nJc(){}
function CKc(){}
function GKc(){}
function JKc(){}
function VKc(){}
function ZKc(){}
function aLc(){}
function mLc(){}
function qLc(){}
function tLc(){}
function FLc(){}
function JLc(){}
function MLc(){}
function GYb(a,b){a.b=b}
function B7b(a,b){a.k=b}
function MIc(a,b){lqb(a.b,b)}
function Zsc(a){this.a=a}
function atc(a){this.a=a}
function dtc(a){this.a=a}
function gtc(){gtc=GMc;ftc=new ktc}
function ttc(){ttc=GMc;itc=new otc}
function utc(){utc=GMc;jtc=new rtc}
function pyc(){pyc=GMc;oyc=new tyc}
function Cyc(){Cyc=GMc;ryc=new xyc}
function Dyc(){Dyc=GMc;syc=new Ayc}
function cJc(){cJc=GMc;bJc=new gJc}
function pJc(){pJc=GMc;eJc=new kJc}
function qJc(){qJc=GMc;fJc=new nJc}
function yKc(){yKc=GMc;xKc=new CKc}
function LKc(){LKc=GMc;AKc=new GKc}
function MKc(){MKc=GMc;BKc=new JKc}
function RKc(){RKc=GMc;QKc=new VKc}
function cLc(){cLc=GMc;TKc=new ZKc}
function dLc(){dLc=GMc;UKc=new aLc}
function iLc(){iLc=GMc;hLc=new mLc}
function vLc(){vLc=GMc;kLc=new qLc}
function wLc(){wLc=GMc;lLc=new tLc}
function BLc(){BLc=GMc;ALc=new FLc}
function OLc(){OLc=GMc;DLc=new JLc}
function PLc(){PLc=GMc;ELc=new MLc}
function Wsc(a,b){this.a=a;this.b=b}
function kyc(){uIb.call(this,(pyc(),oyc))}
function _Ic(){uIb.call(this,(cJc(),bJc))}
function vKc(){uIb.call(this,(yKc(),xKc))}
function OKc(){uIb.call(this,(RKc(),QKc))}
function fLc(){uIb.call(this,(iLc(),hLc))}
function yLc(){uIb.call(this,(BLc(),ALc))}
function Psc(a){a.w+=1;a.w==3&&pPb(a.v,true)}
function Qsc(){A9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Osc(a,b,c,d){var e,f,g;g=new m2b(b);IMb(zu(JRb(eZb(g).i,cUc),225),c);f=new g8b;e=new t7b(new yWb(a.u,a.t),g);T5b(e._,-500);ePb(f,e);JGb(a.G.k,f,a.c,d,true)}
function Nsc(a,b,c,d,e,f){var g,i;g=new e0b;Z_b(g,new a3b(16755285));g.j=true;c0b(g,(YZb(),VZb));i=new D7b(b,g);i.d=c;B7b(i,Hu(600*Pkb()));R5b(i._,d,e,f);o3b(i.cb,1.5707963267948966);i.S=true;i.U=true;ePb(a.H,i);lqb(a.n,i)}
var sVc='enableDiffuse1',tVc='enableDiffuse2',lVc='h',nVc='heightMap',yVc='heightmap',xVc='offset',zVc='r',rVc='tDetail',pVc='tDiffuse1',qVc='tDiffuse2',vVc='uRepeatOverlay',mVc='v';fU(1235,1,pOc);_.zb=function Lsc(){a9b(this.b,new Qsc(this.a))};fU(1236,970,{78:1,186:1,338:1},Qsc);_.Ud=function Rsc(a){Psc(this)};_.Gd=function Ssc(a){this.u=a.a.Z;this.t=a.a.Y;IMb(zu(JRb(eZb(this.f.b).i,lVc),225),new Ijb(6/this.u));IMb(zu(JRb(eZb(this.D.b).i,mVc),225),new Ijb(6/this.t))};_.nb=function Tsc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;nt((Bxb(),Axb),(Lxb(),Kxb),this);this.b=new hQb(40,xGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new UPb(this.u,this.t,-10000,10000);R5b(this.b._,-1200,800,1200);T5b(this.c._,100);this.s=new g8b;ePb(this.s,this.c);this.d=new Gwb(this.b,this.G.c);Q5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Dwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Bwb(this.d,0.15);e8b(this.H,new W7b(328965,2000,4000));ePb(this.H,new OXb(1118481));this.e=new pYb(16777215,1.15);R5b(this.e._,500,2000,0);ePb(this.H,this.e);this.q=new IYb(16729088,1.5,0);Q5b(this.q._,0);ePb(this.H,this.q);this.g=new eOb(256,256);wNb(this.g,(iEb(),dEb));uNb(this.g,(ZDb(),XDb));rNb(this.g,(tCb(),rCb));sNb(this.g,false);this.o=new eOb(256,256);wNb(this.o,dEb);uNb(this.o,XDb);rNb(this.o,rCb);sNb(this.o,false);n=new fLc;u=n.i;IMb(zu(u.a[NQc],225),new Ijb(0.05));d5b(zu(zu(u.a[IUc],225).d,297),256,256);IMb(zu(u.a[nVc],225),this.g);s=new eOb(2048,2048);wNb(s,dEb);uNb(s,XDb);rNb(s,rCb);s.r=false;DNb(s,(AFb(),zFb));ENb(s,zFb);c=new KNb('./static/textures/terrain/grasslight-big.jpg',new Wsc(this,s));DNb(c,zFb);ENb(c,zFb);d=new KNb('./static/textures/terrain/backgrounddetailed6.jpg',this);DNb(d,zFb);ENb(d,zFb);b=new KNb('./static/textures/terrain/grasslight-big-nm.jpg',this);DNb(b,zFb);ENb(b,zFb);t=new kyc;this.B=t.i;IMb(zu(JRb(this.B,CUc),225),this.o);IMb(zu(JRb(this.B,DUc),225),new Ijb(3.5));IMb(zu(JRb(this.B,oVc),225),this.g);IMb(zu(JRb(this.B,pVc),225),c);IMb(zu(JRb(this.B,qVc),225),d);IMb(zu(JRb(this.B,EUc),225),s);IMb(zu(JRb(this.B,rVc),225),b);IMb(zu(JRb(this.B,sVc),225),(Jib(),Jib(),Iib));IMb(zu(JRb(this.B,tVc),225),Iib);IMb(zu(JRb(this.B,aUc),225),Iib);Z2b(zu(zu(JRb(this.B,gUc),225).d,293),16777215);Z2b(zu(zu(JRb(this.B,hUc),225).d,293),16777215);Z2b(zu(zu(JRb(this.B,fUc),225).d,293),1118481);IMb(zu(JRb(this.B,HUc),225),new Ijb(30));IMb(zu(JRb(this.B,uVc),225),new Ijb(375));d5b(zu(zu(JRb(this.B,vVc),225).d,297),6,6);this.A=new dtb;Bob(this.A,LUc,new KMb((bNb(),PMb),new Ijb(1)));Bob(this.A,wVc,new KMb(XMb,new h5b(1.5,1.5)));Bob(this.A,xVc,new KMb(XMb,new h5b(0,0)));this.k=new dtb;i=new l2b((gtc(),ftc));pIb(eZb(i),this.A);i.c=false;i.b=true;Bob(this.k,yVc,i);j=new m2b(n);pIb(eZb(j),u);j.c=false;j.b=true;Bob(this.k,YTc,j);k=new m2b(t);pIb(eZb(k),this.B);k.c=true;k.b=true;Bob(this.k,'terrain',k);o=new yWb(this.u,this.t);p=new l_b;f_b(p,new a3b(0));this.r=new t7b(o,p);T5b(this.r._,-500);ePb(this.s,this.r);g=new zWb(6000,6000,64,64);OQb(g);this.v=new t7b(g,k);R5b(this.v._,0,-125,0);n3b(this.v.cb,-1.5707963267948966);pPb(this.v,false);ePb(this.H,this.v);VGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;RGb(this.G.k,false);q=new VIc(this.H,this.b);f=new GIc(0.6);e=new YIc(new _Ic);IMb(zu(JRb(eZb(e.b).i,mUc),225),new Ijb(0.65));this.f=new YIc(new vKc);this.D=new YIc(new yLc);IMb(zu(JRb(eZb(this.f.b).i,lVc),225),new Ijb(6/this.u));IMb(zu(JRb(eZb(this.D.b).i,mVc),225),new Ijb(6/this.t));IMb(zu(JRb(eZb(this.f.b).i,zVc),225),new Ijb(0.5));IMb(zu(JRb(eZb(this.D.b).i,zVc),225),new Ijb(0.5));this.D.a=true;r=new eOb(this.u,this.t);wNb(s,cEb);uNb(s,XDb);rNb(s,rCb);s.f=false;s.r=false;a=new OIc(this.G.k,r);lqb(a.b,q);lqb(a.b,f);lqb(a.b,e);MIc(a,this.f);MIc(a,this.D);this.n=new vqb;new szc('./static/models/animated/parrot.js',new Zsc(this));new szc(kVc,new atc(this));new szc('./static/models/animated/stork.js',new dtc(this));this.p=rh()};_.ob=function Usc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Ewb(this.d);this.j=x3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;Y2b(this.H.a.c,0.1,e,this.j);VGb(this.G.k,this.H.a.c,1);YXb(this.e,0.1+f*1.0499999999999998);GYb(this.q,0.9+f*0.6);IMb(zu(JRb(this.B,DUc),225),new Ijb(0.6+f*2.9));if(this.C){this.a=x3b(this.a+-7.5E-4,0,0.05);IMb(zu(wob(this.A,LUc),225),new Ijb(zu(zu(wob(this.A,LUc),225).d,150).a+b*this.a));_4b(zu(zu(wob(this.A,xVc),225).d,297),b*0.05);e5b(zu(zu(JRb(this.B,AVc),225).d,297),4*zu(zu(wob(this.A,xVc),225).d,297).c);TSb(this.r,zu(wob(this.k,yVc),282));JGb(this.G.k,this.s,this.c,this.g,true);TSb(this.r,zu(wob(this.k,YTc),282));JGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=zu(oqb(this.n,c),305);C7b(d,Hu(1000*b));_4b(d._,d.d*b);d._.c>2000&&e5b(d._,-1500-Pkb()*500)}JGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;fU(1237,1,{},Wsc);_.Ud=function Xsc(a){Psc(this.a);Osc(this.a,new OKc,a,this.b)};fU(1238,1,{},Zsc);_.Bf=function $sc(a,b){nzc((zu(a,339),zu(b,242)));Nsc(this.a,zu(b,242),500,-3500,500,700);Nsc(this.a,zu(b,242),500,-3000-Pkb()*500,500,-200);Nsc(this.a,zu(b,242),500,-3000-Pkb()*500,500,200);Nsc(this.a,zu(b,242),500,-3000-Pkb()*500,500,1000)};fU(1239,1,{},atc);_.Bf=function btc(a,b){nzc((zu(a,339),zu(b,242)));Nsc(this.a,zu(b,242),1000,-3000-Pkb()*500,350,40)};fU(1240,1,{},dtc);_.Bf=function etc(a,b){nzc((zu(a,339),zu(b,242)));Nsc(this.a,zu(b,242),1000,-3000-Pkb()*500,350,340)};var ftc;fU(1241,1,{},ktc);_.Od=function ltc(){return ttc(),itc};_.Pd=function mtc(){return utc(),jtc};var itc,jtc;fU(1242,1,{},otc);_.nc=function ptc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};fU(1243,1,{},rtc);_.nc=function stc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};fU(1349,728,cOc,kyc);_.Ld=function lyc(){pIb(this,fNb());pIb(this,gNb());pIb(this,hNb());iIb(this,sVc,new KMb((bNb(),SMb),(Jib(),Jib(),Hib)));iIb(this,tVc,new KMb(SMb,Hib));iIb(this,aUc,new KMb(SMb,Hib));iIb(this,BVc,new KMb(SMb,Hib));iIb(this,pVc,new JMb(VMb));iIb(this,qVc,new JMb(VMb));iIb(this,rVc,new JMb(VMb));iIb(this,CUc,new JMb(VMb));iIb(this,EUc,new JMb(VMb));iIb(this,oVc,new JMb(VMb));iIb(this,DUc,new KMb(PMb,new Ijb(1)));iIb(this,CVc,new KMb(PMb,new Ijb(0)));iIb(this,uVc,new KMb(PMb,new Ijb(1)));iIb(this,gUc,new KMb(OMb,new a3b(15658734)));iIb(this,hUc,new KMb(OMb,new a3b(1118481)));iIb(this,fUc,new KMb(OMb,new a3b(328965)));iIb(this,HUc,new KMb(PMb,new Ijb(30)));iIb(this,mUc,new KMb(PMb,new Ijb(1)));iIb(this,'uRepeatBase',new KMb(XMb,new h5b(1,1)));iIb(this,vVc,new KMb(XMb,new h5b(1,1)));iIb(this,AVc,new KMb(XMb,new h5b(0,0)))};_.Md=function myc(a){var b,c;c=new Tqb(pu(cS,LMc,1,[nUc,oUc]));b=new Tqb(pu(cS,LMc,1,[qUc,rUc,sUc]));rIb(this,zIb(a,pu(fS,LMc,173,[c,b])))};_.Nd=function nyc(a){var b,c;c=new Tqb(pu(cS,LMc,1,[tUc]));b=new Tqb(pu(cS,LMc,1,[uUc]));sIb(this,zIb(a,pu(fS,LMc,173,[c,b])))};var oyc;fU(1350,1,{},tyc);_.Od=function uyc(){return Cyc(),ryc};_.Pd=function vyc(){return Dyc(),syc};var ryc,syc;fU(1351,1,{},xyc);_.nc=function yyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};fU(1352,1,{},Ayc);_.nc=function Byc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};fU(1444,728,cOc,_Ic);_.Ld=function aJc(){iIb(this,cUc,new JMb((bNb(),VMb)));iIb(this,mUc,new KMb(PMb,new Ijb(1)))};var bJc;fU(1445,1,{},gJc);_.Od=function hJc(){return pJc(),eJc};_.Pd=function iJc(){return qJc(),fJc};var eJc,fJc;fU(1446,1,{},kJc);_.nc=function lJc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};fU(1447,1,{},nJc);_.nc=function oJc(){return TUc};fU(1468,728,cOc,vKc);_.Ld=function wKc(){iIb(this,cUc,new JMb((bNb(),VMb)));iIb(this,lVc,new KMb(PMb,new Ijb(0.001953125)));iIb(this,zVc,new KMb(PMb,new Ijb(0.35)))};var xKc;fU(1469,1,{},CKc);_.Od=function DKc(){return LKc(),AKc};_.Pd=function EKc(){return MKc(),BKc};var AKc,BKc;fU(1470,1,{},GKc);_.nc=function HKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};fU(1471,1,{},JKc);_.nc=function KKc(){return TUc};fU(1474,728,cOc,OKc);_.Ld=function PKc(){iIb(this,cUc,new JMb((bNb(),VMb)))};var QKc;fU(1475,1,{},VKc);_.Od=function WKc(){return cLc(),TKc};_.Pd=function XKc(){return dLc(),UKc};var TKc,UKc;fU(1476,1,{},ZKc);_.nc=function $Kc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};fU(1477,1,{},aLc);_.nc=function bLc(){return TUc};fU(1480,728,cOc,fLc);_.Ld=function gLc(){iIb(this,nVc,new JMb((bNb(),VMb)));iIb(this,IUc,new KMb(XMb,new h5b(512,512)));iIb(this,wVc,new KMb(XMb,new h5b(1,1)));iIb(this,NQc,new KMb(PMb,new Ijb(0.05)))};var hLc;fU(1481,1,{},mLc);_.Od=function nLc(){return vLc(),kLc};_.Pd=function oLc(){return wLc(),lLc};var kLc,lLc;fU(1482,1,{},qLc);_.nc=function rLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};fU(1483,1,{},tLc);_.nc=function uLc(){return TUc};fU(1486,728,cOc,yLc);_.Ld=function zLc(){iIb(this,cUc,new JMb((bNb(),VMb)));iIb(this,mVc,new KMb(PMb,new Ijb(0.001953125)));iIb(this,zVc,new KMb(PMb,new Ijb(0.35)))};var ALc;fU(1487,1,{},FLc);_.Od=function GLc(){return OLc(),DLc};_.Pd=function HLc(){return PLc(),ELc};var DLc,ELc;fU(1488,1,{},JLc);_.nc=function KLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};fU(1489,1,{},MLc);_.nc=function NLc(){return TUc};var tO=wjb(tTc,'TerrainDynamic$DemoScene',1236),pO=wjb(tTc,'TerrainDynamic$DemoScene$1',1237),qO=wjb(tTc,'TerrainDynamic$DemoScene$2',1238),rO=wjb(tTc,'TerrainDynamic$DemoScene$3',1239),sO=wjb(tTc,'TerrainDynamic$DemoScene$4',1240),gR=wjb(VUc,DVc,1480),eP=wjb(jTc,'TerrainShader',1349),KQ=wjb(VUc,'BleachBypassShader',1444),$Q=wjb(VUc,'HorizontalTiltShiftShader',1468),kR=wjb(VUc,'VerticalTiltShiftShader',1486),wO=wjb(tTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1241),uO=wjb(tTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1242),vO=wjb(tTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1243),fR=wjb(VUc,EVc,1481),dR=wjb(VUc,FVc,1482),eR=wjb(VUc,GVc,1483),dP=wjb(jTc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1350),bP=wjb(jTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1351),cP=wjb(jTc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1352),JQ=wjb(VUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1445),HQ=wjb(VUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1446),IQ=wjb(VUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1447),ZQ=wjb(VUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1469),XQ=wjb(VUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1470),YQ=wjb(VUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1471),jR=wjb(VUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1487),hR=wjb(VUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1488),iR=wjb(VUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1489),cR=wjb(VUc,'LuminosityShader',1474),bR=wjb(VUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1475),_Q=wjb(VUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1476),aR=wjb(VUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1477);DOc(xi)(38);