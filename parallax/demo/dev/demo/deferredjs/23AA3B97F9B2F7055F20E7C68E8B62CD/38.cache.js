function Huc(){}
function Luc(){}
function Ouc(){}
function ONc(){}
function rNc(){}
function vNc(){}
function yNc(){}
function KNc(){}
function RNc(){}
function Szc(){}
function Wzc(){}
function Zzc(){}
function bOc(){}
function fOc(){}
function iOc(){}
function iPc(){}
function ePc(){}
function lPc(){}
function LZb(a,b){a.b=b}
function G8b(a,b){a.k=b}
function uuc(a){this.a=a}
function xuc(a){this.a=a}
function Auc(a){this.a=a}
function Duc(){Duc=yQc;Cuc=new Huc}
function Quc(){Quc=yQc;Fuc=new Luc}
function Ruc(){Ruc=yQc;Guc=new Ouc}
function TNc(){TNc=yQc;INc=new ONc}
function nNc(){nNc=yQc;mNc=new rNc}
function ANc(){ANc=yQc;pNc=new vNc}
function BNc(){BNc=yQc;qNc=new yNc}
function GNc(){GNc=yQc;FNc=new KNc}
function UNc(){UNc=yQc;JNc=new RNc}
function ZNc(){ZNc=yQc;YNc=new bOc}
function kOc(){kOc=yQc;_Nc=new fOc}
function lOc(){lOc=yQc;aOc=new iOc}
function aPc(){aPc=yQc;_Oc=new ePc}
function nPc(){nPc=yQc;cPc=new iPc}
function oPc(){oPc=yQc;dPc=new lPc}
function Ozc(){Ozc=yQc;Nzc=new Szc}
function _zc(){_zc=yQc;Qzc=new Wzc}
function aAc(){aAc=yQc;Rzc=new Zzc}
function ruc(a,b){this.a=a;this.b=b}
function Jzc(){DJb.call(this,(Ozc(),Nzc))}
function kNc(){DJb.call(this,(nNc(),mNc))}
function DNc(){DJb.call(this,(GNc(),FNc))}
function WNc(){DJb.call(this,(ZNc(),YNc))}
function ZOc(){DJb.call(this,(aPc(),_Oc))}
function kuc(a){a.w+=1;a.w==3&&yQb(a.v,true)}
function luc(){Fac.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function juc(a,b,c,d){var e,f,g;g=new r3b(b);RNb(pu(OSb(j$b(g).i,NXc),227),c);f=new l9b;e=new y8b(new DXb(a.u,a.t),g);Y6b(e._,-500);nQb(f,e);SHb(a.G.k,f,a.c,d,true)}
function iuc(a,b,c,d,e,f){var g,i;g=new j1b;c1b(g,new f4b(16755285));g.j=true;h1b(g,(b_b(),$$b));i=new I8b(b,g);i.d=c;G8b(i,xu(600*rlb()));W6b(i._,d,e,f);t4b(i.cb,1.5707963267948966);i.S=true;i.U=true;nQb(a.H,i);Pqb(a.n,i)}
var XYc='enableDiffuse1',YYc='enableDiffuse2',SYc='heightMap',bZc='heightmap',cZc='r',WYc='tDetail',UYc='tDiffuse1',VYc='tDiffuse2',$Yc='uRepeatOverlay';GU(1242,1,hSc);_.zb=function guc(){fac(this.b,new luc(this.a))};GU(1243,973,{78:1,186:1,339:1},luc);_.Ud=function muc(a){kuc(this)};_.Gd=function nuc(a){this.u=a.a.Z;this.t=a.a.Y;RNb(pu(OSb(j$b(this.f.b).i,QYc),227),new kkb(6/this.u));RNb(pu(OSb(j$b(this.D.b).i,RYc),227),new kkb(6/this.t))};_.nb=function ouc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;et((dyb(),cyb),(nyb(),myb),this);this.b=new oRb(40,GHb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new bRb(this.u,this.t,-10000,10000);W6b(this.b._,-1200,800,1200);Y6b(this.c._,100);this.s=new l9b;nQb(this.s,this.c);this.d=new ixb(this.b,this.G.c);V6b(this.d.v,0);this.d.s=1;this.d.A=1.2;fxb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;dxb(this.d,0.15);j9b(this.H,new _8b(328965,2000,4000));nQb(this.H,new TYb(1118481));this.e=new uZb(16777215,1.15);W6b(this.e._,500,2000,0);nQb(this.H,this.e);this.q=new NZb(16729088,1.5,0);V6b(this.q._,0);nQb(this.H,this.q);this.g=new nPb(256,256);FOb(this.g,(qFb(),lFb));DOb(this.g,(fFb(),dFb));AOb(this.g,(bDb(),_Cb));BOb(this.g,false);this.o=new nPb(256,256);FOb(this.o,lFb);DOb(this.o,dFb);AOb(this.o,_Cb);BOb(this.o,false);n=new WNc;u=n.i;RNb(pu(u.a[DUc],227),new kkb(0.05));i6b(pu(pu(u.a[rYc],227).d,298),256,256);RNb(pu(u.a[SYc],227),this.g);s=new nPb(2048,2048);FOb(s,lFb);DOb(s,dFb);AOb(s,_Cb);s.r=false;MOb(s,(IGb(),HGb));NOb(s,HGb);c=new TOb('./static/textures/terrain/grasslight-big.jpg',new ruc(this,s));MOb(c,HGb);NOb(c,HGb);d=new TOb('./static/textures/terrain/backgrounddetailed6.jpg',this);MOb(d,HGb);NOb(d,HGb);b=new TOb('./static/textures/terrain/grasslight-big-nm.jpg',this);MOb(b,HGb);NOb(b,HGb);t=new Jzc;this.B=t.i;RNb(pu(OSb(this.B,lYc),227),this.o);RNb(pu(OSb(this.B,mYc),227),new kkb(3.5));RNb(pu(OSb(this.B,TYc),227),this.g);RNb(pu(OSb(this.B,UYc),227),c);RNb(pu(OSb(this.B,VYc),227),d);RNb(pu(OSb(this.B,nYc),227),s);RNb(pu(OSb(this.B,WYc),227),b);RNb(pu(OSb(this.B,XYc),227),(ljb(),ljb(),kjb));RNb(pu(OSb(this.B,YYc),227),kjb);RNb(pu(OSb(this.B,LXc),227),kjb);c4b(pu(pu(OSb(this.B,RXc),227).d,294),16777215);c4b(pu(pu(OSb(this.B,SXc),227).d,294),16777215);c4b(pu(pu(OSb(this.B,QXc),227).d,294),1118481);RNb(pu(OSb(this.B,qYc),227),new kkb(30));RNb(pu(OSb(this.B,ZYc),227),new kkb(375));i6b(pu(pu(OSb(this.B,$Yc),227).d,298),6,6);this.A=new Htb;dpb(this.A,uYc,new TNb((kOb(),YNb),new kkb(1)));dpb(this.A,_Yc,new TNb(eOb,new m6b(1.5,1.5)));dpb(this.A,aZc,new TNb(eOb,new m6b(0,0)));this.k=new Htb;i=new q3b((Duc(),Cuc));yJb(j$b(i),this.A);i.c=false;i.b=true;dpb(this.k,bZc,i);j=new r3b(n);yJb(j$b(j),u);j.c=false;j.b=true;dpb(this.k,GXc,j);k=new r3b(t);yJb(j$b(k),this.B);k.c=true;k.b=true;dpb(this.k,'terrain',k);o=new DXb(this.u,this.t);p=new q0b;k0b(p,new f4b(0));this.r=new y8b(o,p);Y6b(this.r._,-500);nQb(this.s,this.r);g=new EXb(6000,6000,64,64);TRb(g);this.v=new y8b(g,k);W6b(this.v._,0,-125,0);s4b(this.v.cb,-1.5707963267948966);yQb(this.v,false);nQb(this.H,this.v);cIb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;$Hb(this.G.k,false);q=new DKc(this.H,this.b);f=new eKc(0.6);e=new HKc(new NKc);RNb(pu(OSb(j$b(e.b).i,XXc),227),new kkb(0.65));this.f=new HKc(new kNc);this.D=new HKc(new ZOc);RNb(pu(OSb(j$b(this.f.b).i,QYc),227),new kkb(6/this.u));RNb(pu(OSb(j$b(this.D.b).i,RYc),227),new kkb(6/this.t));RNb(pu(OSb(j$b(this.f.b).i,cZc),227),new kkb(0.5));RNb(pu(OSb(j$b(this.D.b).i,cZc),227),new kkb(0.5));this.D.a=true;r=new nPb(this.u,this.t);FOb(s,kFb);DOb(s,dFb);AOb(s,_Cb);s.f=false;s.r=false;a=new wKc(this.G.k,r);Pqb(a.c,q);Pqb(a.c,f);Pqb(a.c,e);uKc(a,this.f);uKc(a,this.D);this.n=new Zqb;new RAc('./static/models/animated/parrot.js',new uuc(this));new RAc(PYc,new xuc(this));new RAc('./static/models/animated/stork.js',new Auc(this));this.p=rh()};_.ob=function puc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){gxb(this.d);this.j=C4b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;b4b(this.H.a.c,0.1,e,this.j);cIb(this.G.k,this.H.a.c,1);bZb(this.e,0.1+f*1.0499999999999998);LZb(this.q,0.9+f*0.6);RNb(pu(OSb(this.B,mYc),227),new kkb(0.6+f*2.9));if(this.C){this.a=C4b(this.a+-7.5E-4,0,0.05);RNb(pu($ob(this.A,uYc),227),new kkb(pu(pu($ob(this.A,uYc),227).d,150).a+b*this.a));e6b(pu(pu($ob(this.A,aZc),227).d,298),b*0.05);j6b(pu(pu(OSb(this.B,dZc),227).d,298),4*pu(pu($ob(this.A,aZc),227).d,298).c);YTb(this.r,pu($ob(this.k,bZc),283));SHb(this.G.k,this.s,this.c,this.g,true);YTb(this.r,pu($ob(this.k,GXc),283));SHb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=pu(Sqb(this.n,c),306);H8b(d,xu(1000*b));e6b(d._,d.d*b);d._.c>2000&&j6b(d._,-1500-rlb()*500)}SHb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;GU(1244,1,{},ruc);_.Ud=function suc(a){kuc(this.a);juc(this.a,new DNc,a,this.b)};GU(1245,1,{},uuc);_.zf=function vuc(a,b){MAc((pu(a,340),pu(b,243)));iuc(this.a,pu(b,243),500,-3500,500,700);iuc(this.a,pu(b,243),500,-3000-rlb()*500,500,-200);iuc(this.a,pu(b,243),500,-3000-rlb()*500,500,200);iuc(this.a,pu(b,243),500,-3000-rlb()*500,500,1000)};GU(1246,1,{},xuc);_.zf=function yuc(a,b){MAc((pu(a,340),pu(b,243)));iuc(this.a,pu(b,243),1000,-3000-rlb()*500,350,40)};GU(1247,1,{},Auc);_.zf=function Buc(a,b){MAc((pu(a,340),pu(b,243)));iuc(this.a,pu(b,243),1000,-3000-rlb()*500,350,340)};var Cuc;GU(1248,1,{},Huc);_.Od=function Iuc(){return Quc(),Fuc};_.Pd=function Juc(){return Ruc(),Guc};var Fuc,Guc;GU(1249,1,{},Luc);_.nc=function Muc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};GU(1250,1,{},Ouc);_.nc=function Puc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};GU(1357,731,WRc,Jzc);_.Ld=function Kzc(){yJb(this,oOb());yJb(this,pOb());yJb(this,qOb());rJb(this,XYc,new TNb((kOb(),_Nb),(ljb(),ljb(),jjb)));rJb(this,YYc,new TNb(_Nb,jjb));rJb(this,LXc,new TNb(_Nb,jjb));rJb(this,eZc,new TNb(_Nb,jjb));rJb(this,UYc,new SNb(cOb));rJb(this,VYc,new SNb(cOb));rJb(this,WYc,new SNb(cOb));rJb(this,lYc,new SNb(cOb));rJb(this,nYc,new SNb(cOb));rJb(this,TYc,new SNb(cOb));rJb(this,mYc,new TNb(YNb,new kkb(1)));rJb(this,fZc,new TNb(YNb,new kkb(0)));rJb(this,ZYc,new TNb(YNb,new kkb(1)));rJb(this,RXc,new TNb(XNb,new f4b(15658734)));rJb(this,SXc,new TNb(XNb,new f4b(1118481)));rJb(this,QXc,new TNb(XNb,new f4b(328965)));rJb(this,qYc,new TNb(YNb,new kkb(30)));rJb(this,XXc,new TNb(YNb,new kkb(1)));rJb(this,'uRepeatBase',new TNb(eOb,new m6b(1,1)));rJb(this,$Yc,new TNb(eOb,new m6b(1,1)));rJb(this,dZc,new TNb(eOb,new m6b(0,0)))};_.Md=function Lzc(a){var b,c;c=new vrb(fu(BS,DQc,1,[YXc,ZXc]));b=new vrb(fu(BS,DQc,1,[_Xc,aYc,bYc]));AJb(this,IJb(a,fu(ES,DQc,173,[c,b])))};_.Nd=function Mzc(a){var b,c;c=new vrb(fu(BS,DQc,1,[cYc]));b=new vrb(fu(BS,DQc,1,[dYc]));BJb(this,IJb(a,fu(ES,DQc,173,[c,b])))};var Nzc;GU(1358,1,{},Szc);_.Od=function Tzc(){return _zc(),Qzc};_.Pd=function Uzc(){return aAc(),Rzc};var Qzc,Rzc;GU(1359,1,{},Wzc);_.nc=function Xzc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};GU(1360,1,{},Zzc);_.nc=function $zc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};GU(1498,731,WRc,kNc);_.Ld=function lNc(){rJb(this,NXc,new SNb((kOb(),cOb)));rJb(this,QYc,new TNb(YNb,new kkb(0.001953125)));rJb(this,cZc,new TNb(YNb,new kkb(0.35)))};var mNc;GU(1499,1,{},rNc);_.Od=function sNc(){return ANc(),pNc};_.Pd=function tNc(){return BNc(),qNc};var pNc,qNc;GU(1500,1,{},vNc);_.nc=function wNc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};GU(1501,1,{},yNc);_.nc=function zNc(){return IYc};GU(1504,731,WRc,DNc);_.Ld=function ENc(){rJb(this,NXc,new SNb((kOb(),cOb)))};var FNc;GU(1505,1,{},KNc);_.Od=function LNc(){return TNc(),INc};_.Pd=function MNc(){return UNc(),JNc};var INc,JNc;GU(1506,1,{},ONc);_.nc=function PNc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};GU(1507,1,{},RNc);_.nc=function SNc(){return IYc};GU(1510,731,WRc,WNc);_.Ld=function XNc(){rJb(this,SYc,new SNb((kOb(),cOb)));rJb(this,rYc,new TNb(eOb,new m6b(512,512)));rJb(this,_Yc,new TNb(eOb,new m6b(1,1)));rJb(this,DUc,new TNb(YNb,new kkb(0.05)))};var YNc;GU(1511,1,{},bOc);_.Od=function cOc(){return kOc(),_Nc};_.Pd=function dOc(){return lOc(),aOc};var _Nc,aOc;GU(1512,1,{},fOc);_.nc=function gOc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};GU(1513,1,{},iOc);_.nc=function jOc(){return IYc};GU(1528,731,WRc,ZOc);_.Ld=function $Oc(){rJb(this,NXc,new SNb((kOb(),cOb)));rJb(this,RYc,new TNb(YNb,new kkb(0.001953125)));rJb(this,cZc,new TNb(YNb,new kkb(0.35)))};var _Oc;GU(1529,1,{},ePc);_.Od=function fPc(){return nPc(),cPc};_.Pd=function gPc(){return oPc(),dPc};var cPc,dPc;GU(1530,1,{},iPc);_.nc=function jPc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};GU(1531,1,{},lPc);_.nc=function mPc(){return IYc};var qO=$jb(bXc,'TerrainDynamic$DemoScene',1243),mO=$jb(bXc,'TerrainDynamic$DemoScene$1',1244),nO=$jb(bXc,'TerrainDynamic$DemoScene$2',1245),oO=$jb(bXc,'TerrainDynamic$DemoScene$3',1246),pO=$jb(bXc,'TerrainDynamic$DemoScene$4',1247),tR=$jb(gZc,hZc,1510),bP=$jb(TWc,'TerrainShader',1357),lR=$jb(gZc,'HorizontalTiltShiftShader',1498),FR=$jb(gZc,'VerticalTiltShiftShader',1528),tO=$jb(bXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1248),rO=$jb(bXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1249),sO=$jb(bXc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1250),sR=$jb(gZc,iZc,1511),qR=$jb(gZc,jZc,1512),rR=$jb(gZc,kZc,1513),aP=$jb(TWc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1358),$O=$jb(TWc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1359),_O=$jb(TWc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1360),kR=$jb(gZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1499),iR=$jb(gZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1500),jR=$jb(gZc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1501),ER=$jb(gZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1529),CR=$jb(gZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1530),DR=$jb(gZc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1531),pR=$jb(gZc,'LuminosityShader',1504),oR=$jb(gZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1505),mR=$jb(gZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1506),nR=$jb(gZc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1507);vSc(xi)(38);