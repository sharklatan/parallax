function tLb(){}
function xLb(){}
function ALb(){}
function pLb(){pLb=yQc;oLb=new tLb}
function CLb(){CLb=yQc;rLb=new xLb}
function DLb(){DLb=yQc;sLb=new ALb}
function mLb(){DJb.call(this,(pLb(),oLb))}
function tmc(){Fac.call(this);this.c=0;this.d=0}
GU(755,731,WRc,mLb);_.Ld=function nLb(){rJb(this,'mRefractionRatio',new TNb((kOb(),YNb),new kkb(1.02)));rJb(this,'mFresnelBias',new TNb(YNb,new kkb(0.1)));rJb(this,'mFresnelPower',new TNb(YNb,new kkb(2)));rJb(this,'mFresnelScale',new TNb(YNb,new kkb(1)));rJb(this,gYc,new SNb(cOb))};var oLb;GU(756,1,{},tLb);_.Od=function uLb(){return CLb(),rLb};_.Pd=function vLb(){return DLb(),sLb};var rLb,sLb;GU(757,1,{},xLb);_.nc=function yLb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};GU(758,1,{},ALb);_.nc=function BLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};GU(1139,1,hSc);_.zb=function rmc(){fac(this.b,new tmc(this.a))};GU(1140,973,{328:1},tmc);_.nb=function umc(){var a,b,c,d,e,f,g,i,j;this.a=new oRb(60,GHb(this.G.k),1,100000);Y6b(this.a._,3200);this.b=new oRb(60,GHb(this.G.k),1,100000);this.e=new l9b;a=new LXb(100,32,16);j=new _Ob('./static/textures/cube/park2/*.jpg');AOb(j,(bDb(),_Cb));g=new mLb;RNb(pu(OSb(g.i,gYc),227),j);c=new r3b(g);this.f=new Zqb;for(b=0;b<500;b++){e=new y8b(a,c);j6b(e._,rlb()*10000-5000);k6b(e._,rlb()*10000-5000);Y6b(e._,rlb()*10000-5000);V6b(e.eb,rlb()*3+1);nQb(this.H,e);Pqb(this.f,e)}this.H.W=false;i=new dKb;RNb(pu(OSb(i.i,gYc),227),j);f=new r3b(i);u$b(f,(g0b(),d0b));d=new y8b(new WWb(100000,100000,100000),f);nQb(this.e,d);$Hb(this.G.k,false)};_.ob=function vmc(a){var b,c,d,e;e=1.0E-4*a;e6b(this.a._,(this.c-this.a._.c)*0.05);f6b(this.a._,(-this.d-this.a._.d)*0.05);MQb(this.a,this.H._);m4b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=pu(Sqb(this.f,b),305);j6b(d._,5000*Math.cos(e+b));k6b(d._,5000*Math.sin(e+b*1.1))}zHb(this.G.k,true);SHb(this.G.k,this.e,this.b,null,false);SHb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var zM=$jb($Wc,'MaterialsCubemapFresnel$DemoScene',1140),_F=$jb(hYc,'FresnelShader',755),$F=$jb(hYc,'FresnelShader_Resources_default_InlineClientBundleGenerator',756),YF=$jb(hYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',757),ZF=$jb(hYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',758);vSc(xi)(21);