function Ipc(){}
function Mpc(){}
function Ppc(){}
function Xsc(){}
function _sc(){}
function ctc(){}
function Mhc(a){this.b=a}
function etc(){etc=cFc;Vsc=new _sc}
function ftc(){ftc=cFc;Wsc=new ctc}
function Tsc(){Tsc=cFc;Ssc=new Xsc}
function Epc(){Epc=cFc;Dpc=new Ipc}
function Rpc(){Rpc=cFc;Gpc=new Mpc}
function Spc(){Spc=cFc;Hpc=new Ppc}
function Bpc(){eHb.call(this,(Epc(),Dpc))}
function Osc(){eHb.call(this,(Tsc(),Ssc))}
function Ihc(){q7b.call(this);this.e=0;this.f=0}
function Hhc(a,b){var c,d,e,f,g,i;d=new $Lb(pMc);d.n=4;Y2b(d.C,0.998,0.998);Y2b(d.B,0.001,0.001);ULb(d,(lEb(),kEb));VLb(d,kEb);ILb(d,(eBb(),cBb));e=new $Lb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');Y2b(e.C,0.998,0.998);Y2b(e.B,0.001,0.001);ULb(e,kEb);VLb(e,kEb);ILb(e,cBb);c=new $Lb('./static/models/obj/leeperrysmith/Map-COL.jpg');Y2b(c.C,0.998,0.998);Y2b(c.B,0.001,0.001);ULb(c,kEb);VLb(c,kEb);ILb(c,cBb);g=new Osc;i=g.j;ZKb(Fu(i.b[rMc],225),(xhb(),xhb(),whb));ZKb(Fu(i.b[sMc],225),whb);ZKb(Fu(i.b[tMc],225),a.c.f);ZKb(Fu(i.b[uMc],225),c);ZKb(Fu(i.b[vMc],225),d);ZKb(Fu(i.b[wMc],225),e);S0b(Fu(Fu(i.b[xMc],225).e,292),10526880);S0b(Fu(Fu(i.b[yMc],225).e,292),10526880);S0b(Fu(Fu(i.b[zMc],225).e,292),10526880);ZKb(Fu(i.b[AMc],225),new wib(0.145));ZKb(Fu(i.b[BMc],225),new wib(0.75));ZKb(Fu(i.b[CMc],225),new wib(16));x4b(Fu(Fu(i.b[DMc],225).e,300),0.001,0.001,0.998,0.998);f=new f0b(g);f.d=true;a.d=new l5b(b,f);$2b(a.d.ab,-50);I3b(a.d.fb,100);ANb(a.d,true);a.d.V=true;vNb(a.G,a.d)}
var rMc='enableBump',tMc='tBeckmann',AMc='uRoughness',BMc='uSpecularBrightness';bT(1100,1,OGc);_.Db=function Fhc(){S6b(this.c,new Ihc(this.b))};bT(1101,955,{322:1},Ihc);_.ob=function Jhc(){var a,b,c,d,e,f,g;this.b=new vOb(27,hFb(this.F.n),1,10000);L3b(this.b.ab,1200);vNb(this.G,new WVb(5592405));d=new PWb(16777215,1.5,1000);J3b(d.ab,0,0,600);vNb(this.G,d);f=new XWb(1);J3b(f.ab,0.05,0.05,1);vNb(this.G,f);f.ab.lf(700);f.T=true;f.u=true;f.J=2048;f.H=2048;f.B=200;f.A=1500;f.e=40;f.v=-0.005;f.F=0.15;a=new xWb(16777215,0.85);J3b(a.ab,1,-0.5,1);R0b(a.M,0.6,1,0.85);vNb(this.G,a);a.ab.lf(500);a.T=true;a.J=2048;a.H=2048;a.B=200;a.A=1500;a.f=-500;a.g=500;a.i=500;a.e=-500;a.v=-0.005;a.F=0.15;b=new xWb(16777215,0.85);J3b(b.ab,1,-0.5,-1);vNb(this.G,b);new hDc(new Bpc);c=new hDc(new DDc);c.b=true;g=new vMb(512,512);NLb(g,(VCb(),PCb));LLb(g,(KCb(),ICb));ILb(g,(eBb(),cBb));g.g=false;this.c=new ZCc(this.F.n,g);new Wtc(qMc,new Mhc(this));FFb(this.F.n,new V0b(5001561),1);e=new zEb(this.F.n,this.G);e.i=false;BFb(this.F.n,false);this.F.n.bb=true;this.F.n.cb=true};_.pb=function Khc(a){var b,c;b=this.e*0.001;c=this.f*0.001;if(this.d){_0b(this.d.db,0.05*(b-this.d.db.e));$0b(this.d.db,0.05*(c-this.d.db.d))}bFb(this.F.n);tFb(this.F.n,this.G,this.b,null,false)};_.e=0;_.f=0;bT(1102,1,{},Mhc);_.yf=function Nhc(a,b){Hhc(this.b,Fu(b,241))};bT(1208,720,BGc,Bpc);_.Md=function Cpc(){};var Dpc;bT(1209,1,{},Ipc);_.Pd=function Jpc(){return Rpc(),Gpc};_.Qd=function Kpc(){return Spc(),Hpc};var Gpc,Hpc;bT(1210,1,{},Mpc);_.dc=function Npc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};bT(1211,1,{},Ppc);_.dc=function Qpc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};bT(1284,720,BGc,Osc);_.Md=function Psc(){_Gb(this,wLb());_Gb(this,xLb());_Gb(this,yLb());UGb(this,rMc,new _Kb((sLb(),hLb),cjb(0)));UGb(this,sMc,new _Kb(hLb,cjb(0)));UGb(this,uMc,new $Kb(kLb));UGb(this,tMc,new $Kb(kLb));UGb(this,yMc,new _Kb(dLb,new V0b(15658734)));UGb(this,zMc,new _Kb(dLb,new V0b(1118481)));UGb(this,xMc,new _Kb(dLb,new V0b(328965)));UGb(this,EMc,new _Kb(eLb,new wib(1)));UGb(this,AMc,new _Kb(eLb,new wib(0.15)));UGb(this,BMc,new _Kb(eLb,new wib(0.75)));UGb(this,vMc,new $Kb(kLb));UGb(this,CMc,new _Kb(eLb,new wib(1)));UGb(this,wMc,new $Kb(kLb));UGb(this,DMc,new _Kb(qLb,new B4b(0,0,1,1)));UGb(this,'uWrapRGB',new _Kb(oLb,new P3b(0.75,0.375,0.1875)))};_.Nd=function Qsc(a){var b,c;c=new Hpb(vu($Q,iFc,1,[FMc,GMc,HMc]));b=new Hpb(vu($Q,iFc,1,[IMc,JMc,KMc]));bHb(this,jHb(a,vu(bR,iFc,173,[c,b])))};_.Od=function Rsc(a){var b,c;c=new Hpb(vu($Q,iFc,1,[LMc]));b=new Hpb(vu($Q,iFc,1,[MMc]));cHb(this,jHb(a,vu(bR,iFc,173,[c,b])))};var Ssc;bT(1285,1,{},Xsc);_.Pd=function Ysc(){return etc(),Vsc};_.Qd=function Zsc(){return ftc(),Wsc};var Vsc,Wsc;bT(1286,1,{},_sc);_.dc=function atc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};bT(1287,1,{},ctc);_.dc=function dtc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var jM=kib(HLc,'MaterialsBumpmapSkin$DemoScene',1101),iM=kib(HLc,'MaterialsBumpmapSkin$DemoScene$1',1102),fO=kib(ALc,'BeckmannShader',1208),eO=kib(ALc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1209),cO=kib(ALc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1210),dO=kib(ALc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1211),uO=kib(ALc,'SkinSimpleShader',1284),tO=kib(ALc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1285),rO=kib(ALc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1286),sO=kib(ALc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1287);_Gc(Hi)(18);