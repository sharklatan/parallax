function ltc(){}
function ptc(){}
function stc(){}
function Gwc(){}
function Kwc(){}
function Nwc(){}
function tHc(){}
function xHc(){}
function AHc(){}
function PIc(){}
function TIc(){}
function WIc(){}
function WJc(){}
function gJc(){}
function kJc(){}
function nJc(){}
function zJc(){}
function DJc(){}
function GJc(){}
function SJc(){}
function ZJc(){}
function yZb(a,b){a.b=b}
function g8b(a,b){a.k=b}
function ZGc(a,b){sqb(a.b,b)}
function $sc(a){this.a=a}
function btc(a){this.a=a}
function etc(a){this.a=a}
function htc(){htc=TKc;gtc=new ltc}
function utc(){utc=TKc;jtc=new ptc}
function vtc(){vtc=TKc;ktc=new stc}
function Cwc(){Cwc=TKc;Bwc=new Gwc}
function Pwc(){Pwc=TKc;Ewc=new Kwc}
function Qwc(){Qwc=TKc;Fwc=new Nwc}
function pHc(){pHc=TKc;oHc=new tHc}
function CHc(){CHc=TKc;rHc=new xHc}
function DHc(){DHc=TKc;sHc=new AHc}
function LIc(){LIc=TKc;KIc=new PIc}
function YIc(){YIc=TKc;NIc=new TIc}
function ZIc(){ZIc=TKc;OIc=new WIc}
function _Jc(){_Jc=TKc;QJc=new WJc}
function cJc(){cJc=TKc;bJc=new gJc}
function pJc(){pJc=TKc;eJc=new kJc}
function qJc(){qJc=TKc;fJc=new nJc}
function vJc(){vJc=TKc;uJc=new zJc}
function IJc(){IJc=TKc;xJc=new DJc}
function JJc(){JJc=TKc;yJc=new GJc}
function OJc(){OJc=TKc;NJc=new SJc}
function aKc(){aKc=TKc;RJc=new ZJc}
function Xsc(a,b){this.a=a;this.b=b}
function xwc(){EIb.call(this,(Cwc(),Bwc))}
function mHc(){EIb.call(this,(pHc(),oHc))}
function IIc(){EIb.call(this,(LIc(),KIc))}
function _Ic(){EIb.call(this,(cJc(),bJc))}
function sJc(){EIb.call(this,(vJc(),uJc))}
function LJc(){EIb.call(this,(OJc(),NJc))}
function Qsc(a){a.w+=1;a.w==3&&zPb(a.v,true)}
function Rsc(){gac.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Psc(a,b,c,d){var e,f,g;g=new e3b(b);SMb(pu(WRb(YZb(g).i,iSc),225),c);f=new N8b;e=new oYb(new LWb(a.u,a.t),g);M6b(e._,-500);oPb(f,e);TGb(a.G.k,f,a.c,d,true)}
function Osc(a,b,c,d,e,f){var g,i;g=new Y0b;R0b(g,new V3b(16755285));g.j=true;W0b(g,(Q$b(),N$b));i=new i8b(b,g);i.d=c;g8b(i,xu(600*Vkb()));K6b(i._,d,e,f);h4b(i.cb,1.5707963267948966);i.S=true;i.U=true;oPb(a.H,i);sqb(a.n,i)}
var yTc='enableDiffuse1',zTc='enableDiffuse2',rTc='h',tTc='heightMap',ETc='heightmap',DTc='offset',FTc='r',xTc='tDetail',vTc='tDiffuse1',wTc='tDiffuse2',BTc='uRepeatOverlay',sTc='v';hU(1248,1,DMc);_.zb=function Msc(){I9b(this.b,new Rsc(this.a))};hU(1249,978,{78:1,186:1,338:1},Rsc);_.Ud=function Ssc(a){Qsc(this)};_.Gd=function Tsc(a){this.u=a.a.Z;this.t=a.a.Y;SMb(pu(WRb(YZb(this.f.b).i,rTc),225),new Ojb(6/this.u));SMb(pu(WRb(YZb(this.D.b).i,sTc),225),new Ojb(6/this.t))};_.nb=function Usc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;et((Jxb(),Ixb),(Txb(),Sxb),this);this.b=new rQb(40,HGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new cQb(this.u,this.t,-10000,10000);K6b(this.b._,-1200,800,1200);M6b(this.c._,100);this.s=new N8b;oPb(this.s,this.c);this.d=new Owb(this.b,this.G.c);J6b(this.d.v,0);this.d.s=1;this.d.A=1.2;Lwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;Jwb(this.d,0.15);L8b(this.H,new B8b(328965,2000,4000));oPb(this.H,new GYb(1118481));this.e=new hZb(16777215,1.15);K6b(this.e._,500,2000,0);oPb(this.H,this.e);this.q=new AZb(16729088,1.5,0);J6b(this.q._,0);oPb(this.H,this.q);this.g=new oOb(256,256);GNb(this.g,(sEb(),nEb));ENb(this.g,(hEb(),fEb));BNb(this.g,(DCb(),BCb));CNb(this.g,false);this.o=new oOb(256,256);GNb(this.o,nEb);ENb(this.o,fEb);BNb(this.o,BCb);CNb(this.o,false);n=new sJc;u=n.i;SMb(pu(u.a[ZOc],225),new Ojb(0.05));Y5b(pu(pu(u.a[OSc],225).d,297),256,256);SMb(pu(u.a[tTc],225),this.g);s=new oOb(2048,2048);GNb(s,nEb);ENb(s,fEb);BNb(s,BCb);s.r=false;NNb(s,(KFb(),JFb));ONb(s,JFb);c=new UNb('./static/textures/terrain/grasslight-big.jpg',new Xsc(this,s));NNb(c,JFb);ONb(c,JFb);d=new UNb('./static/textures/terrain/backgrounddetailed6.jpg',this);NNb(d,JFb);ONb(d,JFb);b=new UNb('./static/textures/terrain/grasslight-big-nm.jpg',this);NNb(b,JFb);ONb(b,JFb);t=new xwc;this.B=t.i;SMb(pu(WRb(this.B,ISc),225),this.o);SMb(pu(WRb(this.B,JSc),225),new Ojb(3.5));SMb(pu(WRb(this.B,uTc),225),this.g);SMb(pu(WRb(this.B,vTc),225),c);SMb(pu(WRb(this.B,wTc),225),d);SMb(pu(WRb(this.B,KSc),225),s);SMb(pu(WRb(this.B,xTc),225),b);SMb(pu(WRb(this.B,yTc),225),(Pib(),Pib(),Oib));SMb(pu(WRb(this.B,zTc),225),Oib);SMb(pu(WRb(this.B,gSc),225),Oib);S3b(pu(pu(WRb(this.B,mSc),225).d,293),16777215);S3b(pu(pu(WRb(this.B,nSc),225).d,293),16777215);S3b(pu(pu(WRb(this.B,lSc),225).d,293),1118481);SMb(pu(WRb(this.B,NSc),225),new Ojb(30));SMb(pu(WRb(this.B,ATc),225),new Ojb(375));Y5b(pu(pu(WRb(this.B,BTc),225).d,297),6,6);this.A=new ltb;Iob(this.A,RSc,new UMb((lNb(),ZMb),new Ojb(1)));Iob(this.A,CTc,new UMb(fNb,new a6b(1.5,1.5)));Iob(this.A,DTc,new UMb(fNb,new a6b(0,0)));this.k=new ltb;i=new d3b((htc(),gtc));zIb(YZb(i),this.A);i.c=false;i.b=true;Iob(this.k,ETc,i);j=new e3b(n);zIb(YZb(j),u);j.c=false;j.b=true;Iob(this.k,cSc,j);k=new e3b(t);zIb(YZb(k),this.B);k.c=true;k.b=true;Iob(this.k,'terrain',k);o=new LWb(this.u,this.t);p=new d0b;Z_b(p,new V3b(0));this.r=new oYb(o,p);M6b(this.r._,-500);oPb(this.s,this.r);g=new MWb(6000,6000,64,64);$Qb(g);this.v=new oYb(g,k);K6b(this.v._,0,-125,0);g4b(this.v.cb,-1.5707963267948966);zPb(this.v,false);oPb(this.H,this.v);dHb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;_Gb(this.G.k,false);q=new gHc(this.H,this.b);f=new TGc(0.6);e=new jHc(new mHc);SMb(pu(WRb(YZb(e.b).i,sSc),225),new Ojb(0.65));this.f=new jHc(new IIc);this.D=new jHc(new LJc);SMb(pu(WRb(YZb(this.f.b).i,rTc),225),new Ojb(6/this.u));SMb(pu(WRb(YZb(this.D.b).i,sTc),225),new Ojb(6/this.t));SMb(pu(WRb(YZb(this.f.b).i,FTc),225),new Ojb(0.5));SMb(pu(WRb(YZb(this.D.b).i,FTc),225),new Ojb(0.5));this.D.a=true;r=new oOb(this.u,this.t);GNb(s,mEb);ENb(s,fEb);BNb(s,BCb);s.f=false;s.r=false;a=new _Gc(this.G.k,r);sqb(a.b,q);sqb(a.b,f);sqb(a.b,e);ZGc(a,this.f);ZGc(a,this.D);this.n=new Cqb;new Fxc('./static/models/animated/parrot.js',new $sc(this));new Fxc(qTc,new btc(this));new Fxc('./static/models/animated/stork.js',new etc(this));this.p=rh()};_.ob=function Vsc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Mwb(this.d);this.j=q4b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;R3b(this.H.a.c,0.1,e,this.j);dHb(this.G.k,this.H.a.c,1);QYb(this.e,0.1+f*1.0499999999999998);yZb(this.q,0.9+f*0.6);SMb(pu(WRb(this.B,JSc),225),new Ojb(0.6+f*2.9));if(this.C){this.a=q4b(this.a+-7.5E-4,0,0.05);SMb(pu(Dob(this.A,RSc),225),new Ojb(pu(pu(Dob(this.A,RSc),225).d,150).a+b*this.a));U5b(pu(pu(Dob(this.A,DTc),225).d,297),b*0.05);Z5b(pu(pu(WRb(this.B,GTc),225).d,297),4*pu(pu(Dob(this.A,DTc),225).d,297).c);eTb(this.r,pu(Dob(this.k,ETc),282));TGb(this.G.k,this.s,this.c,this.g,true);eTb(this.r,pu(Dob(this.k,cSc),282));TGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=pu(vqb(this.n,c),305);h8b(d,xu(1000*b));U5b(d._,d.d*b);d._.c>2000&&Z5b(d._,-1500-Vkb()*500)}TGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;hU(1250,1,{},Xsc);_.Ud=function Ysc(a){Qsc(this.a);Psc(this.a,new _Ic,a,this.b)};hU(1251,1,{},$sc);_.Bf=function _sc(a,b){Axc((pu(a,339),pu(b,242)));Osc(this.a,pu(b,242),500,-3500,500,700);Osc(this.a,pu(b,242),500,-3000-Vkb()*500,500,-200);Osc(this.a,pu(b,242),500,-3000-Vkb()*500,500,200);Osc(this.a,pu(b,242),500,-3000-Vkb()*500,500,1000)};hU(1252,1,{},btc);_.Bf=function ctc(a,b){Axc((pu(a,339),pu(b,242)));Osc(this.a,pu(b,242),1000,-3000-Vkb()*500,350,40)};hU(1253,1,{},etc);_.Bf=function ftc(a,b){Axc((pu(a,339),pu(b,242)));Osc(this.a,pu(b,242),1000,-3000-Vkb()*500,350,340)};var gtc;hU(1254,1,{},ltc);_.Od=function mtc(){return utc(),jtc};_.Pd=function ntc(){return vtc(),ktc};var jtc,ktc;hU(1255,1,{},ptc);_.nc=function qtc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};hU(1256,1,{},stc);_.nc=function ttc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};hU(1314,730,pMc,xwc);_.Ld=function ywc(){zIb(this,pNb());zIb(this,qNb());zIb(this,rNb());sIb(this,yTc,new UMb((lNb(),aNb),(Pib(),Pib(),Nib)));sIb(this,zTc,new UMb(aNb,Nib));sIb(this,gSc,new UMb(aNb,Nib));sIb(this,HTc,new UMb(aNb,Nib));sIb(this,vTc,new TMb(dNb));sIb(this,wTc,new TMb(dNb));sIb(this,xTc,new TMb(dNb));sIb(this,ISc,new TMb(dNb));sIb(this,KSc,new TMb(dNb));sIb(this,uTc,new TMb(dNb));sIb(this,JSc,new UMb(ZMb,new Ojb(1)));sIb(this,ITc,new UMb(ZMb,new Ojb(0)));sIb(this,ATc,new UMb(ZMb,new Ojb(1)));sIb(this,mSc,new UMb(YMb,new V3b(15658734)));sIb(this,nSc,new UMb(YMb,new V3b(1118481)));sIb(this,lSc,new UMb(YMb,new V3b(328965)));sIb(this,NSc,new UMb(ZMb,new Ojb(30)));sIb(this,sSc,new UMb(ZMb,new Ojb(1)));sIb(this,'uRepeatBase',new UMb(fNb,new a6b(1,1)));sIb(this,BTc,new UMb(fNb,new a6b(1,1)));sIb(this,GTc,new UMb(fNb,new a6b(0,0)))};_.Md=function zwc(a){var b,c;c=new _qb(fu(dS,YKc,1,[tSc,uSc]));b=new _qb(fu(dS,YKc,1,[wSc,xSc,ySc]));BIb(this,JIb(a,fu(gS,YKc,173,[c,b])))};_.Nd=function Awc(a){var b,c;c=new _qb(fu(dS,YKc,1,[zSc]));b=new _qb(fu(dS,YKc,1,[ASc]));CIb(this,JIb(a,fu(gS,YKc,173,[c,b])))};var Bwc;hU(1315,1,{},Gwc);_.Od=function Hwc(){return Pwc(),Ewc};_.Pd=function Iwc(){return Qwc(),Fwc};var Ewc,Fwc;hU(1316,1,{},Kwc);_.nc=function Lwc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};hU(1317,1,{},Nwc);_.nc=function Owc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};hU(1409,730,pMc,mHc);_.Ld=function nHc(){sIb(this,iSc,new TMb((lNb(),dNb)));sIb(this,sSc,new UMb(ZMb,new Ojb(1)))};var oHc;hU(1410,1,{},tHc);_.Od=function uHc(){return CHc(),rHc};_.Pd=function vHc(){return DHc(),sHc};var rHc,sHc;hU(1411,1,{},xHc);_.nc=function yHc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};hU(1412,1,{},AHc);_.nc=function BHc(){return ZSc};hU(1433,730,pMc,IIc);_.Ld=function JIc(){sIb(this,iSc,new TMb((lNb(),dNb)));sIb(this,rTc,new UMb(ZMb,new Ojb(0.001953125)));sIb(this,FTc,new UMb(ZMb,new Ojb(0.35)))};var KIc;hU(1434,1,{},PIc);_.Od=function QIc(){return YIc(),NIc};_.Pd=function RIc(){return ZIc(),OIc};var NIc,OIc;hU(1435,1,{},TIc);_.nc=function UIc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};hU(1436,1,{},WIc);_.nc=function XIc(){return ZSc};hU(1439,730,pMc,_Ic);_.Ld=function aJc(){sIb(this,iSc,new TMb((lNb(),dNb)))};var bJc;hU(1440,1,{},gJc);_.Od=function hJc(){return pJc(),eJc};_.Pd=function iJc(){return qJc(),fJc};var eJc,fJc;hU(1441,1,{},kJc);_.nc=function lJc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};hU(1442,1,{},nJc);_.nc=function oJc(){return ZSc};hU(1445,730,pMc,sJc);_.Ld=function tJc(){sIb(this,tTc,new TMb((lNb(),dNb)));sIb(this,OSc,new UMb(fNb,new a6b(512,512)));sIb(this,CTc,new UMb(fNb,new a6b(1,1)));sIb(this,ZOc,new UMb(ZMb,new Ojb(0.05)))};var uJc;hU(1446,1,{},zJc);_.Od=function AJc(){return IJc(),xJc};_.Pd=function BJc(){return JJc(),yJc};var xJc,yJc;hU(1447,1,{},DJc);_.nc=function EJc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};hU(1448,1,{},GJc);_.nc=function HJc(){return ZSc};hU(1451,730,pMc,LJc);_.Ld=function MJc(){sIb(this,iSc,new TMb((lNb(),dNb)));sIb(this,sTc,new UMb(ZMb,new Ojb(0.001953125)));sIb(this,FTc,new UMb(ZMb,new Ojb(0.35)))};var NJc;hU(1452,1,{},SJc);_.Od=function TJc(){return _Jc(),QJc};_.Pd=function UJc(){return aKc(),RJc};var QJc,RJc;hU(1453,1,{},WJc);_.nc=function XJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};hU(1454,1,{},ZJc);_.nc=function $Jc(){return ZSc};var uO=Cjb(zRc,'TerrainDynamic$DemoScene',1249),qO=Cjb(zRc,'TerrainDynamic$DemoScene$1',1250),rO=Cjb(zRc,'TerrainDynamic$DemoScene$2',1251),sO=Cjb(zRc,'TerrainDynamic$DemoScene$3',1252),tO=Cjb(zRc,'TerrainDynamic$DemoScene$4',1253),hR=Cjb(_Sc,JTc,1445),fP=Cjb(pRc,'TerrainShader',1314),LQ=Cjb(_Sc,'BleachBypassShader',1409),_Q=Cjb(_Sc,'HorizontalTiltShiftShader',1433),lR=Cjb(_Sc,'VerticalTiltShiftShader',1451),xO=Cjb(zRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1254),vO=Cjb(zRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1255),wO=Cjb(zRc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1256),gR=Cjb(_Sc,KTc,1446),eR=Cjb(_Sc,LTc,1447),fR=Cjb(_Sc,MTc,1448),eP=Cjb(pRc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1315),cP=Cjb(pRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1316),dP=Cjb(pRc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1317),KQ=Cjb(_Sc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1410),IQ=Cjb(_Sc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1411),JQ=Cjb(_Sc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1412),$Q=Cjb(_Sc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1434),YQ=Cjb(_Sc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1435),ZQ=Cjb(_Sc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1436),kR=Cjb(_Sc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1452),iR=Cjb(_Sc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1453),jR=Cjb(_Sc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1454),dR=Cjb(_Sc,'LuminosityShader',1439),cR=Cjb(_Sc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1440),aR=Cjb(_Sc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1441),bR=Cjb(_Sc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1442);RMc(xi)(38);