function Ljc(){}
function Rjc(){}
function nuc(){}
function wuc(){}
function tuc(){}
function Buc(){}
function Auc(){}
function Fuc(){}
function Euc(){}
function Exc(){}
function wxc(){}
function Hxc(){}
function Mxc(){}
function Lxc(){}
function Qxc(){}
function Pxc(){}
function Njc(){S7b.call(this)}
function ouc(){nFb.call(this,(suc(),ruc))}
function xxc(){nFb.call(this,(Dxc(),Cxc))}
function Dxc(){Dxc=rLc;Cxc=new Hxc}
function Txc(){Txc=rLc;Fxc=new Mxc}
function Uxc(){Uxc=rLc;Gxc=new Qxc}
function suc(){suc=rLc;ruc=new wuc}
function Iuc(){Iuc=rLc;uuc=new Buc}
function Juc(){Juc=rLc;vuc=new Fuc}
function Sjc(a,b){this.b=a;this.c=b}
function Mjc(a,b){var c,d,e,f,g,i;d=new hLb(KPc);d.n=4;eTb(d.y,0.998,0.998);eTb(d.x,0.001,0.001);eLb(d,(iDb(),hDb));fLb(d,hDb);WKb(d,(BAb(),zAb));e=new hLb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');eTb(e.y,0.998,0.998);eTb(e.x,0.001,0.001);eLb(e,hDb);fLb(e,hDb);WKb(e,zAb);c=new hLb('./static/models/obj/leeperrysmith/Map-COL.jpg');eTb(c.y,0.998,0.998);eTb(c.x,0.001,0.001);eLb(c,hDb);fLb(c,hDb);WKb(c,zAb);g=new xxc;i=g.j;jKb(ir(i.b[MPc],166),(Keb(),Keb(),Jeb));jKb(ir(i.b[NPc],166),Jeb);jKb(ir(i.b[OPc],166),a.c.f);jKb(ir(i.b[PPc],166),c);jKb(ir(i.b[QPc],166),d);jKb(ir(i.b[RPc],166),e);hOb(ir(ir(i.b[SPc],166).e,178),10526880);hOb(ir(ir(i.b[TPc],166).e,178),10526880);hOb(ir(ir(i.b[UPc],166).e,178),10526880);jKb(ir(i.b[VPc],166),new Ifb(0.145));jKb(ir(i.b[WPc],166),new Ifb(0.75));jKb(ir(i.b[XPc],166),new Ifb(16));uUb(ir(ir(i.b[YPc],166).e,194),0.001,0.001,0.998,0.998);f=new Y4b(g);f.d=true;a.d=new K5b(b,f);a.d.X.e=-50;JTb(a.d.ab,100);a.d.N=true;a.d.O=true;TMb(a.E,a.d)}
var MPc='enableBump',OPc='tBeckmann',VPc='uRoughness',WPc='uSpecularBrightness';_=Gjc.prototype;_.zb=function Kjc(){O7b(this.c,new Njc(this.b))};_=Njc.prototype=Ljc.prototype=new R7b;_.gC=function Ojc(){return JG};_.nb=function Pjc(){var a,b,c,d,e,f,g,i,j;this.b=new SNb(27,NDb(this.D.o),1,10000);this.b.X.c=1200;TMb(this.E,new v$b(5592405));f=new s_b(16777215,1.5,1000);ITb(f.X,0,0,600);TMb(this.E,f);i=new G_b(1);ITb(i.X,0.05,0.05,1);TMb(this.E,i);i.X.De(700);i.N=true;i.v=true;i.F=2048;i.D=2048;i.z=200;i.y=1500;i.d=40;i.w=-0.005;i.B=0.15;b=new $$b(16777215,0.85);ITb(b.X,1,-0.5,1);gOb(b.I,0.6,0.3,1);TMb(this.E,b);b.X.De(500);b.N=true;b.F=2048;b.D=2048;b.z=200;b.y=1500;b.f=-500;b.g=500;b.i=500;b.e=-500;b.w=-0.005;b.B=0.15;c=new $$b(16777215,0.85);ITb(c.X,1,-0.5,-1);TMb(this.E,c);new QGc(new ouc);d=new QGc(new MHc);d.b=true;j=new OLb(512,512);$Kb(j,(OBb(),IBb));YKb(j,(CBb(),ABb));WKb(j,(BAb(),zAb));j.g=false;this.c=new DGc(this.D.o,j);e=new Hyc;try{uyc(e,LPc,new Sjc(this,e))}catch(a){a=FM(a);if(lr(a,41)){IMb();iQ(HMb,(QP(),OP),tPc)}else throw a}$Db(this.D.o,5001561,1);g=new BDb(this.D.o,this.E);g.g=false;this.D.o.O=false;this.D.o.Q=true;this.D.o.R=true;this.D.o.T=true};_.ob=function Qjc(a){var b,c;b=this.e*0.001;c=this.f*0.001;if(this.d){aTb(this.d.$,0.05*(b-this.d.$.e));_Sb(this.d.$,0.05*(c-this.d.$.d))}KDb(this.D.o);SDb(this.D.o,this.E,this.b,null,false)};_.cM={261:1};_.b=null;_.c=null;_.d=null;_.e=0;_.f=0;_=Sjc.prototype=Rjc.prototype=new Jb;_.gC=function Tjc(){return IG};_.Cf=function Ujc(){Mjc(this.b,this.c.b)};_.b=null;_.c=null;_=ouc.prototype=nuc.prototype=new _Eb;_.gC=function puc(){return PI};_.Md=function quc(){};_.cM={164:1};var ruc;_=wuc.prototype=tuc.prototype=new Jb;_.gC=function xuc(){return OI};_.Pd=function yuc(){return Iuc(),uuc};_.Qd=function zuc(){return Juc(),vuc};var uuc=null,vuc=null;_=Buc.prototype=Auc.prototype=new Jb;_.gC=function Cuc(){return MI};_._b=function Duc(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=Fuc.prototype=Euc.prototype=new Jb;_.gC=function Guc(){return NI};_._b=function Huc(){return ZPc};_=xxc.prototype=wxc.prototype=new _Eb;_.gC=function yxc(){return aJ};_.Md=function zxc(){jFb(this,KKb());jFb(this,LKb());jFb(this,MKb());cFb(this,MPc,new lKb((FKb(),uKb),tgb(0)));cFb(this,NPc,new lKb(uKb,tgb(0)));cFb(this,PPc,new kKb(xKb));cFb(this,OPc,new kKb(xKb));cFb(this,TPc,new lKb(qKb,new mOb(15658734)));cFb(this,UPc,new lKb(qKb,new mOb(1118481)));cFb(this,SPc,new lKb(qKb,new mOb(328965)));cFb(this,$Pc,new lKb(rKb,new Ifb(1)));cFb(this,VPc,new lKb(rKb,new Ifb(0.15)));cFb(this,WPc,new lKb(rKb,new Ifb(0.75)));cFb(this,QPc,new kKb(xKb));cFb(this,XPc,new lKb(rKb,new Ifb(1)));cFb(this,RPc,new kKb(xKb));cFb(this,YPc,new lKb(DKb,new xUb(0,0,1,1)));cFb(this,'uWrapRGB',new lKb(BKb,new OTb(0.75,0.375,0.1875)))};_.Nd=function Axc(a){var b,c;c=new Cnb(_q(xL,{88:1,106:1},1,[_Pc,aQc,bQc]));b=new Cnb(_q(xL,{88:1,106:1},1,[cQc,dQc,eQc]));lFb(this,tFb(a,_q(BL,{88:1,106:1},117,[c,b])))};_.Od=function Bxc(a){var b,c;c=new Cnb(_q(xL,{88:1,106:1},1,[fQc]));b=new Cnb(_q(xL,{88:1,106:1},1,[gQc]));mFb(this,tFb(a,_q(BL,{88:1,106:1},117,[c,b])))};_.cM={164:1};var Cxc;_=Hxc.prototype=Exc.prototype=new Jb;_.gC=function Ixc(){return _I};_.Pd=function Jxc(){return Txc(),Fxc};_.Qd=function Kxc(){return Uxc(),Gxc};var Fxc=null,Gxc=null;_=Mxc.prototype=Lxc.prototype=new Jb;_.gC=function Nxc(){return ZI};_._b=function Oxc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=Qxc.prototype=Pxc.prototype=new Jb;_.gC=function Rxc(){return $I};_._b=function Sxc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var JG=xfb(iPc,'MaterialsBumpmapSkin$DemoScene',qE),IG=xfb(iPc,'MaterialsBumpmapSkin$DemoScene$1',gy),PI=xfb(lPc,'BeckmannShader',zB),OI=xfb(lPc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',gy),MI=xfb(lPc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',gy),NI=xfb(lPc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',gy),aJ=xfb(lPc,'SkinSimpleShader',zB),_I=xfb(lPc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',gy),ZI=xfb(lPc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',gy),$I=xfb(lPc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',gy);ILc(ge)(23);