function Omc(){}
function Ewc(){}
function Nwc(){}
function Kwc(){}
function Swc(){}
function Rwc(){}
function Wwc(){}
function Vwc(){}
function wGc(){}
function gIc(){}
function pIc(){}
function mIc(){}
function uIc(){}
function tIc(){}
function yIc(){}
function xIc(){}
function Pmc(){S7b.call(this)}
function Fwc(){nFb.call(this,(Jwc(),Iwc))}
function hIc(){nFb.call(this,(lIc(),kIc))}
function lIc(){lIc=rLc;kIc=new pIc}
function BIc(){BIc=rLc;nIc=new uIc}
function CIc(){CIc=rLc;oIc=new yIc}
function Jwc(){Jwc=rLc;Iwc=new Nwc}
function Zwc(){Zwc=rLc;Lwc=new Swc}
function $wc(){$wc=rLc;Mwc=new Wwc}
function xGc(){this.c=new Y4b(new hIc);jKb(ir(Z_b(this.c).j.b[DQc],166),(Keb(),Keb(),Ieb));jKb(ir(Z_b(this.c).j.b[EQc],166),new Ifb(0.35));jKb(ir(Z_b(this.c).j.b[FQc],166),new Ifb(0.95));jKb(ir(Z_b(this.c).j.b[GQc],166),tgb(2048));this.f=true;this.g=true}
var DQc='grayscale',EQc='nIntensity',GQc='sCount',FQc='sIntensity',wQc='texture1',yQc='texture2';_=Jmc.prototype;_.zb=function Nmc(){O7b(this.c,new Pmc(this.b))};_=Pmc.prototype=Omc.prototype=new R7b;_.gC=function Qmc(){return oH};_.Jd=function Rmc(a){fTb(ir(ir(this.e.b[vQc],166).e,192),a.b.p);gTb(ir(ir(this.e.b[vQc],166).e,192),a.b.o)};_.nb=function Smc(){var a,b,c,d,e,f,g;Jp((Ivb(),Hvb),(Tvb(),Svb),this);this.b=new SNb(35,NDb(this.D.o),1,3000);this.b.X.c=4;d=new Y4b(new Fwc);this.e=Z_b(d).j;f=new hLb('./static/textures/lava/cloud.png');eLb(f,(iDb(),hDb));fLb(f,hDb);jKb(ir(this.e.b[wQc],166),f);g=new hLb(xQc);eLb(g,hDb);fLb(g,hDb);jKb(ir(this.e.b[yQc],166),g);this.c=new K5b(new YYb(0.65,0.3,30,30),d);this.c.$.d=0.3;TMb(this.E,this.c);a=new CGc(this.D.o);e=new MGc(this.E,this.b);b=new tGc(1.25);c=new xGc;c.b=true;Pmb(a.c,e);Pmb(a.c,b);Pmb(a.c,c);this.D.o.O=false;this.d=ed()};_.ob=function Tmc(a){var b;b=(ed()-this.d)*0.001*5;jKb(ir(this.e.b[zQc],166),new Ifb(ir(ir(this.e.b[zQc],166).e,95).b+0.2*b));_Sb(this.c.$,0.05*b);aTb(this.c.$,0.0125*b);KDb(this.D.o);this.d=ed();SDb(this.D.o,this.E,this.b,null,false)};_.cM={38:1,131:1};_.b=null;_.c=null;_.d=0;_.e=null;_=Fwc.prototype=Ewc.prototype=new _Eb;_.gC=function Gwc(){return UI};_.Md=function Hwc(){cFb(this,AQc,new lKb((FKb(),rKb),new Ifb(0.45)));cFb(this,BQc,new lKb(BKb,new OTb(0,0,0)));cFb(this,zQc,new lKb(rKb,new Ifb(1)));cFb(this,vQc,new lKb(zKb,new hTb));cFb(this,CQc,new lKb(zKb,new iTb(3,1)));cFb(this,wQc,new kKb(xKb));cFb(this,yQc,new kKb(xKb))};_.cM={164:1};var Iwc;_=Nwc.prototype=Kwc.prototype=new Jb;_.gC=function Owc(){return TI};_.Pd=function Pwc(){return Zwc(),Lwc};_.Qd=function Qwc(){return $wc(),Mwc};var Lwc=null,Mwc=null;_=Swc.prototype=Rwc.prototype=new Jb;_.gC=function Twc(){return RI};_._b=function Uwc(){return 'uniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform float fogDensity;\r\nuniform vec3 fogColor;\r\n\r\nuniform sampler2D texture1;\r\nuniform sampler2D texture2;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main( void ) {\r\n\r\n\tvec2 position = -1.0 + 2.0 * vUv;\r\n\r\n\tvec4 noise = texture2D( texture1, vUv );\r\n\tvec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;\r\n\tvec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;\r\n\r\n\tT1.x += noise.x * 2.0;\r\n\tT1.y += noise.y * 2.0;\r\n\tT2.x -= noise.y * 0.2;\r\n\tT2.y += noise.z * 0.2;\r\n\r\n\tfloat p = texture2D( texture1, T1 * 2.0 ).a;\r\n\r\n\tvec4 color = texture2D( texture2, T2 * 2.0 );\r\n\tvec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );\r\n\r\n\tif( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }\r\n\tif( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }\r\n\tif( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }\r\n\r\n\tgl_FragColor = temp;\r\n\r\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\tconst float LOG2 = 1.442695;\r\n\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\r\n\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\r\n\r\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\r\n\r\n}\r\n'};_=Wwc.prototype=Vwc.prototype=new Jb;_.gC=function Xwc(){return SI};_._b=function Ywc(){return 'uniform vec2 uvScale;\r\nvarying vec2 vUv;\r\n\r\nvoid main()\r\n{\r\n\r\n\tvUv = uvScale * uv;\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}'};_=xGc.prototype=wGc.prototype=new oGc;_.gC=function yGc(){return aK};_.Kg=function zGc(a,b,c){jKb(ir(Z_b(this.c).j.b[PPc],166),a.e);jKb(ir(Z_b(this.c).j.b[zQc],166),new Ifb(ir(ir(Z_b(this.c).j.b[zQc],166).e,95).b+b));RZb(a.d,this.c);this.b?SDb(a.o,a.p,a.b,null,false):SDb(a.o,a.p,a.b,a.i,false)};_.cM={283:1};_.b=false;_.c=null;_=hIc.prototype=gIc.prototype=new _Eb;_.gC=function iIc(){return vK};_.Md=function jIc(){cFb(this,PPc,new kKb((FKb(),xKb)));cFb(this,zQc,new lKb(rKb,new Ifb(0)));cFb(this,EQc,new lKb(rKb,new Ifb(0.5)));cFb(this,FQc,new lKb(rKb,new Ifb(0.05)));cFb(this,GQc,new lKb(uKb,tgb(4096)));cFb(this,DQc,new lKb(uKb,(Keb(),Keb(),Jeb)))};_.cM={164:1};var kIc;_=pIc.prototype=mIc.prototype=new Jb;_.gC=function qIc(){return uK};_.Pd=function rIc(){return BIc(),nIc};_.Qd=function sIc(){return CIc(),oIc};var nIc=null,oIc=null;_=uIc.prototype=tIc.prototype=new Jb;_.gC=function vIc(){return sK};_._b=function wIc(){return '// control parameter\r\nuniform float time;\r\n\r\nuniform bool grayscale;\r\n\r\n// noise effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float nIntensity;\r\n\r\n// scanlines effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float sIntensity;\r\n\r\n// scanlines effect count value (0 = no effect, 4096 = full effect)\r\nuniform float sCount;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\t// sample the source\r\n\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\r\n\r\n\t// make some noise\r\n\tfloat x = vUv.x * vUv.y * time *  1000.0;\r\n\tx = mod( x, 13.0 ) * mod( x, 123.0 );\r\n\tfloat dx = mod( x, 0.01 );\r\n\r\n\t// add noise\r\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\r\n\r\n\t// get us a sine and cosine\r\n\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\r\n\r\n\t// add scanlines\r\n\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\r\n\r\n\t// interpolate between source and result by intensity\r\n\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\r\n\r\n\t// convert to grayscale if desired\r\n\tif( grayscale ) {\r\n\r\n\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\r\n\r\n\t}\r\n\r\n\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\r\n\r\n}\r\n'};_=yIc.prototype=xIc.prototype=new Jb;_.gC=function zIc(){return tK};_._b=function AIc(){return ZPc};var oH=xfb(iPc,'MaterialsShaderLava$DemoScene',qE),UI=xfb(lPc,'LavaShader',zB),TI=xfb(lPc,'LavaShader_Resources_default_InlineClientBundleGenerator',gy),RI=xfb(lPc,'LavaShader_Resources_default_InlineClientBundleGenerator$1',gy),SI=xfb(lPc,'LavaShader_Resources_default_InlineClientBundleGenerator$2',gy),aK=xfb(HQc,'FilmPass',bK),vK=xfb(IQc,'FilmShader',zB),uK=xfb(IQc,'FilmShader_Resources_default_InlineClientBundleGenerator',gy),sK=xfb(IQc,'FilmShader_Resources_default_InlineClientBundleGenerator$1',gy),tK=xfb(IQc,'FilmShader_Resources_default_InlineClientBundleGenerator$2',gy);ILc(ge)(30);