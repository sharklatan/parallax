function zKb(){}
function DKb(){}
function GKb(){}
function vKb(){vKb=oKc;uKb=new zKb}
function IKb(){IKb=oKc;xKb=new DKb}
function JKb(){JKb=oKc;yKb=new GKb}
function sKb(){JIb.call(this,(vKb(),uKb))}
function flc(){Q9b.call(this);this.d=0;this.e=0}
nU(750,726,OLc,sKb);_.Od=function tKb(){xIb(this,'mRefractionRatio',new ZMb((qNb(),cNb),new Wjb(1.02)));xIb(this,'mFresnelBias',new ZMb(cNb,new Wjb(0.1)));xIb(this,'mFresnelPower',new ZMb(cNb,new Wjb(2)));xIb(this,'mFresnelScale',new ZMb(cNb,new Wjb(1)));xIb(this,dSc,new YMb(iNb))};var uKb;nU(751,1,{},zKb);_.Rd=function AKb(){return IKb(),xKb};_.Sd=function BKb(){return JKb(),yKb};var xKb,yKb;nU(752,1,{},DKb);_.qc=function EKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};nU(753,1,{},GKb);_.qc=function HKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};nU(1135,1,_Lc);_.Db=function dlc(){q9b(this.c,new flc(this.b))};nU(1136,968,{327:1},flc);_.ob=function glc(){var a,b,c,d,e,f,g,i,j;this.b=new wQb(60,MGb(this.H.n),1,100000);g6b(this.b.ab,3200);this.c=new wQb(60,MGb(this.H.n),1,100000);this.f=new v8b;a=new VWb(100,32,16);j=new fOb('./static/textures/cube/park2/*.jpg');GNb(j,(ICb(),GCb));g=new sKb;XMb(Fu(YRb(g.j,dSc),225),j);c=new B2b(g);this.g=new Kqb;for(b=0;b<500;b++){d=new I7b(a,c);t5b(d.ab,blb()*10000-5000);u5b(d.ab,blb()*10000-5000);g6b(d.ab,blb()*10000-5000);d6b(d.fb,blb()*3+1);tPb(this.I,d);Aqb(this.g,d)}this.I.X=false;i=new jJb;XMb(Fu(YRb(i.j,dSc),225),j);f=new B2b(i);EZb(f,(q_b(),n_b));e=new I7b(new eWb(100000,100000,100000),f);tPb(this.f,e);eHb(this.H.n,false)};_.pb=function hlc(a){var b,c,d,e;e=1.0E-4*a;o5b(this.b.ab,(this.d-this.b.ab.d)*0.05);p5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);SPb(this.b,this.I.ab);w3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Fu(Dqb(this.g,b),304);t5b(d.ab,5000*Math.cos(e+b));u5b(d.ab,5000*Math.sin(e+b*1.1))}FGb(this.H.n,true);YGb(this.H.n,this.f,this.c,null,false);YGb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var OM=Kjb(YQc,'MaterialsCubemapFresnel$DemoScene',1136),oG=Kjb(eSc,'FresnelShader',750),nG=Kjb(eSc,'FresnelShader_Resources_default_InlineClientBundleGenerator',751),lG=Kjb(eSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',752),mG=Kjb(eSc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',753);nMc(Hi)(21);