function BGb(){}
function KGb(){}
function HGb(){}
function PGb(){}
function OGb(){}
function TGb(){}
function SGb(){}
function glc(){}
function hlc(){j7b.call(this)}
function CGb(){GEb.call(this,(GGb(),FGb))}
function GGb(){GGb=KKc;FGb=new KGb}
function WGb(){WGb=KKc;IGb=new PGb}
function XGb(){XGb=KKc;JGb=new TGb}
_=CGb.prototype=BGb.prototype=new sEb;_.gC=function DGb(){return DA};_.Jd=function EGb(){vEb(this,'mRefractionRatio',new EJb((YJb(),KJb),new _eb(1.02)));vEb(this,'mFresnelBias',new EJb(KJb,new _eb(0.1)));vEb(this,'mFresnelPower',new EJb(KJb,new _eb(2)));vEb(this,'mFresnelScale',new EJb(KJb,new _eb(1)));vEb(this,BPc,new DJb(QJb))};_.cM={164:1};var FGb;_=KGb.prototype=HGb.prototype=new Jb;_.gC=function LGb(){return CA};_.Md=function MGb(){return WGb(),IGb};_.Nd=function NGb(){return XGb(),JGb};var IGb=null,JGb=null;_=PGb.prototype=OGb.prototype=new Jb;_.gC=function QGb(){return AA};_.Yb=function RGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};_=TGb.prototype=SGb.prototype=new Jb;_.gC=function UGb(){return BA};_.Yb=function VGb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};_=blc.prototype;_.wb=function flc(){f7b(this.c,new hlc(this.b))};_=hlc.prototype=glc.prototype=new i7b;_.gC=function ilc(){return FG};_.nb=function jlc(){var a,b,c,d,e,f,g,i;this.b=new jNb(60,eDb(this.D.o),1,100000);this.b.X.c=3200;this.c=new jNb(60,eDb(this.D.o),1,100000);this.f=new _5b;a=new fYb(100,32,16);i=new OKb('./static/textures/cube/park2/*.jpg');nKb(i,(Uzb(),Szb));f=new CGb;CJb(Mq(f.j.b[BPc],166),i);c=new p4b(f);this.g=new smb;for(b=0;b<500;++b){d=new b5b(a,c);ySb(d.X,Math.random()*10000-5000);zSb(d.X,Math.random()*10000-5000);cTb(d.X,Math.random()*10000-5000);aTb(d.ab,Math.random()*3+1);kMb(this.E,d);gmb(this.g,d)}this.E.S=false;g=new mFb;CJb(Mq(g.j.b[BPc],166),i);e=new p4b(g);B_b(e,(u1b(),r1b));d=new b5b(new pXb(100000,100000,100000),e);kMb(this.f,d);this.D.o.O=false};_.ob=function klc(a){var b,c,d,e;e=1.0E-4*a;sSb(this.b.X,(this.d-this.b.X.d)*0.05);tSb(this.b.X,(-this.e-this.b.X.e)*0.05);LMb(this.b,this.E.X);this.c.$.ye(this.b.$);for(b=0,c=this.g.c;b<c;++b){d=Mq(kmb(this.g,b),240);ySb(d.X,5000*Math.cos(e+b));zSb(d.X,5000*Math.sin(e+b*1.1))}bDb(this.D.o);jDb(this.D.o,this.f,this.c,null,false);jDb(this.D.o,this.E,this.b,null,false)};_.cM={265:1};_.b=null;_.c=null;_.d=0;_.e=0;_.f=null;_.g=null;var DA=Qeb(yPc,'FresnelShader',$A),CA=Qeb(yPc,'FresnelShader_Resources_default_InlineClientBundleGenerator',Hx),AA=Qeb(yPc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',Hx),BA=Qeb(yPc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',Hx),FG=Qeb(uOc,'MaterialsCubemapFresnel$DemoScene',RD);_Kc(Wd)(28);