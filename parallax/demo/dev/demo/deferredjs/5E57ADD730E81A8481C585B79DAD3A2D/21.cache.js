function yKb(){}
function CKb(){}
function FKb(){}
function uKb(){uKb=WMc;tKb=new yKb}
function HKb(){HKb=WMc;wKb=new CKb}
function IKb(){IKb=WMc;xKb=new FKb}
function rKb(){IIb.call(this,(uKb(),tKb))}
function Elc(){O9b.call(this);this.d=0;this.e=0}
nU(750,726,uOc,rKb);_.Od=function sKb(){wIb(this,'mRefractionRatio',new YMb((pNb(),bNb),new Wjb(1.02)));wIb(this,'mFresnelBias',new YMb(bNb,new Wjb(0.1)));wIb(this,'mFresnelPower',new YMb(bNb,new Wjb(2)));wIb(this,'mFresnelScale',new YMb(bNb,new Wjb(1)));wIb(this,KUc,new XMb(hNb))};var tKb;nU(751,1,{},yKb);_.Rd=function zKb(){return HKb(),wKb};_.Sd=function AKb(){return IKb(),xKb};var wKb,xKb;nU(752,1,{},CKb);_.qc=function DKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};nU(753,1,{},FKb);_.qc=function GKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};nU(1135,1,HOc);_.Db=function Clc(){o9b(this.c,new Elc(this.b))};nU(1136,968,{327:1},Elc);_.ob=function Flc(){var a,b,c,d,e,f,g,i,j;this.b=new vQb(60,LGb(this.H.n),1,100000);f6b(this.b.ab,3200);this.c=new vQb(60,LGb(this.H.n),1,100000);this.f=new u8b;a=new UWb(100,32,16);j=new eOb('./static/textures/cube/park2/*.jpg');FNb(j,(HCb(),FCb));g=new rKb;WMb(Fu(XRb(g.j,KUc),225),j);c=new A2b(g);this.g=new Jqb;for(b=0;b<500;b++){e=new H7b(a,c);s5b(e.ab,blb()*10000-5000);t5b(e.ab,blb()*10000-5000);f6b(e.ab,blb()*10000-5000);c6b(e.fb,blb()*3+1);sPb(this.I,e);zqb(this.g,e)}this.I.X=false;i=new iJb;WMb(Fu(XRb(i.j,KUc),225),j);f=new A2b(i);DZb(f,(p_b(),m_b));d=new H7b(new dWb(100000,100000,100000),f);sPb(this.f,d);dHb(this.H.n,false)};_.pb=function Glc(a){var b,c,d,e;e=1.0E-4*a;n5b(this.b.ab,(this.d-this.b.ab.d)*0.05);o5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);RPb(this.b,this.I.ab);v3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Fu(Cqb(this.g,b),304);s5b(d.ab,5000*Math.cos(e+b));t5b(d.ab,5000*Math.sin(e+b*1.1))}EGb(this.H.n,true);XGb(this.H.n,this.f,this.c,null,false);XGb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var OM=Kjb(DTc,'MaterialsCubemapFresnel$DemoScene',1136),oG=Kjb(LUc,'FresnelShader',750),nG=Kjb(LUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',751),lG=Kjb(LUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',752),mG=Kjb(LUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',753);VOc(Hi)(21);