function _tb(){}
function kub(){}
function hub(){}
function pub(){}
function oub(){}
function tub(){}
function sub(){}
function m8b(){}
function n8b(){zTb.call(this)}
function aub(){krb.call(this,(gub(),fub))}
function gub(){gub=eic;fub=new kub}
function wub(){wub=eic;iub=new pub}
function xub(){xub=eic;jub=new tub}
function Bzb(a){Izb(a,a.d*a.d);Fzb(a,a.b*a.b);Ezb(a,a.a*a.a);return a}
var Smc='enableAO',Tmc='enableDiffuse',Umc='tNormal',Vmc='tSpecular',Wmc='uNormalScale',Xmc='uShininess';_=aub.prototype=_tb.prototype=new Yqb;_.gC=function bub(){return JA};_.qd=function cub(){grb(this,Hwb());grb(this,Iwb());grb(this,Jwb());_qb(this,Smc,new iwb((Cwb(),rwb),(T3(),T3(),R3)));_qb(this,Tmc,new iwb(rwb,R3));_qb(this,lmc,new iwb(rwb,R3));_qb(this,'enableReflection',new iwb(rwb,R3));_qb(this,'enableDisplacement',new iwb(rwb,R3));_qb(this,'tDisplacement',new hwb(uwb));_qb(this,nmc,new hwb(uwb));_qb(this,Pmc,new hwb(uwb));_qb(this,Umc,new hwb(uwb));_qb(this,Vmc,new hwb(uwb));_qb(this,'tAO',new hwb(uwb));_qb(this,Wmc,new iwb(wwb,new wEb(1,1)));_qb(this,'uDisplacementBias',new iwb(owb,new p4(0)));_qb(this,'uDisplacementScale',new iwb(owb,new p4(1)));_qb(this,rmc,new iwb(nwb,new Mzb(16777215)));_qb(this,smc,new iwb(nwb,new Mzb(1118481)));_qb(this,qmc,new iwb(nwb,new Mzb(16777215)));_qb(this,Xmc,new iwb(owb,new p4(30)));_qb(this,ymc,new iwb(owb,new p4(1)));_qb(this,Ymc,new iwb(rwb,R3));_qb(this,'uRefractionRatio',new iwb(owb,new p4(0.98)));_qb(this,'uReflectivity',new iwb(owb,new p4(0.5)));_qb(this,'uOffset',new iwb(wwb,new wEb(0,0)));_qb(this,'uRepeat',new iwb(wwb,new wEb(1,1)));_qb(this,Zmc,new iwb(ywb,new aFb(1,1,1)))};_.rd=function dub(a){var b,c;c=new sab(ns(yI,{87:1,99:1},1,[zmc,Amc]));b=new sab(ns(yI,{87:1,99:1},1,[Cmc,Dmc,Emc]));frb(this,qrb(a,ns(AI,{87:1,99:1},106,[c,b])))};_.sd=function eub(a){var b,c;c=new sab(ns(yI,{87:1,99:1},1,[$mc,Fmc]));b=new sab(ns(yI,{87:1,99:1},1,[_mc,anc]));hrb(this,qrb(a,ns(AI,{87:1,99:1},106,[c,b])))};_.cM={131:1};var fub;_=kub.prototype=hub.prototype=new Kb;_.gC=function lub(){return IA};_.td=function mub(){return wub(),iub};_.ud=function nub(){return xub(),jub};var iub=null,jub=null;_=pub.prototype=oub.prototype=new Kb;_.gC=function qub(){return GA};_.Vb=function rub(){return 'uniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uShininess;\r\nuniform float uOpacity;\r\n\r\nuniform bool enableDiffuse;\r\nuniform bool enableSpecular;\r\nuniform bool enableAO;\r\nuniform bool enableReflection;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tAO;\r\n\r\nuniform samplerCube tCube;\r\n\r\nuniform vec2 uNormalScale;\r\n\r\nuniform bool useRefract;\r\nuniform float uRefractionRatio;\r\nuniform float uReflectivity;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightAngle[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#ifdef WRAP_AROUND\r\n\r\n\tuniform vec3 wrapRGB;\r\n\r\n#endif\r\n\r\nvarying vec3 vWorldPosition;\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse ) {\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tvec4 texelColor = texture2D( tDiffuse, vUv );\r\n\t\t\ttexelColor.xyz *= texelColor.xyz;\r\n\r\n\t\t\tgl_FragColor = gl_FragColor * texelColor;\r\n\r\n\t\t#else\r\n\r\n\t\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\tif( enableAO ) {\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tvec4 aoColor = texture2D( tAO, vUv );\r\n\t\t\taoColor.xyz *= aoColor.xyz;\r\n\r\n\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\r\n\r\n\t\t#else\r\n\r\n\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, vUv ).xyz;\r\n\r\n\tmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\t#ifdef FLIP_SIDED\r\n\r\n\t\tfinalNormal = -finalNormal;\r\n\r\n\t#endif\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat pointDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tpointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tpointVector = normalize( pointVector );\r\n\r\n\t\t\t// diffuse\r\n\r\n\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\r\n\t\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\r\n\r\n\t\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\r\n\r\n\t\t\t// specular\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( pointVector + viewPosition );\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\r\n\r\n\t\t\t#ifdef PHYSICALLY_BASED_SHADING\r\n\r\n\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\tfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\r\n\r\n\t\t\t\tvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\r\n\t\t\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// spot lights\r\n\r\n\t#if MAX_SPOT_LIGHTS > 0\r\n\r\n\t\tvec3 spotDiffuse = vec3( 0.0 );\r\n\t\tvec3 spotSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat spotDistance = 1.0;\r\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\r\n\t\t\t\tspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tspotVector = normalize( spotVector );\r\n\r\n\t\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\r\n\r\n\t\t\tif ( spotEffect > spotLightAngle[ i ] ) {\r\n\r\n\t\t\t\tspotEffect = pow( spotEffect, spotLightExponent[ i ] );\r\n\r\n\t\t\t\t// diffuse\r\n\r\n\t\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\t\tfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\r\n\t\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\r\n\r\n\t\t\t\t\tvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\r\n\r\n\t\t\t\t#else\r\n\r\n\t\t\t\t\tfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\tspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\t\t\tvec3 spotHalfVector = normalize( spotVector + viewPosition );\r\n\t\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\r\n\t\t\t\tfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\r\n\r\n\t\t\t\t#ifdef PHYSICALLY_BASED_SHADING\r\n\r\n\t\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\t\tfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\r\n\r\n\t\t\t\t\tvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\r\n\t\t\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\r\n\r\n\t\t\t\t#else\r\n\r\n\t\t\t\t\tspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t// diffuse\r\n\r\n\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\tfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\t\tfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\r\n\t\t\t\tvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\r\n\r\n\t\t\t// specular\r\n\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\r\n\r\n\t\t\t#ifdef PHYSICALLY_BASED_SHADING\r\n\r\n\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\tfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\r\n\r\n\t\t\t\tvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\r\n\t\t\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tdirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\themiDiffuse += uDiffuseColor * hemiColor;\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\tfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\tfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\r\n\r\n\t\t\t#ifdef PHYSICALLY_BASED_SHADING\r\n\r\n\t\t\t\tfloat dotProductGround = dot( normal, lVectorGround );\r\n\r\n\t\t\t\t// 2.0 => 2.0001 is hack to work around ANGLE bug\r\n\r\n\t\t\t\tfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\r\n\r\n\t\t\t\tvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\r\n\t\t\t\tvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\r\n\t\t\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\themiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_SPOT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += spotDiffuse;\r\n\t\ttotalSpecular += spotSpecular;\r\n\r\n\t#endif\r\n\r\n\t#ifdef METAL\r\n\r\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\r\n\r\n\t#else\r\n\r\n\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\r\n\r\n\t#endif\r\n\r\n\tif ( enableReflection ) {\r\n\r\n\t\tvec3 vReflect;\r\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\r\n\r\n\t\tif ( useRefract ) {\r\n\r\n\t\t\tvReflect = refract( cameraToVertex, normal, uRefractionRatio );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvReflect = reflect( cameraToVertex, normal );\r\n\r\n\t\t}\r\n\r\n\t\tvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcubeColor.xyz *= cubeColor.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\r\n\r\n\t}\r\n\r\n[*]\r\n\r\n}\r\n'};_=tub.prototype=sub.prototype=new Kb;_.gC=function uub(){return HA};_.Vb=function vub(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uOffset;\r\nuniform vec2 uRepeat;\r\n\r\nuniform bool enableDisplacement;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vWorldPosition;\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n[*]\r\n\r\n\t// normal, tangent and binormal vectors\r\n\r\n\t#ifdef USE_SKINNING\r\n\r\n\t\tvNormal = normalMatrix * skinnedNormal.xyz;\r\n\r\n\t\tvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\r\n\t\tvTangent = normalMatrix * skinnedTangent.xyz;\r\n\r\n\t#else\r\n\r\n\t\tvNormal = normalMatrix * normal;\r\n\t\tvTangent = normalMatrix * tangent.xyz;\r\n\r\n\t#endif\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\r\n\tvUv = uv * uRepeat + uOffset;\r\n\r\n\t// displacement mapping\r\n\r\n\tvec3 displacedPosition;\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tif ( enableDisplacement ) {\r\n\r\n\t\t\tvec3 dv = texture2D( tDisplacement, uv ).xyz;\r\n\t\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\t\tdisplacedPosition = position + normalize( normal ) * df;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t#ifdef USE_SKINNING\r\n\r\n\t\t\t\tvec4 skinVertex = vec4( position, 1.0 );\r\n\r\n\t\t\t\tvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\r\n\t\t\t\tskinned \t  += boneMatY * skinVertex * skinWeight.y;\r\n\r\n\t\t\t\tdisplacedPosition  = skinned.xyz;\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tdisplacedPosition = position;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t#else\r\n\r\n\t\t#ifdef USE_SKINNING\r\n\r\n\t\t\tvec4 skinVertex = vec4( position, 1.0 );\r\n\r\n\t\t\tvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\r\n\t\t\tskinned \t  += boneMatY * skinVertex * skinWeight.y;\r\n\r\n\t\t\tdisplacedPosition  = skinned.xyz;\r\n\r\n\t\t#else\r\n\r\n\t\t\tdisplacedPosition = position;\r\n\r\n\t\t#endif\r\n\r\n\t#endif\r\n\r\n\t//\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\t//\r\n\r\n\tvWorldPosition = mPosition.xyz;\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\t// shadows\r\n\r\n\t#ifdef USE_SHADOWMAP\r\n\r\n\t\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\r\n\r\n\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * mPosition;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n}\r\n'};_=h8b.prototype;_.pb=function l8b(){vTb(this.b,new n8b(this.a))};_=n8b.prototype=m8b.prototype=new yTb;_.gC=function o8b(){return HG};_.md=function p8b(){beb(this,new szb(25,Veb(this.A.D),50,10000000))};_.gb=function q8b(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u,v,w,x,y,z;this.z.W.b=44597;yyb(this.B,this.z);this.a=new Ofb(this.z,this.A.D);this.a.o=0.2;this.a.a=0.3;this.a.k=7008.1;this.a.j=637100;b=new aMb(16777215);WEb(b.W,-1,0,1).ge();yyb(this.B,b);s=(ySb(),ASb('./static/textures/planets/earth_atmos_2048.jpg',(Fxb(),Exb),null));a=ASb('./static/textures/planets/earth_clouds_1024.png',Exb,null);j=ASb('./static/textures/planets/earth_normal_2048.jpg',Exb,null);u=ASb('./static/textures/planets/earth_specular_2048.jpg',Exb,null);i=ASb(Rmc,Exb,null);g=new PQb(new aub);g.c=true;y=uMb(g).i;gwb(ws(y.a[Umc],133),j);sEb(ws(ws(y.a[Wmc],133).d,155),0.85,0.85);gwb(ws(y.a[nmc],133),s);gwb(ws(y.a[Vmc],133),u);gwb(ws(y.a[Smc],133),(T3(),T3(),R3));gwb(ws(y.a[Tmc],133),S3);gwb(ws(y.a[lmc],133),S3);Hzb(ws(ws(y.a[rmc],133).d,142),16777215);Hzb(ws(ws(y.a[smc],133).d,142),6710886);Hzb(ws(ws(y.a[qmc],133).d,142),0);gwb(ws(y.a[Xmc],133),new p4(20));Bzb(ws(ws(y.a[rmc],133).d,142));Bzb(ws(ws(y.a[smc],133).d,142));Bzb(ws(ws(y.a[qmc],133).d,142));c=new _Jb(6371,100,50);cAb(c);this.d=new yRb(c,g);this.d.Z.d=0;this.d.Z.b=0.41;yyb(this.B,this.d);e=new rPb;lPb(e,new Mzb(16777215));e.p=a;e.Q=true;this.b=new yRb(c,e);XEb(this.b._,1.005);this.b.Z.b=0.41;yyb(this.B,this.b);f=new cQb;XPb(f,new Mzb(16777215));f.t=i;this.c=new yRb(c,f);WEb(this.c.W,31855,0,0);XEb(this.c._,0.23);yyb(this.B,this.c);w=new lAb;for(d=0;d<1500;++d){z=new _Eb;tEb(z,Math.random()*2-1);uEb(z,Math.random()*2-1);ZEb(z,Math.random()*2-1);z.fe(6371);w.G.Bc(z)}k=new CQb;AQb(k,new Mzb(5592405));k.d=2;k.e=false;x=new R9;os(x.a,x.b++,k);n=new CQb;AQb(n,new Mzb(5592405));n.d=1;n.e=false;os(x.a,x.b++,n);o=new CQb;AQb(o,new Mzb(3355443));o.d=2;o.e=false;os(x.a,x.b++,o);p=new CQb;AQb(p,new Mzb(3815994));p.d=1;p.e=false;os(x.a,x.b++,p);q=new CQb;AQb(q,new Mzb(1710618));q.d=2;q.e=false;os(x.a,x.b++,q);r=new CQb;AQb(r,new Mzb(1710618));r.d=1;r.e=false;os(x.a,x.b++,r);for(d=10;d<30;++d){v=new IRb(w,ws((s8(d%6,x.b),x.a[d%6]),186));tEb(v.Z,Math.random()*6);uEb(v.Z,Math.random()*6);ZEb(v.Z,Math.random()*6);t=d*10;XEb(v._,t);v.R=false;Jyb(v);yyb(this.B,v)}this.A.Q=false;this.A.I=false;this.A.K=true;this.A.L=true;this.e=Uc()};_.ld=function r8b(){};_.hb=function s8b(a){var b,c;c=(Uc()-this.e)*0.001;oEb(this.d.Z,0.1*c);oEb(this.b.Z,0.125*c);b=c*0.1;Dyb(this.c,new aFb(Math.cos(b)*this.c.W.c-Math.sin(b)*this.c.W.b,0,Math.sin(b)*this.c.W.c+Math.cos(b)*this.c.W.b));oEb(this.c.Z,-b);Mfb(this.a);Ipb(this.A);this.e=Uc()};_.a=null;_.b=null;_.c=null;_.d=null;_.e=0;var JA=d4(Mmc,'NormalMapShader'),IA=d4(Mmc,'NormalMapShader_Resources_default_InlineClientBundleGenerator'),GA=d4(Mmc,'NormalMapShader_Resources_default_InlineClientBundleGenerator$1'),HA=d4(Mmc,'NormalMapShader_Resources_default_InlineClientBundleGenerator$2'),HG=d4(Klc,'TrackballEarth$DemoScene');gic(Vd)(33);