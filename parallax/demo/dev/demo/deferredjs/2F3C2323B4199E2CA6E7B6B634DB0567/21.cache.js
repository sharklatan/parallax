function UKb(){}
function YKb(){}
function _Kb(){}
function QKb(){QKb=JKc;PKb=new UKb}
function bLb(){bLb=JKc;SKb=new YKb}
function cLb(){cLb=JKc;TKb=new _Kb}
function NKb(){cJb.call(this,(QKb(),PKb))}
function Alc(){jac.call(this);this.d=0;this.e=0}
KU(756,732,hMc,NKb);_.Sd=function OKb(){SIb(this,'mRefractionRatio',new sNb((LNb(),xNb),new okb(1.02)));SIb(this,'mFresnelBias',new sNb(xNb,new okb(0.1)));SIb(this,'mFresnelPower',new sNb(xNb,new okb(2)));SIb(this,'mFresnelScale',new sNb(xNb,new okb(1)));SIb(this,DSc,new rNb(DNb))};var PKb;KU(757,1,{},UKb);_.Vd=function VKb(){return bLb(),SKb};_.Wd=function WKb(){return cLb(),TKb};var SKb,TKb;KU(758,1,{},YKb);_.uc=function ZKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};KU(759,1,{},_Kb);_.uc=function aLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};KU(1141,1,uMc);_.Db=function ylc(){L9b(this.c,new Alc(this.b))};KU(1142,974,{327:1},Alc);_.ob=function Blc(){var a,b,c,d,e,f,g,i,j;this.b=new RQb(60,fHb(this.H.n),1,100000);B6b(this.b.ab,3200);this.c=new RQb(60,fHb(this.H.n),1,100000);this.f=new Q8b;a=new oXb(100,32,16);j=new AOb('./static/textures/cube/park2/*.jpg');_Nb(j,(bDb(),_Cb));g=new NKb;qNb(Xu(rSb(g.j,DSc),225),j);c=new W2b(g);this.g=new drb;for(b=0;b<500;b++){e=new b8b(a,c);O5b(e.ab,vlb()*10000-5000);P5b(e.ab,vlb()*10000-5000);B6b(e.ab,vlb()*10000-5000);y6b(e.fb,vlb()*3+1);OPb(this.I,e);Vqb(this.g,e)}this.I.X=false;i=new EJb;qNb(Xu(rSb(i.j,DSc),225),j);f=new W2b(i);ZZb(f,(L_b(),I_b));d=new b8b(new zWb(100000,100000,100000),f);OPb(this.f,d);zHb(this.H.n,false)};_.pb=function Clc(a){var b,c,d,e;e=1.0E-4*a;J5b(this.b.ab,(this.d-this.b.ab.d)*0.05);K5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);lQb(this.b,this.I.ab);R3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Xu(Yqb(this.g,b),304);O5b(d.ab,5000*Math.cos(e+b));P5b(d.ab,5000*Math.sin(e+b*1.1))}$Gb(this.H.n,true);rHb(this.H.n,this.f,this.c,null,false);rHb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var jN=ckb(wRc,'MaterialsCubemapFresnel$DemoScene',1142),LG=ckb(ESc,'FresnelShader',756),KG=ckb(ESc,'FresnelShader_Resources_default_InlineClientBundleGenerator',757),IG=ckb(ESc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',758),JG=ckb(ESc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',759);IMc(Ii)(21);