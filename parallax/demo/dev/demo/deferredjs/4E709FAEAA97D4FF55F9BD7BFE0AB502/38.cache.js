function rsc(){}
function vsc(){}
function ysc(){}
function Mvc(){}
function Qvc(){}
function Tvc(){}
function zGc(){}
function DGc(){}
function GGc(){}
function VHc(){}
function ZHc(){}
function aIc(){}
function mIc(){}
function qIc(){}
function tIc(){}
function FIc(){}
function JIc(){}
function MIc(){}
function YIc(){}
function aJc(){}
function dJc(){}
function EYb(a,b){a.b=b}
function z7b(a,b){a.k=b}
function dGc(a,b){jqb(a.b,b)}
function esc(a){this.a=a}
function hsc(a){this.a=a}
function ksc(a){this.a=a}
function nsc(){nsc=ZJc;msc=new rsc}
function Asc(){Asc=ZJc;psc=new vsc}
function Bsc(){Bsc=ZJc;qsc=new ysc}
function Ivc(){Ivc=ZJc;Hvc=new Mvc}
function Vvc(){Vvc=ZJc;Kvc=new Qvc}
function Wvc(){Wvc=ZJc;Lvc=new Tvc}
function vGc(){vGc=ZJc;uGc=new zGc}
function IGc(){IGc=ZJc;xGc=new DGc}
function JGc(){JGc=ZJc;yGc=new GGc}
function RHc(){RHc=ZJc;QHc=new VHc}
function cIc(){cIc=ZJc;THc=new ZHc}
function dIc(){dIc=ZJc;UHc=new aIc}
function iIc(){iIc=ZJc;hIc=new mIc}
function vIc(){vIc=ZJc;kIc=new qIc}
function wIc(){wIc=ZJc;lIc=new tIc}
function BIc(){BIc=ZJc;AIc=new FIc}
function OIc(){OIc=ZJc;DIc=new JIc}
function PIc(){PIc=ZJc;EIc=new MIc}
function UIc(){UIc=ZJc;TIc=new YIc}
function fJc(){fJc=ZJc;WIc=new aJc}
function gJc(){gJc=ZJc;XIc=new dJc}
function bsc(a,b){this.a=a;this.b=b}
function Dvc(){sIb.call(this,(Ivc(),Hvc))}
function sGc(){sIb.call(this,(vGc(),uGc))}
function OHc(){sIb.call(this,(RHc(),QHc))}
function fIc(){sIb.call(this,(iIc(),hIc))}
function yIc(){sIb.call(this,(BIc(),AIc))}
function RIc(){sIb.call(this,(UIc(),TIc))}
function Wrc(a){a.w+=1;a.w==3&&nPb(a.v,true)}
function Xrc(){z9b.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function Vrc(a,b,c,d){var e,f,g;g=new k2b(b);GMb(qu(HRb(cZb(g).i,kRc),225),c);f=new e8b;e=new r7b(new wWb(a.u,a.t),g);R5b(e._,-500);cPb(f,e);HGb(a.G.k,f,a.c,d,true)}
function Urc(a,b,c,d,e,f){var g,i;g=new c0b;X_b(g,new $2b(16755285));g.j=true;a0b(g,(WZb(),TZb));i=new B7b(b,g);i.d=c;z7b(i,yu(600*Mkb()));P5b(i._,d,e,f);m3b(i.cb,1.5707963267948966);i.S=true;i.U=true;cPb(a.H,i);jqb(a.n,i)}
var ASc='enableDiffuse1',BSc='enableDiffuse2',tSc='h',vSc='heightMap',GSc='heightmap',FSc='offset',HSc='r',zSc='tDetail',xSc='tDiffuse1',ySc='tDiffuse2',DSc='uRepeatOverlay',uSc='v';ZT(1238,1,ILc);_.zb=function Src(){_8b(this.b,new Xrc(this.a))};ZT(1239,972,{78:1,186:1,338:1},Xrc);_.Ud=function Yrc(a){Wrc(this)};_.Gd=function Zrc(a){this.u=a.a.Z;this.t=a.a.Y;GMb(qu(HRb(cZb(this.f.b).i,tSc),225),new Fjb(6/this.u));GMb(qu(HRb(cZb(this.D.b).i,uSc),225),new Fjb(6/this.t))};_.nb=function $rc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;ft((zxb(),yxb),(Jxb(),Ixb),this);this.b=new fQb(40,vGb(this.G.k),2,4000);this.u=this.G.k.Z;this.t=this.G.k.Y;this.c=new SPb(this.u,this.t,-10000,10000);P5b(this.b._,-1200,800,1200);R5b(this.c._,100);this.s=new e8b;cPb(this.s,this.c);this.d=new Ewb(this.b,this.G.c);O5b(this.d.v,0);this.d.s=1;this.d.A=1.2;Bwb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;zwb(this.d,0.15);c8b(this.H,new U7b(328965,2000,4000));cPb(this.H,new MXb(1118481));this.e=new nYb(16777215,1.15);P5b(this.e._,500,2000,0);cPb(this.H,this.e);this.q=new GYb(16729088,1.5,0);O5b(this.q._,0);cPb(this.H,this.q);this.g=new cOb(256,256);uNb(this.g,(gEb(),bEb));sNb(this.g,(XDb(),VDb));pNb(this.g,(rCb(),pCb));qNb(this.g,false);this.o=new cOb(256,256);uNb(this.o,bEb);sNb(this.o,VDb);pNb(this.o,pCb);qNb(this.o,false);n=new yIc;u=n.i;GMb(qu(u.a[cOc],225),new Fjb(0.05));b5b(qu(qu(u.a[QRc],225).d,297),256,256);GMb(qu(u.a[vSc],225),this.g);s=new cOb(2048,2048);uNb(s,bEb);sNb(s,VDb);pNb(s,pCb);s.r=false;BNb(s,(yFb(),xFb));CNb(s,xFb);c=new INb('./static/textures/terrain/grasslight-big.jpg',new bsc(this,s));BNb(c,xFb);CNb(c,xFb);d=new INb('./static/textures/terrain/backgrounddetailed6.jpg',this);BNb(d,xFb);CNb(d,xFb);b=new INb('./static/textures/terrain/grasslight-big-nm.jpg',this);BNb(b,xFb);CNb(b,xFb);t=new Dvc;this.B=t.i;GMb(qu(HRb(this.B,KRc),225),this.o);GMb(qu(HRb(this.B,LRc),225),new Fjb(3.5));GMb(qu(HRb(this.B,wSc),225),this.g);GMb(qu(HRb(this.B,xSc),225),c);GMb(qu(HRb(this.B,ySc),225),d);GMb(qu(HRb(this.B,MRc),225),s);GMb(qu(HRb(this.B,zSc),225),b);GMb(qu(HRb(this.B,ASc),225),(Gib(),Gib(),Fib));GMb(qu(HRb(this.B,BSc),225),Fib);GMb(qu(HRb(this.B,iRc),225),Fib);X2b(qu(qu(HRb(this.B,oRc),225).d,293),16777215);X2b(qu(qu(HRb(this.B,pRc),225).d,293),16777215);X2b(qu(qu(HRb(this.B,nRc),225).d,293),1118481);GMb(qu(HRb(this.B,PRc),225),new Fjb(30));GMb(qu(HRb(this.B,CSc),225),new Fjb(375));b5b(qu(qu(HRb(this.B,DSc),225).d,297),6,6);this.A=new btb;zob(this.A,TRc,new IMb((_Mb(),NMb),new Fjb(1)));zob(this.A,ESc,new IMb(VMb,new f5b(1.5,1.5)));zob(this.A,FSc,new IMb(VMb,new f5b(0,0)));this.k=new btb;i=new j2b((nsc(),msc));nIb(cZb(i),this.A);i.c=false;i.b=true;zob(this.k,GSc,i);j=new k2b(n);nIb(cZb(j),u);j.c=false;j.b=true;zob(this.k,eRc,j);k=new k2b(t);nIb(cZb(k),this.B);k.c=true;k.b=true;zob(this.k,'terrain',k);o=new wWb(this.u,this.t);p=new j_b;d_b(p,new $2b(0));this.r=new r7b(o,p);R5b(this.r._,-500);cPb(this.s,this.r);g=new xWb(6000,6000,64,64);MQb(g);this.v=new r7b(g,k);P5b(this.v._,0,-125,0);l3b(this.v.cb,-1.5707963267948966);nPb(this.v,false);cPb(this.H,this.v);TGb(this.G.k,this.H.a.c,1);this.G.k.ab=true;this.G.k.bb=true;PGb(this.G.k,false);q=new mGc(this.H,this.b);f=new ZFc(0.6);e=new pGc(new sGc);GMb(qu(HRb(cZb(e.b).i,uRc),225),new Fjb(0.65));this.f=new pGc(new OHc);this.D=new pGc(new RIc);GMb(qu(HRb(cZb(this.f.b).i,tSc),225),new Fjb(6/this.u));GMb(qu(HRb(cZb(this.D.b).i,uSc),225),new Fjb(6/this.t));GMb(qu(HRb(cZb(this.f.b).i,HSc),225),new Fjb(0.5));GMb(qu(HRb(cZb(this.D.b).i,HSc),225),new Fjb(0.5));this.D.a=true;r=new cOb(this.u,this.t);uNb(s,aEb);sNb(s,VDb);pNb(s,pCb);s.f=false;s.r=false;a=new fGc(this.G.k,r);jqb(a.b,q);jqb(a.b,f);jqb(a.b,e);dGc(a,this.f);dGc(a,this.D);this.n=new tqb;new Lwc('./static/models/animated/parrot.js',new esc(this));new Lwc(sSc,new hsc(this));new Lwc('./static/models/animated/stork.js',new ksc(this));this.p=rh()};_.ob=function _rc(a){var b,c,d,e,f;b=(rh()-this.p)*0.001;if(this.v.gb){Cwb(this.d);this.j=v3b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;W2b(this.H.a.c,0.1,e,this.j);TGb(this.G.k,this.H.a.c,1);WXb(this.e,0.1+f*1.0499999999999998);EYb(this.q,0.9+f*0.6);GMb(qu(HRb(this.B,LRc),225),new Fjb(0.6+f*2.9));if(this.C){this.a=v3b(this.a+-7.5E-4,0,0.05);GMb(qu(uob(this.A,TRc),225),new Fjb(qu(qu(uob(this.A,TRc),225).d,150).a+b*this.a));Z4b(qu(qu(uob(this.A,FSc),225).d,297),b*0.05);c5b(qu(qu(HRb(this.B,ISc),225).d,297),4*qu(qu(uob(this.A,FSc),225).d,297).c);RSb(this.r,qu(uob(this.k,GSc),282));HGb(this.G.k,this.s,this.c,this.g,true);RSb(this.r,qu(uob(this.k,eRc),282));HGb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=qu(mqb(this.n,c),305);A7b(d,yu(1000*b));Z4b(d._,d.d*b);d._.c>2000&&c5b(d._,-1500-Mkb()*500)}HGb(this.G.k,this.H,this.b,null,false)}this.p=rh()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;ZT(1240,1,{},bsc);_.Ud=function csc(a){Wrc(this.a);Vrc(this.a,new fIc,a,this.b)};ZT(1241,1,{},esc);_.Af=function fsc(a,b){Gwc((qu(a,339),qu(b,242)));Urc(this.a,qu(b,242),500,-3500,500,700);Urc(this.a,qu(b,242),500,-3000-Mkb()*500,500,-200);Urc(this.a,qu(b,242),500,-3000-Mkb()*500,500,200);Urc(this.a,qu(b,242),500,-3000-Mkb()*500,500,1000)};ZT(1242,1,{},hsc);_.Af=function isc(a,b){Gwc((qu(a,339),qu(b,242)));Urc(this.a,qu(b,242),1000,-3000-Mkb()*500,350,40)};ZT(1243,1,{},ksc);_.Af=function lsc(a,b){Gwc((qu(a,339),qu(b,242)));Urc(this.a,qu(b,242),1000,-3000-Mkb()*500,350,340)};var msc;ZT(1244,1,{},rsc);_.Od=function ssc(){return Asc(),psc};_.Pd=function tsc(){return Bsc(),qsc};var psc,qsc;ZT(1245,1,{},vsc);_.nc=function wsc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};ZT(1246,1,{},ysc);_.nc=function zsc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};ZT(1304,730,vLc,Dvc);_.Ld=function Evc(){nIb(this,dNb());nIb(this,eNb());nIb(this,fNb());gIb(this,ASc,new IMb((_Mb(),QMb),(Gib(),Gib(),Eib)));gIb(this,BSc,new IMb(QMb,Eib));gIb(this,iRc,new IMb(QMb,Eib));gIb(this,JSc,new IMb(QMb,Eib));gIb(this,xSc,new HMb(TMb));gIb(this,ySc,new HMb(TMb));gIb(this,zSc,new HMb(TMb));gIb(this,KRc,new HMb(TMb));gIb(this,MRc,new HMb(TMb));gIb(this,wSc,new HMb(TMb));gIb(this,LRc,new IMb(NMb,new Fjb(1)));gIb(this,KSc,new IMb(NMb,new Fjb(0)));gIb(this,CSc,new IMb(NMb,new Fjb(1)));gIb(this,oRc,new IMb(MMb,new $2b(15658734)));gIb(this,pRc,new IMb(MMb,new $2b(1118481)));gIb(this,nRc,new IMb(MMb,new $2b(328965)));gIb(this,PRc,new IMb(NMb,new Fjb(30)));gIb(this,uRc,new IMb(NMb,new Fjb(1)));gIb(this,'uRepeatBase',new IMb(VMb,new f5b(1,1)));gIb(this,DSc,new IMb(VMb,new f5b(1,1)));gIb(this,ISc,new IMb(VMb,new f5b(0,0)))};_.Md=function Fvc(a){var b,c;c=new Rqb(gu(WR,cKc,1,[vRc,wRc]));b=new Rqb(gu(WR,cKc,1,[yRc,zRc,ARc]));pIb(this,xIb(a,gu(ZR,cKc,173,[c,b])))};_.Nd=function Gvc(a){var b,c;c=new Rqb(gu(WR,cKc,1,[BRc]));b=new Rqb(gu(WR,cKc,1,[CRc]));qIb(this,xIb(a,gu(ZR,cKc,173,[c,b])))};var Hvc;ZT(1305,1,{},Mvc);_.Od=function Nvc(){return Vvc(),Kvc};_.Pd=function Ovc(){return Wvc(),Lvc};var Kvc,Lvc;ZT(1306,1,{},Qvc);_.nc=function Rvc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};ZT(1307,1,{},Tvc);_.nc=function Uvc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};ZT(1399,730,vLc,sGc);_.Ld=function tGc(){gIb(this,kRc,new HMb((_Mb(),TMb)));gIb(this,uRc,new IMb(NMb,new Fjb(1)))};var uGc;ZT(1400,1,{},zGc);_.Od=function AGc(){return IGc(),xGc};_.Pd=function BGc(){return JGc(),yGc};var xGc,yGc;ZT(1401,1,{},DGc);_.nc=function EGc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};ZT(1402,1,{},GGc);_.nc=function HGc(){return _Rc};ZT(1423,730,vLc,OHc);_.Ld=function PHc(){gIb(this,kRc,new HMb((_Mb(),TMb)));gIb(this,tSc,new IMb(NMb,new Fjb(0.001953125)));gIb(this,HSc,new IMb(NMb,new Fjb(0.35)))};var QHc;ZT(1424,1,{},VHc);_.Od=function WHc(){return cIc(),THc};_.Pd=function XHc(){return dIc(),UHc};var THc,UHc;ZT(1425,1,{},ZHc);_.nc=function $Hc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};ZT(1426,1,{},aIc);_.nc=function bIc(){return _Rc};ZT(1429,730,vLc,fIc);_.Ld=function gIc(){gIb(this,kRc,new HMb((_Mb(),TMb)))};var hIc;ZT(1430,1,{},mIc);_.Od=function nIc(){return vIc(),kIc};_.Pd=function oIc(){return wIc(),lIc};var kIc,lIc;ZT(1431,1,{},qIc);_.nc=function rIc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};ZT(1432,1,{},tIc);_.nc=function uIc(){return _Rc};ZT(1435,730,vLc,yIc);_.Ld=function zIc(){gIb(this,vSc,new HMb((_Mb(),TMb)));gIb(this,QRc,new IMb(VMb,new f5b(512,512)));gIb(this,ESc,new IMb(VMb,new f5b(1,1)));gIb(this,cOc,new IMb(NMb,new Fjb(0.05)))};var AIc;ZT(1436,1,{},FIc);_.Od=function GIc(){return OIc(),DIc};_.Pd=function HIc(){return PIc(),EIc};var DIc,EIc;ZT(1437,1,{},JIc);_.nc=function KIc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};ZT(1438,1,{},MIc);_.nc=function NIc(){return _Rc};ZT(1441,730,vLc,RIc);_.Ld=function SIc(){gIb(this,kRc,new HMb((_Mb(),TMb)));gIb(this,uSc,new IMb(NMb,new Fjb(0.001953125)));gIb(this,HSc,new IMb(NMb,new Fjb(0.35)))};var TIc;ZT(1442,1,{},YIc);_.Od=function ZIc(){return fJc(),WIc};_.Pd=function $Ic(){return gJc(),XIc};var WIc,XIc;ZT(1443,1,{},aJc);_.nc=function bJc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};ZT(1444,1,{},dJc);_.nc=function eJc(){return _Rc};var lO=tjb(BQc,'TerrainDynamic$DemoScene',1239),hO=tjb(BQc,'TerrainDynamic$DemoScene$1',1240),iO=tjb(BQc,'TerrainDynamic$DemoScene$2',1241),jO=tjb(BQc,'TerrainDynamic$DemoScene$3',1242),kO=tjb(BQc,'TerrainDynamic$DemoScene$4',1243),$Q=tjb(bSc,LSc,1435),YO=tjb(rQc,'TerrainShader',1304),CQ=tjb(bSc,'BleachBypassShader',1399),SQ=tjb(bSc,'HorizontalTiltShiftShader',1423),cR=tjb(bSc,'VerticalTiltShiftShader',1441),oO=tjb(BQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1244),mO=tjb(BQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1245),nO=tjb(BQc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1246),ZQ=tjb(bSc,MSc,1436),XQ=tjb(bSc,NSc,1437),YQ=tjb(bSc,OSc,1438),XO=tjb(rQc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1305),VO=tjb(rQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1306),WO=tjb(rQc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1307),BQ=tjb(bSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1400),zQ=tjb(bSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1401),AQ=tjb(bSc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1402),RQ=tjb(bSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1424),PQ=tjb(bSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1425),QQ=tjb(bSc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1426),bR=tjb(bSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1442),_Q=tjb(bSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1443),aR=tjb(bSc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1444),WQ=tjb(bSc,'LuminosityShader',1429),VQ=tjb(bSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1430),TQ=tjb(bSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1431),UQ=tjb(bSc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1432);WLc(xi)(38);