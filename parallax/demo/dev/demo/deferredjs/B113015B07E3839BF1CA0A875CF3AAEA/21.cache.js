function d3b(){}
function l3b(){}
function rbc(){}
function Abc(){}
function xbc(){}
function Fbc(){}
function Ebc(){}
function Jbc(){}
function Ibc(){}
function Idc(){}
function sdc(){}
function Ddc(){}
function Adc(){}
function Hdc(){}
function Mdc(){}
function Ldc(){}
function f3b(){tTb.call(this)}
function m3b(a,b){this.b=a;this.c=b}
function wbc(){wbc=$hc;vbc=new Abc}
function Mbc(){Mbc=$hc;ybc=new Fbc}
function Nbc(){Nbc=$hc;zbc=new Jbc}
function zdc(){zdc=$hc;ydc=new Ddc}
function Pdc(){Pdc=$hc;Bdc=new Idc}
function Qdc(){Qdc=$hc;Cdc=new Mdc}
function tdc(){erb.call(this,(zdc(),ydc))}
function sbc(){erb.call(this,(wbc(),vbc))}
function e3b(a,b){var c,d,e,f,g,i;d=(sSb(),uSb(bmc,(zxb(),yxb),null));d.n=4;mEb(d.y,0.998,0.998);mEb(d.x,0.001,0.001);Rwb(d,(zob(),yob));Swb(d,yob);Iwb(d,(Ynb(),Wnb));e=uSb('./static/models/obj/leeperrysmith/Map-SPEC.jpg',yxb,null);mEb(e.y,0.998,0.998);mEb(e.x,0.001,0.001);Rwb(e,yob);Swb(e,yob);Iwb(e,Wnb);c=uSb('./static/models/obj/leeperrysmith/Map-COL.jpg',yxb,null);mEb(c.y,0.998,0.998);mEb(c.x,0.001,0.001);Rwb(c,yob);Swb(c,yob);Iwb(c,Wnb);g=new tdc;i=g.j;awb(Gs(i.b[dmc],133),(N3(),N3(),M3));awb(Gs(i.b[emc],133),M3);awb(Gs(i.b[fmc],133),a.b.f);awb(Gs(i.b[gmc],133),c);awb(Gs(i.b[hmc],133),d);awb(Gs(i.b[imc],133),e);Bzb(Gs(Gs(i.b[jmc],133).e,142),10526880);Bzb(Gs(Gs(i.b[kmc],133).e,142),10526880);Bzb(Gs(Gs(i.b[lmc],133).e,142),10526880);awb(Gs(i.b[mmc],133),new j4(0.145));awb(Gs(i.b[nmc],133),new j4(0.75));awb(Gs(i.b[omc],133),new j4(16));CFb(Gs(Gs(i.b[pmc],133).e,157),0.001,0.001,0.998,0.998);f=new JQb(g);f.d=true;a.c=new sRb(b,f);a.c.X.e=-50;REb(a.c.ab,100);a.c.N=true;a.c.O=true;syb(a.C,a.c)}
var dmc='enableBump',fmc='tBeckmann',mmc='uRoughness',nmc='uSpecularBrightness';_=$2b.prototype;_.tb=function c3b(){pTb(this.c,new f3b(this.b))};_=f3b.prototype=d3b.prototype=new sTb;_.gC=function g3b(){return XF};_.pd=function h3b(){Xdb(this,new mzb(27,Peb(this.B.E),1,10000))};_.hb=function i3b(){var a,b,c,d,e,f,g,i;this.A.X.c=1200;syb(this.C,this.A);syb(this.C,new PLb(5592405));f=new _Lb(16777215,1.5,1000);QEb(f.X,0,0,600);syb(this.C,f);g=new cMb(1);QEb(g.X,0.05,0.05,1);syb(this.C,g);g.X.ie(700);g.N=true;g.v=true;g.F=2048;g.D=2048;g.z=200;g.y=1500;g.d=40;g.w=-0.005;g.B=0.15;b=new XLb(16777215,0.85);QEb(b.X,1,-0.5,1);Azb(b.I,0.6,0.3,1);syb(this.C,b);b.X.ie(500);b.N=true;b.F=2048;b.D=2048;b.z=200;b.y=1500;b.f=-500;b.g=500;b.i=500;b.e=-500;b.w=-0.005;b.B=0.15;c=new XLb(16777215,0.85);QEb(c.X,1,-0.5,-1);syb(this.C,c);new _fc(new sbc);d=new _fc(new Agc);d.b=true;i=new hxb(512,512);Lwb(i,(qob(),kob));Kwb(i,(eob(),cob));Iwb(i,(Ynb(),Wnb));i.g=false;this.b=new Sfc(this.B,i);e=new gec;try{Tdc(e,cmc,new m3b(this,e))}catch(a){a=xJ(a);if(Is(a,41)){hyb();TM(gyb,(zM(),xM),Nlc)}else throw a}Wpb(this.B,5001561,1);this.B.Q=true;this.B.P=false;this.B.J=false;this.B.L=true;this.B.M=true;this.B.O=true};_.od=function j3b(){};_.ib=function k3b(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){iEb(this.c.$,0.05*(b-this.c.$.e));hEb(this.c.$,0.05*(c-this.c.$.d))}Cpb(this.B)};_.cM={223:1};_.b=null;_.c=null;_.d=0;_.e=0;_=m3b.prototype=l3b.prototype=new Kb;_.gC=function n3b(){return WF};_.$e=function o3b(){e3b(this.b,this.c.c)};_.b=null;_.c=null;_=sbc.prototype=rbc.prototype=new Sqb;_.gC=function tbc(){return yH};_.td=function ubc(){};_.cM={131:1};var vbc;_=Abc.prototype=xbc.prototype=new Kb;_.gC=function Bbc(){return xH};_.wd=function Cbc(){return Mbc(),ybc};_.xd=function Dbc(){return Nbc(),zbc};var ybc=null,zbc=null;_=Fbc.prototype=Ebc.prototype=new Kb;_.gC=function Gbc(){return vH};_.Yb=function Hbc(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=Jbc.prototype=Ibc.prototype=new Kb;_.gC=function Kbc(){return wH};_.Yb=function Lbc(){return qmc};_=tdc.prototype=sdc.prototype=new Sqb;_.gC=function udc(){return DH};_.td=function vdc(){arb(this,Bwb());arb(this,Cwb());arb(this,Dwb());Vqb(this,dmc,new cwb((wwb(),lwb),N4(0)));Vqb(this,emc,new cwb(lwb,N4(0)));Vqb(this,gmc,new bwb(owb));Vqb(this,fmc,new bwb(owb));Vqb(this,kmc,new cwb(hwb,new Gzb(15658734)));Vqb(this,lmc,new cwb(hwb,new Gzb(1118481)));Vqb(this,jmc,new cwb(hwb,new Gzb(328965)));Vqb(this,rmc,new cwb(iwb,new j4(1)));Vqb(this,mmc,new cwb(iwb,new j4(0.15)));Vqb(this,nmc,new cwb(iwb,new j4(0.75)));Vqb(this,hmc,new bwb(owb));Vqb(this,omc,new cwb(iwb,new j4(1)));Vqb(this,imc,new bwb(owb));Vqb(this,pmc,new cwb(uwb,new FFb(0,0,1,1)));Vqb(this,'uWrapRGB',new cwb(swb,new WEb(0.75,0.375,0.1875)))};_.ud=function wdc(a){var b,c;c=new mab(xs(JI,{87:1,99:1},1,[smc,tmc,umc]));b=new mab(xs(JI,{87:1,99:1},1,[vmc,wmc,xmc]));crb(this,krb(a,xs(LI,{87:1,99:1},106,[c,b])))};_.vd=function xdc(a){var b,c;c=new mab(xs(JI,{87:1,99:1},1,[ymc]));b=new mab(xs(JI,{87:1,99:1},1,[zmc]));drb(this,krb(a,xs(LI,{87:1,99:1},106,[c,b])))};_.cM={131:1};var ydc;_=Ddc.prototype=Adc.prototype=new Kb;_.gC=function Edc(){return CH};_.wd=function Fdc(){return Pdc(),Bdc};_.xd=function Gdc(){return Qdc(),Cdc};var Bdc=null,Cdc=null;_=Idc.prototype=Hdc.prototype=new Kb;_.gC=function Jdc(){return AH};_.Yb=function Kdc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=Mdc.prototype=Ldc.prototype=new Kb;_.gC=function Ndc(){return BH};_.Yb=function Odc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var XF=Z3(Dlc,'MaterialsBumpmapSkin$DemoScene'),WF=Z3(Dlc,'MaterialsBumpmapSkin$DemoScene$1'),yH=Z3(Glc,'BeckmannShader'),xH=Z3(Glc,'BeckmannShader_Resources_default_InlineClientBundleGenerator'),vH=Z3(Glc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1'),wH=Z3(Glc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2'),DH=Z3(Glc,'SkinSimpleShader'),CH=Z3(Glc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator'),AH=Z3(Glc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1'),BH=Z3(Glc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2');aic(fe)(21);