function jKb(){}
function nKb(){}
function qKb(){}
function fKb(){fKb=sMc;eKb=new jKb}
function sKb(){sKb=sMc;hKb=new nKb}
function tKb(){tKb=sMc;iKb=new qKb}
function cKb(){tIb.call(this,(fKb(),eKb))}
function alc(){p9b.call(this);this.c=0;this.d=0}
fU(752,728,PNc,cKb);_.Kd=function dKb(){hIb(this,'mRefractionRatio',new JMb((aNb(),OMb),new Hjb(1.02)));hIb(this,'mFresnelBias',new JMb(OMb,new Hjb(0.1)));hIb(this,'mFresnelPower',new JMb(OMb,new Hjb(2)));hIb(this,'mFresnelScale',new JMb(OMb,new Hjb(1)));hIb(this,jUc,new IMb(UMb))};var eKb;fU(753,1,{},jKb);_.Nd=function kKb(){return sKb(),hKb};_.Od=function lKb(){return tKb(),iKb};var hKb,iKb;fU(754,1,{},nKb);_.mc=function oKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};fU(755,1,{},qKb);_.mc=function rKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};fU(1135,1,aOc);_.zb=function $kc(){R8b(this.b,new alc(this.a))};fU(1136,970,{326:1},alc);_.nb=function blc(){var a,b,c,d,e,f,g,i,j;this.a=new dQb(60,wGb(this.G.k),1,100000);J5b(this.a._,3200);this.b=new dQb(60,wGb(this.G.k),1,100000);this.e=new X7b;a=new wWb(100,32,16);j=new RNb('./static/textures/cube/park2/*.jpg');qNb(j,(sCb(),qCb));g=new cKb;HMb(Au(BRb(g.i,jUc),225),j);c=new c2b(g);this.f=new uqb;for(b=0;b<500;b++){d=new j7b(a,c);W4b(d._,Okb()*10000-5000);X4b(d._,Okb()*10000-5000);J5b(d._,Okb()*10000-5000);G5b(d.eb,Okb()*3+1);dPb(this.H,d);kqb(this.f,d)}this.H.W=false;i=new VIb;HMb(Au(BRb(i.i,jUc),225),j);f=new c2b(i);fZb(f,(T$b(),Q$b));e=new j7b(new HVb(100000,100000,100000),f);dPb(this.e,e);QGb(this.G.k,false)};_.ob=function clc(a){var b,c,d,e;e=1.0E-4*a;R4b(this.a._,(this.c-this.a._.c)*0.05);S4b(this.a._,(-this.d-this.a._.d)*0.05);BPb(this.a,this.H._);Z2b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=Au(nqb(this.f,b),303);W4b(d._,5000*Math.cos(e+b));X4b(d._,5000*Math.sin(e+b*1.1))}pGb(this.G.k,true);IGb(this.G.k,this.e,this.b,null,false);IGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var GM=vjb(bTc,'MaterialsCubemapFresnel$DemoScene',1136),hG=vjb(kUc,'FresnelShader',752),gG=vjb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',753),eG=vjb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',754),fG=vjb(kUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',755);oOc(xi)(21);