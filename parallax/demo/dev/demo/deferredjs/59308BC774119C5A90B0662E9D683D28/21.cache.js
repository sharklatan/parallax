function DLb(){}
function HLb(){}
function KLb(){}
function zLb(){zLb=IQc;yLb=new DLb}
function MLb(){MLb=IQc;BLb=new HLb}
function NLb(){NLb=IQc;CLb=new KLb}
function wLb(){NJb.call(this,(zLb(),yLb))}
function Dmc(){Pac.call(this);this.c=0;this.d=0}
KU(757,733,eSc,wLb);_.Ld=function xLb(){BJb(this,'mRefractionRatio',new bOb((uOb(),gOb),new ukb(1.02)));BJb(this,'mFresnelBias',new bOb(gOb,new ukb(0.1)));BJb(this,'mFresnelPower',new bOb(gOb,new ukb(2)));BJb(this,'mFresnelScale',new bOb(gOb,new ukb(1)));BJb(this,sYc,new aOb(mOb))};var yLb;KU(758,1,{},DLb);_.Od=function ELb(){return MLb(),BLb};_.Pd=function FLb(){return NLb(),CLb};var BLb,CLb;KU(759,1,{},HLb);_.nc=function ILb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};KU(760,1,{},KLb);_.nc=function LLb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};KU(1141,1,rSc);_.zb=function Bmc(){pac(this.b,new Dmc(this.a))};KU(1142,975,{328:1},Dmc);_.nb=function Emc(){var a,b,c,d,e,f,g,i,j;this.a=new yRb(60,QHb(this.G.k),1,100000);g7b(this.a._,3200);this.b=new yRb(60,QHb(this.G.k),1,100000);this.e=new v9b;a=new VXb(100,32,16);j=new jPb('./static/textures/cube/park2/*.jpg');KOb(j,(lDb(),jDb));g=new wLb;_Nb(ru(YSb(g.i,sYc),227),j);c=new B3b(g);this.f=new hrb;for(b=0;b<500;b++){e=new I8b(a,c);t6b(e._,Blb()*10000-5000);u6b(e._,Blb()*10000-5000);g7b(e._,Blb()*10000-5000);d7b(e.eb,Blb()*3+1);xQb(this.H,e);Zqb(this.f,e)}this.H.W=false;i=new nKb;_Nb(ru(YSb(i.i,sYc),227),j);f=new B3b(i);E$b(f,(q0b(),n0b));d=new I8b(new eXb(100000,100000,100000),f);xQb(this.e,d);iIb(this.G.k,false)};_.ob=function Fmc(a){var b,c,d,e;e=1.0E-4*a;o6b(this.a._,(this.c-this.a._.c)*0.05);p6b(this.a._,(-this.d-this.a._.d)*0.05);WQb(this.a,this.H._);w4b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=ru(arb(this.f,b),305);t6b(d._,5000*Math.cos(e+b));u6b(d._,5000*Math.sin(e+b*1.1))}JHb(this.G.k,true);aIb(this.G.k,this.e,this.b,null,false);aIb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var DM=ikb(kXc,'MaterialsCubemapFresnel$DemoScene',1142),dG=ikb(tYc,'FresnelShader',757),cG=ikb(tYc,'FresnelShader_Resources_default_InlineClientBundleGenerator',758),aG=ikb(tYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',759),bG=ikb(tYc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',760);FSc(xi)(21);