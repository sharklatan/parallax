function Anc(){}
function Enc(){}
function Hnc(){}
function Eqc(){}
function Iqc(){}
function Lqc(){}
function Aqc(){Aqc=$Cc;zqc=new Eqc}
function Nqc(){Nqc=$Cc;Cqc=new Iqc}
function Oqc(){Oqc=$Cc;Dqc=new Lqc}
function wnc(){wnc=$Cc;vnc=new Anc}
function Jnc(){Jnc=$Cc;ync=new Enc}
function Knc(){Knc=$Cc;znc=new Hnc}
function tnc(){CEb.call(this,(wnc(),vnc))}
function vqc(){CEb.call(this,(Aqc(),zqc))}
function Kec(){F4b.call(this);this.e=0;this.f=0}
function Oec(a,b){this.b=a;this.c=b}
function Jec(a,b){var c,d,e,f,g,i;d=new IJb(OJc);d.n=4;H0b(d.B,0.998,0.998);H0b(d.A,0.001,0.001);CJb(d,(GCb(),FCb));DJb(d,FCb);sJb(d,(hAb(),fAb));e=new IJb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');H0b(e.B,0.998,0.998);H0b(e.A,0.001,0.001);CJb(e,FCb);DJb(e,FCb);sJb(e,fAb);c=new IJb('./static/models/obj/leeperrysmith/Map-COL.jpg');H0b(c.B,0.998,0.998);H0b(c.A,0.001,0.001);CJb(c,FCb);DJb(c,FCb);sJb(c,fAb);g=new vqc;i=g.j;JIb(Cu(i.b[RJc],168),(Sgb(),Sgb(),Rgb));JIb(Cu(i.b[SJc],168),Rgb);JIb(Cu(i.b[TJc],168),a.c.f);JIb(Cu(i.b[UJc],168),c);JIb(Cu(i.b[VJc],168),d);JIb(Cu(i.b[WJc],168),e);F$b(Cu(Cu(i.b[XJc],168).e,230),10526880);F$b(Cu(Cu(i.b[YJc],168).e,230),10526880);F$b(Cu(Cu(i.b[ZJc],168).e,230),10526880);JIb(Cu(i.b[$Jc],168),new Ohb(0.145));JIb(Cu(i.b[_Jc],168),new Ohb(0.75));JIb(Cu(i.b[aKc],168),new Ohb(16));a2b(Cu(Cu(i.b[bKc],168).e,237),0.001,0.001,0.998,0.998);f=new YZb(g);f.d=true;a.d=new O2b(b,f);J0b(a.d.bb,-50);l1b(a.d.gb,100);a.d.R=true;a.d.T=true;cLb(a.I,a.d)}
var RJc='enableBump',TJc='tBeckmann',$Jc='uRoughness',_Jc='uSpecularBrightness';PS(1076,1,zEc);_.Gb=function Hec(){C4b(this.c,new Kec(this.b))};PS(1077,934,{263:1},Kec);_.rb=function Lec(){var b,c,d,e,f,g,i,j;this.b=new gMb(27,gDb(this.H.o),1,10000);q1b(this.b.bb,1200);cLb(this.I,new WTb(5592405));f=new MUb(16777215,1.5,1000);m1b(f.bb,0,0,600);cLb(this.I,f);i=new XUb(1);m1b(i.bb,0.05,0.05,1);cLb(this.I,i);i.bb.xf(700);i.R=true;i.u=true;i.I=2048;i.G=2048;i.B=200;i.A=1500;i.d=40;i.v=-0.005;i.D=0.15;b=new wUb(16777215,0.85);m1b(b.bb,1,-0.5,1);E$b(b.L,0.6,0.3,1);cLb(this.I,b);b.bb.xf(500);b.R=true;b.I=2048;b.G=2048;b.B=200;b.A=1500;b.f=-500;b.g=500;b.i=500;b.e=-500;b.v=-0.005;b.D=0.15;c=new wUb(16777215,0.85);m1b(c.bb,1,-0.5,-1);cLb(this.I,c);new kzc(new tnc);d=new kzc(new Zzc);d.b=true;j=new fKb(512,512);wJb(j,(oBb(),iBb));uJb(j,(dBb(),bBb));sJb(j,(hAb(),fAb));j.g=false;this.c=new azc(this.H.o,j);e=new Vrc;try{Jrc(e,PJc,new Oec(this,e))}catch(a){a=UR(a);if(Fu(a,46)){TKb();SU(SKb,(dsb(),bsb),QJc)}else throw TR(a)}tDb(this.H.o,5001561,1);g=new XCb(this.H.o,this.I);g.g=false;this.H.o.S=false;this.H.o.U=true;this.H.o.V=true;this.H.o.X=true};_.sb=function Mec(a){var b,c;b=this.e*0.001;c=this.f*0.001;if(this.d){E0b(this.d.eb,0.05*(b-this.d.eb.e));D0b(this.d.eb,0.05*(c-this.d.eb.d))}dDb(this.H.o);lDb(this.H.o,this.I,this.b,null,false)};_.e=0;_.f=0;PS(1078,1,{},Oec);_.Hf=function Pec(){Jec(this.b,this.c.b)};PS(1197,703,nEc,tnc);_.Od=function unc(){};var vnc;PS(1198,1,{},Anc);_.Rd=function Bnc(){return Jnc(),ync};_.Sd=function Cnc(){return Knc(),znc};var ync,znc;PS(1199,1,{},Enc);_.ic=function Fnc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};PS(1200,1,{},Hnc);_.ic=function Inc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};PS(1268,703,nEc,vqc);_.Od=function wqc(){xEb(this,gJb());xEb(this,hJb());xEb(this,iJb());qEb(this,RJc,new LIb((cJb(),TIb),uib(0)));qEb(this,SJc,new LIb(TIb,uib(0)));qEb(this,UJc,new KIb(WIb));qEb(this,TJc,new KIb(WIb));qEb(this,YJc,new LIb(PIb,new I$b(15658734)));qEb(this,ZJc,new LIb(PIb,new I$b(1118481)));qEb(this,XJc,new LIb(PIb,new I$b(328965)));qEb(this,cKc,new LIb(QIb,new Ohb(1)));qEb(this,$Jc,new LIb(QIb,new Ohb(0.15)));qEb(this,_Jc,new LIb(QIb,new Ohb(0.75)));qEb(this,VJc,new KIb(WIb));qEb(this,aKc,new LIb(QIb,new Ohb(1)));qEb(this,WJc,new KIb(WIb));qEb(this,bKc,new LIb(aJb,new e2b(0,0,1,1)));qEb(this,'uWrapRGB',new LIb($Ib,new t1b(0.75,0.375,0.1875)))};_.Pd=function xqc(a){var b,c;c=new $ob(su(NQ,eDc,1,[dKc,eKc,fKc]));b=new $ob(su(NQ,eDc,1,[gKc,hKc,iKc]));zEb(this,HEb(a,su(QQ,eDc,120,[c,b])))};_.Qd=function yqc(a){var b,c;c=new $ob(su(NQ,eDc,1,[jKc]));b=new $ob(su(NQ,eDc,1,[kKc]));AEb(this,HEb(a,su(QQ,eDc,120,[c,b])))};var zqc;PS(1269,1,{},Eqc);_.Rd=function Fqc(){return Nqc(),Cqc};_.Sd=function Gqc(){return Oqc(),Dqc};var Cqc,Dqc;PS(1270,1,{},Iqc);_.ic=function Jqc(){return '#define USE_BUMPMAP\n#extension GL_OES_standard_derivatives : enable\n\nuniform bool enableBump;\nuniform bool enableSpecular;\n\nuniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uOpacity;\n\nuniform float uRoughness;\nuniform float uSpecularBrightness;\n\nuniform vec3 uWrapRGB;\n\nuniform sampler2D tDiffuse;\nuniform sampler2D tBeckmann;\n\nuniform sampler2D specularMap;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\n// Fresnel term\n\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\n\n\tfloat base = 1.0 - dot( V, H );\n\tfloat exponential = pow( base, 5.0 );\n\n\treturn exponential + F0 * ( 1.0 - exponential );\n\n}\n\n// Kelemen/Szirmay-Kalos specular BRDF\n\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\n\t\t\t\t\t\tfloat m,  \t// Roughness\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\n\t\t\t\t\t\t) {\n\n\tfloat result = 0.0;\n\tfloat ndotl = dot( N, L );\n\n\tif( ndotl > 0.0 ) {\n\n\t\tvec3 h = L + V; // Unnormalized half-way vector\n\t\tvec3 H = normalize( h );\n\n\t\tfloat ndoth = dot( N, H );\n\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\n\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\n\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\n\n\t}\n\n\treturn result;\n\n}\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\n\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\n\tcolDiffuse.rgb *= colDiffuse.rgb;\n\n\tgl_FragColor = gl_FragColor * colDiffuse;\n\n\tvec3 normal = normalize( vNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\tfloat specularStrength;\n\n\tif ( enableSpecular ) {\n\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\t\tspecularStrength = texelSpecular.r;\n\n\t} else {\n\n\t\tspecularStrength = 1.0;\n\n\t}\n\n\t#ifdef USE_BUMPMAP\n\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n\t#endif\n\n\t// point lights\n\n\tvec3 specularTotal = vec3( 0.0 );\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// directional lights\n\t\t\t\t\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirTotal = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t// all lights contribution summation\n\n\tvec3 totalLight = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalLight += dirTotal;\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalLight += pointTotal;\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalLight += hemiTotal;\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\n\n[*]\n\n}'};PS(1271,1,{},Lqc);_.ic=function Mqc(){return 'uniform vec4 offsetRepeat;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvNormal = normalMatrix * normal;\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n[*]\n\n}\n'};var LL=Chb(nJc,'MaterialsBumpmapSkin$DemoScene',1077),KL=Chb(nJc,'MaterialsBumpmapSkin$DemoScene$1',1078),UN=Chb(gJc,'BeckmannShader',1197),TN=Chb(gJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1198),RN=Chb(gJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1199),SN=Chb(gJc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1200),hO=Chb(gJc,'SkinSimpleShader',1268),gO=Chb(gJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1269),eO=Chb(gJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1270),fO=Chb(gJc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1271);MEc(Di)(19);