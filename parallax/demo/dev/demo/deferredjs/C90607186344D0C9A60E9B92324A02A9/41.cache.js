function hnc(){}
function lnc(){}
function onc(){}
function Zqc(){}
function brc(){}
function erc(){}
function uzc(){}
function yzc(){}
function Bzc(){}
function QAc(){}
function UAc(){}
function XAc(){}
function XBc(){}
function hBc(){}
function lBc(){}
function oBc(){}
function ABc(){}
function EBc(){}
function HBc(){}
function TBc(){}
function $Bc(){}
function dUb(a,b){a.t=b}
function KUb(a,b){a.c=b}
function W2b(a,b){a.i=b}
function $yc(a,b){qob(a.c,b)}
function grc(){grc=$Cc;Xqc=new brc}
function hrc(){hrc=$Cc;Yqc=new erc}
function Vqc(){Vqc=$Cc;Uqc=new Zqc}
function dnc(){dnc=$Cc;cnc=new hnc}
function qnc(){qnc=$Cc;fnc=new lnc}
function rnc(){rnc=$Cc;gnc=new onc}
function rBc(){rBc=$Cc;gBc=new oBc}
function dBc(){dBc=$Cc;cBc=new hBc}
function qBc(){qBc=$Cc;fBc=new lBc}
function wBc(){wBc=$Cc;vBc=new ABc}
function JBc(){JBc=$Cc;yBc=new EBc}
function KBc(){KBc=$Cc;zBc=new HBc}
function PBc(){PBc=$Cc;OBc=new TBc}
function aCc(){aCc=$Cc;RBc=new XBc}
function bCc(){bCc=$Cc;SBc=new $Bc}
function qzc(){qzc=$Cc;pzc=new uzc}
function Dzc(){Dzc=$Cc;szc=new yzc}
function Ezc(){Ezc=$Cc;tzc=new Bzc}
function MAc(){MAc=$Cc;LAc=new QAc}
function ZAc(){ZAc=$Cc;OAc=new UAc}
function $Ac(){$Ac=$Cc;PAc=new XAc}
function Tmc(a,b){this.b=a;this.c=b}
function Wmc(a,b){this.b=a;this.c=b}
function Zmc(a,b){this.b=a;this.c=b}
function anc(a,b){this.b=a;this.c=b}
function aBc(){CEb.call(this,(dBc(),cBc))}
function tBc(){CEb.call(this,(wBc(),vBc))}
function MBc(){CEb.call(this,(PBc(),OBc))}
function Qqc(){CEb.call(this,(Vqc(),Uqc))}
function nzc(){CEb.call(this,(qzc(),pzc))}
function JAc(){CEb.call(this,(MAc(),LAc))}
function Mmc(a){a.A+=1;a.A==3&&lLb(a.w,true)}
function Nmc(){F4b.call(this);this.b=0;this.k=0;this.j=1;this.v=1000;this.u=1000;this.D=true}
function Lmc(a,b,c,d){var e,f,g;g=new YZb(b);JIb(Cu(TNb(lVb(g).j,UJc),168),c);f=new G3b;e=new O2b(new tSb(a.v,a.u),g);q1b(e.bb,-500);cLb(f,e);lDb(a.H.o,f,a.d,d,true)}
function Kmc(a,b,c,d,e,f){var g,i;g=new iYb;cYb(g,new I$b(16755285));g.j=true;gYb(g,(eWb(),bWb));i=new Y2b(b,g);i.c=c;W2b(i,Ku(600*Vib()));m1b(i.bb,d,e,f);J0b(i.eb,1.5707963267948966);i.R=true;i.T=true;cLb(a.I,i);qob(a.o,i);C3b(a.I,a.H.o)}
var qLc='enableDiffuse1',rLc='enableDiffuse2',jLc='h',lLc='heightMap',vLc='heightmap',xLc='r',pLc='tDetail',nLc='tDiffuse1',oLc='tDiffuse2',tLc='uRepeatOverlay',kLc='v';PS(1186,1,zEc);_.Gb=function Imc(){C4b(this.c,new Nmc(this.b))};PS(1187,934,{43:1,133:1,275:1},Nmc);_.Wd=function Omc(a){Mmc(this)};_.Ld=function Pmc(a){this.v=a.b.p;this.u=a.b.o;JIb(Cu(TNb(lVb(this.g.c).j,jLc),168),new Ohb(6/this.v));JIb(Cu(TNb(lVb(this.F.c).j,kLc),168),new Ohb(6/this.u))};_.rb=function Qmc(){var b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u,v,w;qt((zvb(),yvb),(Jvb(),Ivb),this);this.c=new gMb(40,gDb(this.H.o),2,4000);this.v=this.H.o.p;this.u=this.H.o.o;this.d=new XLb(this.v,this.u,-10000,10000);m1b(this.c.bb,-1200,800,1200);q1b(this.d.bb,100);this.t=new G3b;cLb(this.t,this.d);this.e=new Eub(this.c,this.H.c);l1b(this.e.w,0);this.e.t=1;this.e.B=1.2;Bub(this.e,0.8);this.e.i=true;this.e.f=true;this.e.g=true;zub(this.e,0.15);F3b(this.I,new s3b(328965,2000,4000));E$b(this.I.c.d,0.102,0.9,0.825);cLb(this.I,new WTb(1118481));this.f=new wUb(16777215,1.15);m1b(this.f.bb,500,2000,0);cLb(this.I,this.f);this.r=new MUb(16729088,1.5,0);l1b(this.r.bb,0);cLb(this.I,this.r);this.i=new fKb(256,256);wJb(this.i,(oBb(),jBb));uJb(this.i,(dBb(),bBb));sJb(this.i,(hAb(),fAb));this.p=new fKb(256,256);wJb(this.p,jBb);uJb(this.p,bBb);sJb(this.p,fAb);p=new tBc;w=p.j;JIb(Cu(w.b[YGc],168),new Ohb(0.05));H0b(Cu(Cu(w.b[HKc],168).e,234),256,256);JIb(Cu(w.b[lLc],168),this.i);u=new fKb(2048,2048);wJb(u,jBb);uJb(u,bBb);sJb(u,fAb);CJb(u,(GCb(),FCb));DJb(u,FCb);d=new JJb('./static/textures/terrain/grasslight-big.jpg',new Tmc(this,u));CJb(d,FCb);DJb(d,FCb);e=new JJb('./static/textures/terrain/backgrounddetailed6.jpg',this);CJb(e,FCb);DJb(e,FCb);c=new JJb('./static/textures/terrain/grasslight-big-nm.jpg',this);CJb(c,FCb);DJb(c,FCb);v=new Qqc;this.C=v.j;JIb(Cu(TNb(this.C,BKc),168),this.p);JIb(Cu(TNb(this.C,CKc),168),new Ohb(3.5));JIb(Cu(TNb(this.C,mLc),168),this.i);JIb(Cu(TNb(this.C,nLc),168),d);JIb(Cu(TNb(this.C,oLc),168),e);JIb(Cu(TNb(this.C,DKc),168),u);JIb(Cu(TNb(this.C,pLc),168),c);JIb(Cu(TNb(this.C,qLc),168),(Sgb(),Sgb(),Rgb));JIb(Cu(TNb(this.C,rLc),168),Rgb);JIb(Cu(TNb(this.C,SJc),168),Rgb);F$b(Cu(Cu(TNb(this.C,YJc),168).e,230),16777215);F$b(Cu(Cu(TNb(this.C,ZJc),168).e,230),16777215);F$b(Cu(Cu(TNb(this.C,XJc),168).e,230),1118481);JIb(Cu(TNb(this.C,GKc),168),new Ohb(30));JIb(Cu(TNb(this.C,sLc),168),new Ohb(375));H0b(Cu(Cu(TNb(this.C,tLc),168).e,234),6,6);this.B=new frb;Gmb(this.B,KKc,new LIb((cJb(),QIb),new Ohb(1)));Gmb(this.B,uLc,new LIb(YIb,new L0b(1.5,1.5)));Gmb(this.B,nKc,new LIb(YIb,new L0b(0,0)));this.n=new frb;k=new XZb((dnc(),cnc));xEb(lVb(k),this.B);k.d=false;k.c=true;Gmb(this.n,vLc,k);n=new YZb(p);xEb(lVb(n),w);n.d=false;n.c=true;Gmb(this.n,wLc,n);o=new YZb(v);xEb(lVb(o),this.C);o.d=true;o.c=true;Gmb(this.n,'terrain',o);q=new tSb(this.v,this.u);r=new sXb;nXb(r,new I$b(0));this.s=new O2b(q,r);q1b(this.s.bb,-500);cLb(this.t,this.s);i=new uSb(6000,6000,64,64);JMb(i,Sgb());MMb(i);LMb(i);this.w=new O2b(i,o);m1b(this.w.bb,0,-125,0);I0b(this.w.eb,-1.5707963267948966);lLb(this.w,false);cLb(this.I,this.w);sDb(this.H.o,this.I.c.d);this.H.o.U=true;this.H.o.V=true;this.H.o.S=false;s=new hzc(this.I,this.c);g=new Uyc(0.6);f=new kzc(new nzc);JIb(Cu(TNb(lVb(f.c).j,rKc),168),new Ohb(0.65));this.g=new kzc(new JAc);this.F=new kzc(new MBc);JIb(Cu(TNb(lVb(this.g.c).j,jLc),168),new Ohb(6/this.v));JIb(Cu(TNb(lVb(this.F.c).j,kLc),168),new Ohb(6/this.u));JIb(Cu(TNb(lVb(this.g.c).j,xLc),168),new Ohb(0.5));JIb(Cu(TNb(lVb(this.F.c).j,xLc),168),new Ohb(0.5));this.F.b=true;t=new fKb(this.v,this.u);wJb(u,iBb);uJb(u,bBb);sJb(u,fAb);u.g=false;b=new azc(this.H.o,t);qob(b.c,s);qob(b.c,g);qob(b.c,f);$yc(b,this.g);$yc(b,this.F);j=new Vrc;this.o=new Aob;try{Jrc(j,'./static/models/animated/parrot.js',new Wmc(this,j));Jrc(j,iLc,new Zmc(this,j));Jrc(j,'./static/models/animated/stork.js',new anc(this,j))}catch(a){a=UR(a);if(Fu(a,46)){TKb();SU(SKb,(dsb(),bsb),QJc)}else throw TR(a)}C3b(this.I,this.H.o);this.q=xh()};_.sb=function Rmc(a){var b,c,d,e,f;b=(xh()-this.q)*0.001;if(this.w.kb){Cub(this.e);this.k=Q$b(this.k+0.5*b*this.j,0.4,0.825);f=(this.k-0.4)/0.42499999999999993;e=0.95+f*-0.7;E$b(this.I.c.d,0.1,e,this.k);sDb(this.H.o,this.I.c.d);dUb(this.f,0.1+f*1.0499999999999998);KUb(this.r,0.9+f*0.6);JIb(Cu(TNb(this.C,CKc),168),new Ohb(0.6+f*2.9));if(this.D){this.b=Q$b(this.b+-7.5E-4,0,0.05);JIb(Cu(Bmb(this.B,KKc),168),new Ohb(Cu(Cu(Bmb(this.B,KKc),168).e,98).b+b*this.b));D0b(Cu(Cu(Bmb(this.B,nKc),168).e,234),b*0.05);I0b(Cu(Cu(TNb(this.C,yLc),168).e,234),4*Cu(Cu(Bmb(this.B,nKc),168).e,234).d);uTb(this.s,Cu(Bmb(this.n,vLc),218));lDb(this.H.o,this.t,this.d,this.i,true);uTb(this.s,Cu(Bmb(this.n,wLc),218));lDb(this.H.o,this.t,this.d,this.p,true);this.D=false}for(c=0;c<this.o.c;c++){d=Cu(tob(this.o,c),243);X2b(d,Ku(1000*b));D0b(d.bb,d.c*b);d.bb.d>2000&&I0b(d.bb,-1500-Vib()*500)}lDb(this.H.o,this.I,this.c,null,false)}this.q=xh()};_.b=0;_.j=0;_.k=0;_.q=0;_.u=0;_.v=0;_.A=0;_.D=false;PS(1188,1,{},Tmc);_.Wd=function Umc(a){Mmc(this.b);Lmc(this.b,new aBc,a,this.c)};PS(1189,1,{},Wmc);_.Hf=function Xmc(){var a;a=this.c.b;Orc(this.c);Kmc(this.b,a,500,-3500,500,700);Kmc(this.b,a,500,-3000-Vib()*500,500,-200);Kmc(this.b,a,500,-3000-Vib()*500,500,200);Kmc(this.b,a,500,-3000-Vib()*500,500,1000)};PS(1190,1,{},Zmc);_.Hf=function $mc(){var a;a=this.c.b;Orc(this.c);Kmc(this.b,a,1000,-3000-Vib()*500,350,40)};PS(1191,1,{},anc);_.Hf=function bnc(){var a;a=this.c.b;Orc(this.c);Kmc(this.b,a,1000,-3000-Vib()*500,350,340)};var cnc;PS(1192,1,{},hnc);_.Rd=function inc(){return qnc(),fnc};_.Sd=function jnc(){return rnc(),gnc};var fnc,gnc;PS(1193,1,{},lnc);_.ic=function mnc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};PS(1194,1,{},onc);_.ic=function pnc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};PS(1274,703,nEc,Qqc);_.Od=function Rqc(){xEb(this,gJb());xEb(this,hJb());xEb(this,iJb());qEb(this,qLc,new LIb((cJb(),TIb),(Sgb(),Sgb(),Qgb)));qEb(this,rLc,new LIb(TIb,Qgb));qEb(this,SJc,new LIb(TIb,Qgb));qEb(this,zLc,new LIb(TIb,Qgb));qEb(this,nLc,new KIb(WIb));qEb(this,oLc,new KIb(WIb));qEb(this,pLc,new KIb(WIb));qEb(this,BKc,new KIb(WIb));qEb(this,DKc,new KIb(WIb));qEb(this,mLc,new KIb(WIb));qEb(this,CKc,new LIb(QIb,new Ohb(1)));qEb(this,ALc,new LIb(QIb,new Ohb(0)));qEb(this,sLc,new LIb(QIb,new Ohb(1)));qEb(this,YJc,new LIb(PIb,new I$b(15658734)));qEb(this,ZJc,new LIb(PIb,new I$b(1118481)));qEb(this,XJc,new LIb(PIb,new I$b(328965)));qEb(this,GKc,new LIb(QIb,new Ohb(30)));qEb(this,cKc,new LIb(QIb,new Ohb(1)));qEb(this,'uRepeatBase',new LIb(YIb,new L0b(1,1)));qEb(this,tLc,new LIb(YIb,new L0b(1,1)));qEb(this,yLc,new LIb(YIb,new L0b(0,0)))};_.Pd=function Sqc(a){var b,c;c=new $ob(su(NQ,eDc,1,[dKc,eKc]));b=new $ob(su(NQ,eDc,1,[gKc,hKc,iKc]));zEb(this,HEb(a,su(QQ,eDc,120,[c,b])))};_.Qd=function Tqc(a){var b,c;c=new $ob(su(NQ,eDc,1,[jKc]));b=new $ob(su(NQ,eDc,1,[kKc]));AEb(this,HEb(a,su(QQ,eDc,120,[c,b])))};var Uqc;PS(1275,1,{},Zqc);_.Rd=function $qc(){return grc(),Xqc};_.Sd=function _qc(){return hrc(),Yqc};var Xqc,Yqc;PS(1276,1,{},brc);_.ic=function crc(){return 'uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\n\nuniform bool enableDiffuse1;\nuniform bool enableDiffuse2;\nuniform bool enableSpecular;\n\nuniform sampler2D tDiffuse1;\nuniform sampler2D tDiffuse2;\nuniform sampler2D tDetail;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tDisplacement;\n\nuniform float uNormalScale;\n\nuniform vec2 uRepeatOverlay;\nuniform vec2 uRepeatBase;\n\nuniform vec2 uOffset;\n\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\n\n\tvec3 specularTex = vec3( 1.0 );\n\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\n\tvec2 uvBase = uRepeatBase * vUv;\n\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\n\tnormalTex.xy *= uNormalScale;\n\tnormalTex = normalize( normalTex );\n\n\tif( enableDiffuse1 && enableDiffuse2 ) {\n\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\n\n\t\t#ifdef GAMMA_INPUT\n\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\n\n\t\t#endif\n\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\n\n\t } else if( enableDiffuse1 ) {\n\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\n\n\t} else if( enableDiffuse2 ) {\n\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\n\n\t}\n\n\tif( enableSpecular )\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\n\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\n\tvec3 finalNormal = tsb * normalTex;\n\n\tvec3 normal = normalize( finalNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\t// point lights\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointDiffuse = vec3( 0.0 );\n\t\tvec3 pointSpecular = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat pointDistance = lDistance;\n\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\n\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// directional lights\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirDiffuse = vec3( 0.0 );\n\t\tvec3 dirSpecular = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n\n\t\t\tdirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\n\t\t\tdirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\n\t\tvec3 hemiSpecular = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiDiffuse += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\n\n\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\n\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n\n\t\t\themiSpecular += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\n\n\t\t}\n\n\t#endif\n\n\t// all lights contribution summation\n\n\tvec3 totalDiffuse = vec3( 0.0 );\n\tvec3 totalSpecular = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\ttotalDiffuse += dirDiffuse;\n\t\ttotalSpecular += dirSpecular;\n\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\ttotalDiffuse += hemiDiffuse;\n\t\ttotalSpecular += hemiSpecular;\n\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\ttotalDiffuse += pointDiffuse;\n\t\ttotalSpecular += pointSpecular;\n\n\t#endif\n\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor) + totalSpecular;\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n\n[*]\n}'};PS(1277,1,{},erc);_.ic=function frc(){return 'attribute vec4 tangent;\n\nuniform vec2 uRepeatBase;\n\nuniform sampler2D tNormal;\n\n#ifdef VERTEX_TEXTURES\n\n\tuniform sampler2D tDisplacement;\n\tuniform float uDisplacementScale;\n\tuniform float uDisplacementBias;\n\n#endif\n\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvNormal = normalize( normalMatrix * normal );\n\n\t// tangent and binormal vectors\n\n\tvTangent = normalize( normalMatrix * tangent.xyz );\n\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\n\tvBinormal = normalize( vBinormal );\n\n\t// texture coordinates\n\n\tvUv = uv;\n\n\tvec2 uvBase = uv * uRepeatBase;\n\n\t// displacement mapping\n\n\t#ifdef VERTEX_TEXTURES\n\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\n\t\tvec3 displacedPosition = normal * df + position;\n\n\t\tvec4 mPosition = modelMatrix * vec4( displacedPosition, 1.0 );\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\n\n\t#else\n\n\t\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\n\tvNormal = normalMatrix * normalTex;\n\n\t[*]\n\n}\n'};PS(1341,703,nEc,nzc);_.Od=function ozc(){qEb(this,UJc,new KIb((cJb(),WIb)));qEb(this,rKc,new LIb(QIb,new Ohb(1)))};var pzc;PS(1342,1,{},uzc);_.Rd=function vzc(){return Dzc(),szc};_.Sd=function wzc(){return Ezc(),tzc};var szc,tzc;PS(1343,1,{},yzc);_.ic=function zzc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};PS(1344,1,{},Bzc);_.ic=function Czc(){return SKc};PS(1365,703,nEc,JAc);_.Od=function KAc(){qEb(this,UJc,new KIb((cJb(),WIb)));qEb(this,jLc,new LIb(QIb,new Ohb(0.001953125)));qEb(this,xLc,new LIb(QIb,new Ohb(0.35)))};var LAc;PS(1366,1,{},QAc);_.Rd=function RAc(){return ZAc(),OAc};_.Sd=function SAc(){return $Ac(),PAc};var OAc,PAc;PS(1367,1,{},UAc);_.ic=function VAc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};PS(1368,1,{},XAc);_.ic=function YAc(){return SKc};PS(1371,703,nEc,aBc);_.Od=function bBc(){qEb(this,UJc,new KIb((cJb(),WIb)))};var cBc;PS(1372,1,{},hBc);_.Rd=function iBc(){return qBc(),fBc};_.Sd=function jBc(){return rBc(),gBc};var fBc,gBc;PS(1373,1,{},lBc);_.ic=function mBc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};PS(1374,1,{},oBc);_.ic=function pBc(){return SKc};PS(1377,703,nEc,tBc);_.Od=function uBc(){qEb(this,lLc,new KIb((cJb(),WIb)));qEb(this,HKc,new LIb(YIb,new L0b(512,512)));qEb(this,uLc,new LIb(YIb,new L0b(1,1)));qEb(this,YGc,new LIb(QIb,new Ohb(0.05)))};var vBc;PS(1378,1,{},ABc);_.Rd=function BBc(){return JBc(),yBc};_.Sd=function CBc(){return KBc(),zBc};var yBc,zBc;PS(1379,1,{},EBc);_.ic=function FBc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};PS(1380,1,{},HBc);_.ic=function IBc(){return SKc};PS(1383,703,nEc,MBc);_.Od=function NBc(){qEb(this,UJc,new KIb((cJb(),WIb)));qEb(this,kLc,new LIb(QIb,new Ohb(0.001953125)));qEb(this,xLc,new LIb(QIb,new Ohb(0.35)))};var OBc;PS(1384,1,{},TBc);_.Rd=function UBc(){return aCc(),RBc};_.Sd=function VBc(){return bCc(),SBc};var RBc,SBc;PS(1385,1,{},XBc);_.ic=function YBc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};PS(1386,1,{},$Bc);_.ic=function _Bc(){return SKc};var MN=Chb(qJc,'TerrainDynamic$DemoScene',1187),IN=Chb(qJc,'TerrainDynamic$DemoScene$1',1188),JN=Chb(qJc,'TerrainDynamic$DemoScene$2',1189),KN=Chb(qJc,'TerrainDynamic$DemoScene$3',1190),LN=Chb(qJc,'TerrainDynamic$DemoScene$4',1191),TP=Chb(UKc,BLc,1377),lO=Chb(gJc,'TerrainShader',1274),vP=Chb(UKc,'BleachBypassShader',1341),LP=Chb(UKc,'HorizontalTiltShiftShader',1365),XP=Chb(UKc,'VerticalTiltShiftShader',1383),PN=Chb(qJc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1192),NN=Chb(qJc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1193),ON=Chb(qJc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1194),SP=Chb(UKc,CLc,1378),QP=Chb(UKc,DLc,1379),RP=Chb(UKc,ELc,1380),kO=Chb(gJc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1275),iO=Chb(gJc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1276),jO=Chb(gJc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1277),uP=Chb(UKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1342),sP=Chb(UKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1343),tP=Chb(UKc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1344),KP=Chb(UKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1366),IP=Chb(UKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1367),JP=Chb(UKc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1368),WP=Chb(UKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1384),UP=Chb(UKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1385),VP=Chb(UKc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1386),PP=Chb(UKc,'LuminosityShader',1371),OP=Chb(UKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1372),MP=Chb(UKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1373),NP=Chb(UKc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1374);MEc(Di)(41);