function wKb(){}
function AKb(){}
function DKb(){}
function Dwc(){}
function zwc(){}
function Gwc(){}
function Swc(){}
function Wwc(){}
function Zwc(){}
function jxc(){}
function nxc(){}
function qxc(){}
function axc(){axc=YMc;Rwc=new Zwc}
function vwc(){vwc=YMc;uwc=new zwc}
function Iwc(){Iwc=YMc;xwc=new Dwc}
function Jwc(){Jwc=YMc;ywc=new Gwc}
function Owc(){Owc=YMc;Nwc=new Swc}
function _wc(){_wc=YMc;Qwc=new Wwc}
function fxc(){fxc=YMc;exc=new jxc}
function sxc(){sxc=YMc;hxc=new nxc}
function txc(){txc=YMc;ixc=new qxc}
function sKb(){sKb=YMc;rKb=new wKb}
function FKb(){FKb=YMc;uKb=new AKb}
function GKb(){GKb=YMc;vKb=new DKb}
function xsc(a,b){this.b=a;this.c=b}
function WGb(a,b){HHb(a,b);VGb(a,false)}
function nKb(){ZIb.call(this,(sKb(),rKb))}
function swc(){ZIb.call(this,(vwc(),uwc))}
function Lwc(){ZIb.call(this,(Owc(),Nwc))}
function cxc(){ZIb.call(this,(fxc(),exc))}
function k0b(){OZb.call(this);this.b=false;this.c=1}
function tsc(){V9b.call(this);this.u=new r6b(0,1000,-1000);this.s=new q6b}
function i6b(a,b){var c;c=new A4b;y4b(c,b.q,n4b(c,b.Y));return a6b(a,c)}
var kWc='bgColor',mWc='fAspect',jWc='fGodRayIntensity',nWc='fStepSize',aWc='mFar',_Vc='mNear',pWc='tColors',qWc='tGodRays',oWc='tInput',lWc='vSunPositionScreenSpace',rWc='varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}';JU(749,731,vOc,nKb);_.Rd=function oKb(){NIb(this,_Vc,new nNb((GNb(),sNb),new kkb(1)));NIb(this,aWc,new nNb(sNb,new kkb(2000)));NIb(this,FUc,new nNb(sNb,new kkb(1)))};_.Sd=function pKb(a){var b,c;c=new wrb(Nu(GS,cNc,1,[bWc]));b=new wrb(Nu(GS,cNc,1,[cWc]));WIb(this,cJb(a,Nu(JS,cNc,173,[c,b])))};_.Td=function qKb(a){var b,c;c=new wrb(Nu(GS,cNc,1,[dWc,eWc]));b=new wrb(Nu(GS,cNc,1,[fWc,gWc,hWc]));XIb(this,cJb(a,Nu(JS,cNc,173,[c,b])))};var rKb;JU(750,1,{},wKb);_.Ud=function xKb(){return FKb(),uKb};_.Vd=function yKb(){return GKb(),vKb};var uKb,vKb;JU(751,1,{},AKb);_.tc=function BKb(){return 'uniform float mNear;\r\nuniform float mFar;\r\nuniform float opacity;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n[*]\r\n\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\r\n\t#else\r\n\r\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n\t#endif\r\n\r\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\r\n\tgl_FragColor = vec4( vec3( color ), opacity );\r\n\r\n}'};JU(752,1,{},DKb);_.tc=function EKb(){return iWc};JU(921,914,{278:1,281:1},k0b);_.Te=function l0b(){var a;return a=new k0b,wZb(this,a),a.b=this.b,a.c=this.c,a};_.Ue=function m0b(){return new nKb};_.Qe=function n0b(){return this.c};_.Re=function o0b(){return this.b};_.Ve=function p0b(a,b){var c;BZb(this,b);c=AZb(this).j;if(a.cZ==zH){lNb(Xu(c.b[_Vc],225),new kkb(Xu(a,235).e));lNb(Xu(c.b[aWc],225),new kkb(Xu(a,235).c))}lNb(Xu(c.b[FUc],225),new kkb(this.$))};_.b=false;_.c=0;JU(1228,1,IOc);_.Db=function rsc(){v9b(this.c,new tsc(this.b))};JU(1229,973,{335:1},tsc);_.ob=function usc(){var a,b,c,d;this.b=new JQb(70,aHb(this.H.n),1,3000);n6b(this.b.ab,200);this.c=new k0b;c=new H_b;B_b(c,new w3b(0));F_b(c,(p_b(),m_b));new Kzc('./static/models/obj/tree/tree.js',new xsc(this,c));a=new aXb(1,20,10);this.t=new P7b(a,c);k6b(this.t.fb,20);JPb(this.I,this.t);KHb(this.H.n,false);uHb(this.H.n,false);xHb(this.H.n,1297,1);this.k=new B8b;this.j=new wQb(this.H.n.$,this.H.n.Z,-10000,10000);n6b(this.j.ab,100);JPb(this.k,this.j);this.o=new JOb(this.H.n.$,this.H.n.Z);_Nb(this.o,(NEb(),HEb));ZNb(this.o,(CEb(),AEb));WNb(this.o,(YCb(),XCb));this.p=new JOb(this.H.n.$,this.H.n.Z);_Nb(this.p,HEb);ZNb(this.p,AEb);WNb(this.p,XCb);d=~~(this.H.n.$/4);b=~~(this.H.n.Z/4);this.q=new JOb(d,b);_Nb(this.q,HEb);ZNb(this.q,AEb);WNb(this.q,XCb);this.r=new JOb(d,b);_Nb(this.r,HEb);ZNb(this.r,AEb);WNb(this.r,XCb);this.f=new I2b(new Lwc);this.d=new I2b(new swc);lNb(Xu(fSb(AZb(this.d).j,jWc),225),new kkb(0.75));this.e=new I2b(new cxc);t3b(Xu(Xu(fSb(AZb(this.e).j,kWc),225).e,292),1297);t3b(Xu(Xu(fSb(AZb(this.e).j,tVc),225).e,292),16772608);this.n=new P7b(new RWb(this.H.n.$,this.H.n.Z),this.f);n6b(this.n.ab,-9900);JPb(this.k,this.n)};_.pb=function vsc(a){var b,c,d,e,f,g;f=a/4000;A5b(this.t.ab,200*klb(f));n6b(this.t.ab,200*tlb(f)-100);v5b(this.b.ab,(this.g-this.b.ab.d)*0.036);w5b(this.b.ab,(-this.i-this.b.ab.e)*0.036);fQb(this.b,this.I.ab);i6b(this.s.pf(this.u),this.b);A5b(this.s,(this.s.d+1)/2);B5b(this.s,(this.s.e+1)/2);z5b(Xu(Xu(fSb(AZb(this.f).j,lWc),225).e,296),this.s.d,this.s.e);z5b(Xu(Xu(fSb(AZb(this.e).j,lWc),225).e,296),this.s.d,this.s.e);WGb(this.H.n,this.o);g=this.H.n.$;b=this.H.n.Z;d=0.74*b;e=0.74*b;A5b(this.s,this.s.d*g);B5b(this.s,this.s.e*b);IHb(this.H.n,dv(this.s.d-e/2),dv(this.s.e-d/2),dv(e),dv(d));_Gb(this.H.n,true);lNb(Xu(fSb(AZb(this.e).j,mWc),225),new kkb(g/b));this.k.d=this.e;mHb(this.H.n,this.k,this.j,this.o,false);_Gb(this.H.n,false);this.I.d=null;mHb(this.H.n,this.I,this.b,this.o,false);this.I.d=this.c;mHb(this.H.n,this.I,this.b,this.p,true);c=qlb(6,-1);lNb(Xu(fSb(AZb(this.f).j,nWc),225),new kkb(c));lNb(Xu(fSb(AZb(this.f).j,oWc),225),this.p);this.k.d=this.f;mHb(this.H.n,this.k,this.j,this.r,false);c=qlb(6,-2);lNb(Xu(fSb(AZb(this.f).j,nWc),225),new kkb(c));lNb(Xu(fSb(AZb(this.f).j,oWc),225),this.r);mHb(this.H.n,this.k,this.j,this.q,false);c=qlb(6,-3);lNb(Xu(fSb(AZb(this.f).j,nWc),225),new kkb(c));lNb(Xu(fSb(AZb(this.f).j,oWc),225),this.q);mHb(this.H.n,this.k,this.j,this.r,false);lNb(Xu(fSb(AZb(this.d).j,pWc),225),this.o);lNb(Xu(fSb(AZb(this.d).j,qWc),225),this.r);this.k.d=this.d;mHb(this.H.n,this.k,this.j,null,false);this.k.d=null};_.g=0;_.i=0;JU(1230,1,{},xsc);_.Ff=function ysc(a,b){var c;c=new P7b(b,this.c);l6b(c.ab,0,-150,-150);k6b(c.fb,400);c.X=false;i4b(c.W,c.ab,c.bb,c.fb);c.Z=true;JPb(this.b.I,c)};JU(1314,731,vOc,swc);_.Rd=function twc(){NIb(this,pWc,new mNb((GNb(),yNb)));NIb(this,qWc,new mNb(yNb));NIb(this,jWc,new nNb(sNb,new kkb(0.69)));NIb(this,lWc,new nNb(ANb,new D5b(0.5,0.5)))};var uwc;JU(1315,1,{},zwc);_.Ud=function Awc(){return Iwc(),xwc};_.Vd=function Bwc(){return Jwc(),ywc};var xwc,ywc;JU(1316,1,{},Dwc);_.tc=function Ewc(){return 'varying vec2 vUv;\n\nuniform sampler2D tColors;\nuniform sampler2D tGodRays;\n\nuniform vec2 vSunPositionScreenSpace;\nuniform float fGodRayIntensity;\n\nvoid main() {\n\n\t// Since THREE.MeshDepthMaterial renders foreground objects white and background\n\t// objects black, the god-rays will be white streaks. Therefore value is inverted\n\t// before being combined with tColors\n\n\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );\n\tgl_FragColor.a = 1.0;\n\n}\n'};JU(1317,1,{},Gwc);_.tc=function Hwc(){return rWc};JU(1320,731,vOc,Lwc);_.Rd=function Mwc(){NIb(this,oWc,new mNb((GNb(),yNb)));NIb(this,nWc,new nNb(sNb,new kkb(1)));NIb(this,lWc,new nNb(ANb,new D5b(0.5,0.5)))};var Nwc;JU(1321,1,{},Swc);_.Ud=function Twc(){return _wc(),Qwc};_.Vd=function Uwc(){return axc(),Rwc};var Qwc,Rwc;JU(1322,1,{},Wwc);_.tc=function Xwc(){return "#define TAPS_PER_PASS 6.0\n\nvarying vec2 vUv;\n\nuniform sampler2D tInput;\n\nuniform vec2 vSunPositionScreenSpace;\nuniform float fStepSize; // filter step size\n\nvoid main() {\n\n\t// delta from current pixel to \"sun\" position\n\n\tvec2 delta = vSunPositionScreenSpace - vUv;\n\tfloat dist = length( delta );\n\n\t// Step vector (uv space)\n\n\tvec2 stepv = fStepSize * delta / dist;\n\n\t// Number of iterations between pixel and sun\n\n\tfloat iters = dist/fStepSize;\n\n\tvec2 uv = vUv.xy;\n\tfloat col = 0.0;\n\n\t// This breaks ANGLE in Chrome 22\n\t//\t- see http://code.google.com/p/chromium/issues/detail?id=153105\n\n/*\n\t// Unrolling didnt do much on my hardware (ATI Mobility Radeon 3450),\n\t// so i've just left the loop\n\n\tfor ( float i = 0.0; i < TAPS_PER_PASS; i += 1.0 ) {\n\n\t\t\t\t\t// Accumulate samples, making sure we dont walk past the light source.\n\n\t\t\t\t\t// The check for uv.y < 1 would not be necessary with \"border\" UV wrap\n\t\t\t\t\t// mode, with a black border colour. I don't think this is currently\n\t\t\t\t\t// exposed by three.js. As a result there might be artifacts when the\n\t\t\t\t\t// sun is to the left, right or bottom of screen as these cases are\n\t\t\t\t\t// not specifically handled.\n\n\t\tcol += ( i <= iters && uv.y < 1.0 ? texture2D( tInput, uv ).r : 0.0 );\n\t\tuv += stepv;\n\n\t}\n*/\n\n\t// Unrolling loop manually makes it work in ANGLE\n\n\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r;\n\tuv += stepv;\n\n\t// Should technically be dividing by 'iters', but 'TAPS_PER_PASS' smooths out\n\t// objectionable artifacts, in particular near the sun position. The side\n\t// effect is that the result is darker than it should be around the sun, as\n\t// TAPS_PER_PASS is greater than the number of samples actually accumulated.\n\t// When the result is inverted (in the shader 'godrays_combine', this produces\n\t// a slight bright spot at the position of the sun, even when it is occluded.\n\n\tgl_FragColor = vec4( col/TAPS_PER_PASS );\n\tgl_FragColor.a = 1.0;\n\n}\n"};JU(1323,1,{},Zwc);_.tc=function $wc(){return rWc};JU(1326,731,vOc,cxc);_.Rd=function dxc(){NIb(this,lWc,new nNb((GNb(),ANb),new D5b(0.5,0.5)));NIb(this,mWc,new nNb(sNb,new kkb(1)));NIb(this,tVc,new nNb(rNb,new w3b(16772608)));NIb(this,kWc,new nNb(rNb,new w3b(0)))};var exc;JU(1327,1,{},jxc);_.Ud=function kxc(){return sxc(),hxc};_.Vd=function lxc(){return txc(),ixc};var hxc,ixc;JU(1328,1,{},nxc);_.tc=function oxc(){return 'varying vec2 vUv;\n\nuniform vec2 vSunPositionScreenSpace;\nuniform float fAspect;\n\nuniform vec3 sunColor;\nuniform vec3 bgColor;\n\nvoid main() {\n\n\tvec2 diff = vUv - vSunPositionScreenSpace;\n\n\t// Correct for aspect ratio\n\n\tdiff.x *= fAspect;\n\n\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );\n\tprop = 0.35 * pow( 1.0 - prop, 3.0 );\n\n\tgl_FragColor.xyz = mix( sunColor, bgColor, 1.0 - prop );\n\tgl_FragColor.w = 1.0;\n\n}\n'};JU(1329,1,{},qxc);_.tc=function rxc(){return rWc};var LO=$jb(LTc,'PostprocessingGodrays$DemoScene',1229),KO=$jb(LTc,'PostprocessingGodrays$DemoScene$1',1230),vJ=$jb(sWc,'MeshDepthMaterial',921),nP=$jb(BTc,'GodRaysGenerateShader',1320),jP=$jb(BTc,'GodRaysCombineShader',1314),rP=$jb(BTc,'GodraysFakeSunShader',1326),HG=$jb(RUc,'DepthShader',749),mP=$jb(BTc,'GodRaysGenerateShader_Resources_default_InlineClientBundleGenerator',1321),kP=$jb(BTc,'GodRaysGenerateShader_Resources_default_InlineClientBundleGenerator$1',1322),lP=$jb(BTc,'GodRaysGenerateShader_Resources_default_InlineClientBundleGenerator$2',1323),iP=$jb(BTc,'GodRaysCombineShader_Resources_default_InlineClientBundleGenerator',1315),gP=$jb(BTc,'GodRaysCombineShader_Resources_default_InlineClientBundleGenerator$1',1316),hP=$jb(BTc,'GodRaysCombineShader_Resources_default_InlineClientBundleGenerator$2',1317),qP=$jb(BTc,'GodraysFakeSunShader_Resources_default_InlineClientBundleGenerator',1327),oP=$jb(BTc,'GodraysFakeSunShader_Resources_default_InlineClientBundleGenerator$1',1328),pP=$jb(BTc,'GodraysFakeSunShader_Resources_default_InlineClientBundleGenerator$2',1329),GG=$jb(RUc,'DepthShader_Resources_default_InlineClientBundleGenerator',750),EG=$jb(RUc,'DepthShader_Resources_default_InlineClientBundleGenerator$1',751),FG=$jb(RUc,'DepthShader_Resources_default_InlineClientBundleGenerator$2',752);WOc(Ii)(40);