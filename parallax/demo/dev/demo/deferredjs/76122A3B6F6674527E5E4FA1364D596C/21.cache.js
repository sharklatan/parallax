function PKb(){}
function TKb(){}
function WKb(){}
function LKb(){LKb=YMc;KKb=new PKb}
function YKb(){YKb=YMc;NKb=new TKb}
function ZKb(){ZKb=YMc;OKb=new WKb}
function IKb(){ZIb.call(this,(LKb(),KKb))}
function Glc(){V9b.call(this);this.d=0;this.e=0}
JU(755,731,vOc,IKb);_.Rd=function JKb(){NIb(this,'mRefractionRatio',new nNb((GNb(),sNb),new kkb(1.02)));NIb(this,'mFresnelBias',new nNb(sNb,new kkb(0.1)));NIb(this,'mFresnelPower',new nNb(sNb,new kkb(2)));NIb(this,'mFresnelScale',new nNb(sNb,new kkb(1)));NIb(this,QUc,new mNb(yNb))};var KKb;JU(756,1,{},PKb);_.Ud=function QKb(){return YKb(),NKb};_.Vd=function RKb(){return ZKb(),OKb};var NKb,OKb;JU(757,1,{},TKb);_.tc=function UKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};JU(758,1,{},WKb);_.tc=function XKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};JU(1138,1,IOc);_.Db=function Elc(){v9b(this.c,new Glc(this.b))};JU(1139,973,{326:1},Glc);_.ob=function Hlc(){var a,b,c,d,e,f,g,i,j;this.b=new JQb(60,aHb(this.H.n),1,100000);n6b(this.b.ab,3200);this.c=new JQb(60,aHb(this.H.n),1,100000);this.f=new B8b;a=new aXb(100,32,16);j=new vOb('./static/textures/cube/park2/*.jpg');WNb(j,(YCb(),WCb));g=new IKb;lNb(Xu(fSb(g.j,QUc),225),j);c=new I2b(g);this.g=new $qb;for(b=0;b<500;b++){e=new P7b(a,c);A5b(e.ab,rlb()*10000-5000);B5b(e.ab,rlb()*10000-5000);n6b(e.ab,rlb()*10000-5000);k6b(e.fb,rlb()*3+1);JPb(this.I,e);Qqb(this.g,e)}this.I.X=false;i=new zJb;lNb(Xu(fSb(i.j,QUc),225),j);f=new I2b(i);LZb(f,(x_b(),u_b));d=new P7b(new lWb(100000,100000,100000),f);JPb(this.f,d);uHb(this.H.n,false)};_.pb=function Ilc(a){var b,c,d,e;e=1.0E-4*a;v5b(this.b.ab,(this.d-this.b.ab.d)*0.05);w5b(this.b.ab,(-this.e-this.b.ab.e)*0.05);fQb(this.b,this.I.ab);D3b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Xu(Tqb(this.g,b),303);A5b(d.ab,5000*Math.cos(e+b));B5b(d.ab,5000*Math.sin(e+b*1.1))}VGb(this.H.n,true);mHb(this.H.n,this.f,this.c,null,false);mHb(this.H.n,this.I,this.b,null,false)};_.d=0;_.e=0;var iN=$jb(ITc,'MaterialsCubemapFresnel$DemoScene',1139),LG=$jb(RUc,'FresnelShader',755),KG=$jb(RUc,'FresnelShader_Resources_default_InlineClientBundleGenerator',756),IG=$jb(RUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',757),JG=$jb(RUc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',758);WOc(Ii)(21);