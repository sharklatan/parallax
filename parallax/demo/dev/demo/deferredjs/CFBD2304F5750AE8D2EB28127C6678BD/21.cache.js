function rKb(){}
function vKb(){}
function yKb(){}
function nKb(){nKb=gKc;mKb=new rKb}
function AKb(){AKb=gKc;pKb=new vKb}
function BKb(){BKb=gKc;qKb=new yKb}
function kKb(){BIb.call(this,(nKb(),mKb))}
function Zkc(){I9b.call(this);this.c=0;this.d=0}
bU(756,732,ELc,kKb);_.Ld=function lKb(){pIb(this,'mRefractionRatio',new RMb((iNb(),WMb),new Pjb(1.02)));pIb(this,'mFresnelBias',new RMb(WMb,new Pjb(0.1)));pIb(this,'mFresnelPower',new RMb(WMb,new Pjb(2)));pIb(this,'mFresnelScale',new RMb(WMb,new Pjb(1)));pIb(this,QRc,new QMb(aNb))};var mKb;bU(757,1,{},rKb);_.Od=function sKb(){return AKb(),pKb};_.Pd=function tKb(){return BKb(),qKb};var pKb,qKb;bU(758,1,{},vKb);_.nc=function wKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};bU(759,1,{},yKb);_.nc=function zKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};bU(1141,1,RLc);_.zb=function Xkc(){i9b(this.b,new Zkc(this.a))};bU(1142,974,{327:1},Zkc);_.nb=function $kc(){var a,b,c,d,e,f,g,i,j;this.a=new oQb(60,EGb(this.G.k),1,100000);$5b(this.a._,3200);this.b=new oQb(60,EGb(this.G.k),1,100000);this.e=new n8b;a=new NWb(100,32,16);j=new ZNb('./static/textures/cube/park2/*.jpg');yNb(j,(ACb(),yCb));g=new kKb;PMb(su(QRb(g.i,QRc),225),j);c=new t2b(g);this.f=new Cqb;for(b=0;b<500;b++){e=new A7b(a,c);l5b(e._,Wkb()*10000-5000);m5b(e._,Wkb()*10000-5000);$5b(e._,Wkb()*10000-5000);X5b(e.eb,Wkb()*3+1);lPb(this.H,e);sqb(this.f,e)}this.H.W=false;i=new bJb;PMb(su(QRb(i.i,QRc),225),j);f=new t2b(i);wZb(f,(i_b(),f_b));d=new A7b(new YVb(100000,100000,100000),f);lPb(this.e,d);YGb(this.G.k,false)};_.ob=function _kc(a){var b,c,d,e;e=1.0E-4*a;g5b(this.a._,(this.c-this.a._.c)*0.05);h5b(this.a._,(-this.d-this.a._.d)*0.05);KPb(this.a,this.H._);o3b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=su(vqb(this.f,b),304);l5b(d._,5000*Math.cos(e+b));m5b(d._,5000*Math.sin(e+b*1.1))}xGb(this.G.k,true);QGb(this.G.k,this.e,this.b,null,false);QGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var CM=Djb(JQc,'MaterialsCubemapFresnel$DemoScene',1142),cG=Djb(RRc,'FresnelShader',756),bG=Djb(RRc,'FresnelShader_Resources_default_InlineClientBundleGenerator',757),_F=Djb(RRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',758),aG=Djb(RRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',759);dMc(xi)(21);