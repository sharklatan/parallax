function Auc(){}
function Euc(){}
function Huc(){}
function HKc(){}
function oKc(){}
function sKc(){}
function vKc(){}
function LKc(){}
function OKc(){}
function $Kc(){}
function fyc(){}
function jyc(){}
function myc(){}
function UIc(){}
function YIc(){}
function _Ic(){}
function cLc(){}
function fLc(){}
function rLc(){}
function vLc(){}
function yLc(){}
function w$b(a,b){a.b=b}
function u9b(a,b){a.k=b}
function yIc(a,b){Yqb(a.b,b)}
function nuc(a){this.a=a}
function quc(a){this.a=a}
function tuc(a){this.a=a}
function wuc(){wuc=sMc;vuc=new Auc}
function Juc(){Juc=sMc;yuc=new Euc}
function Kuc(){Kuc=sMc;zuc=new Huc}
function DKc(){DKc=sMc;CKc=new HKc}
function kKc(){kKc=sMc;jKc=new oKc}
function xKc(){xKc=sMc;mKc=new sKc}
function yKc(){yKc=sMc;nKc=new vKc}
function QKc(){QKc=sMc;FKc=new LKc}
function RKc(){RKc=sMc;GKc=new OKc}
function WKc(){WKc=sMc;VKc=new $Kc}
function hLc(){hLc=sMc;YKc=new cLc}
function iLc(){iLc=sMc;ZKc=new fLc}
function nLc(){nLc=sMc;mLc=new rLc}
function ALc(){ALc=sMc;pLc=new vLc}
function BLc(){BLc=sMc;qLc=new yLc}
function byc(){byc=sMc;ayc=new fyc}
function oyc(){oyc=sMc;dyc=new jyc}
function pyc(){pyc=sMc;eyc=new myc}
function QIc(){QIc=sMc;PIc=new UIc}
function bJc(){bJc=sMc;SIc=new YIc}
function cJc(){cJc=sMc;TIc=new _Ic}
function kuc(a,b){this.a=a;this.b=b}
function kLc(){zJb.call(this,(nLc(),mLc))}
function Yxc(){zJb.call(this,(byc(),ayc))}
function NIc(){zJb.call(this,(QIc(),PIc))}
function hKc(){zJb.call(this,(kKc(),jKc))}
function AKc(){zJb.call(this,(DKc(),CKc))}
function TKc(){zJb.call(this,(WKc(),VKc))}
function duc(a){a.w+=1;a.w==3&&uQb(a.v,true)}
function euc(){vbc.call(this);this.a=0;this.j=0;this.i=1;this.u=1000;this.t=1000;this.C=true}
function cuc(a,b,c,d){var e,f,g;g=new e4b(b);NNb(yv(SSb(Y$b(g).i,MTc),226),c);f=new _9b;e=new kZb(new GXb(a.u,a.t),g);$7b(e._,-500);jQb(f,e);QHb(a.G.k,f,a.c,d,true)}
function buc(a,b,c,d,e,f){var g,i;g=new Y1b;R1b(g,new $4b(16755285));g.j=true;W1b(g,(Q_b(),N_b));i=new w9b(b,g);i.d=c;u9b(i,Gv(600*zlb()));Y7b(i._,d,e,f);m5b(i.cb,1.5707963267948966);i.S=true;i.U=true;jQb(a.H,i);Yqb(a.n,i)}
var aVc='enableDiffuse1',bVc='enableDiffuse2',VUc='h',XUc='heightMap',gVc='heightmap',fVc='offset',hVc='r',_Uc='tDetail',ZUc='tDiffuse1',$Uc='tDiffuse2',dVc='uRepeatOverlay',WUc='v';DV(1260,1,cOc);_.Mb=function _tc(){Xac(this.b,new euc(this.a))};DV(1261,990,{78:1,186:1,343:1},euc);_.Ud=function fuc(a){duc(this)};_.Gd=function guc(a){this.u=a.a.hb;this.t=a.a.gb;NNb(yv(SSb(Y$b(this.f.b).i,VUc),226),new skb(6/this.u));NNb(yv(SSb(Y$b(this.D.b).i,WUc),226),new skb(6/this.t))};_.nb=function huc(){var a,b,c,d,e,f,g,i,j,k,n,o,p,q,r,s,t,u;mu((nyb(),myb),(xyb(),wyb),this);this.b=new nRb(40,sGb(this.G.k),2,4000);this.u=this.G.k.hb;this.t=this.G.k.gb;this.c=new $Qb(this.u,this.t,-10000,10000);Y7b(this.b._,-1200,800,1200);$7b(this.c._,100);this.s=new _9b;jQb(this.s,this.c);this.d=new sxb(this.b,this.G.c);X7b(this.d.v,0);this.d.s=1;this.d.A=1.2;pxb(this.d,0.8);this.d.g=true;this.d.e=true;this.d.f=true;nxb(this.d,0.15);Z9b(this.H,new P9b(328965,2000,4000));jQb(this.H,new CZb(1118481));this.e=new e$b(16777215,1.15);Y7b(this.e._,500,2000,0);jQb(this.H,this.e);this.q=new z$b(16729088,1.5,0);X7b(this.q._,0);jQb(this.H,this.q);this.g=new jPb(256,256);BOb(this.g,(YEb(),TEb));zOb(this.g,(NEb(),LEb));wOb(this.g,(hDb(),fDb));xOb(this.g,false);this.o=new jPb(256,256);BOb(this.o,TEb);zOb(this.o,LEb);wOb(this.o,fDb);xOb(this.o,false);n=new TKc;u=n.i;NNb(yv(u.a[CQc],226),new skb(0.05));i7b(yv(yv(u.a[qUc],226).d,302),256,256);NNb(yv(u.a[XUc],226),this.g);s=new jPb(2048,2048);BOb(s,TEb);zOb(s,LEb);wOb(s,fDb);s.r=false;IOb(s,(oGb(),nGb));JOb(s,nGb);c=new POb('./static/textures/terrain/grasslight-big.jpg',new kuc(this,s));IOb(c,nGb);JOb(c,nGb);d=new POb('./static/textures/terrain/backgrounddetailed6.jpg',this);IOb(d,nGb);JOb(d,nGb);b=new POb('./static/textures/terrain/grasslight-big-nm.jpg',this);IOb(b,nGb);JOb(b,nGb);t=new Yxc;this.B=t.i;NNb(yv(SSb(this.B,kUc),226),this.o);NNb(yv(SSb(this.B,lUc),226),new skb(3.5));NNb(yv(SSb(this.B,YUc),226),this.g);NNb(yv(SSb(this.B,ZUc),226),c);NNb(yv(SSb(this.B,$Uc),226),d);NNb(yv(SSb(this.B,mUc),226),s);NNb(yv(SSb(this.B,_Uc),226),b);NNb(yv(SSb(this.B,aVc),226),(tjb(),tjb(),sjb));NNb(yv(SSb(this.B,bVc),226),sjb);NNb(yv(SSb(this.B,KTc),226),sjb);W4b(yv(yv(SSb(this.B,QTc),226).d,298),16777215);W4b(yv(yv(SSb(this.B,RTc),226).d,298),16777215);W4b(yv(yv(SSb(this.B,PTc),226).d,298),1118481);NNb(yv(SSb(this.B,pUc),226),new skb(30));NNb(yv(SSb(this.B,cVc),226),new skb(375));i7b(yv(yv(SSb(this.B,dVc),226).d,302),6,6);this.A=new Rtb;mpb(this.A,tUc,new PNb((gOb(),UNb),new skb(1)));mpb(this.A,eVc,new PNb(aOb,new m7b(1.5,1.5)));mpb(this.A,fVc,new PNb(aOb,new m7b(0,0)));this.k=new Rtb;i=new d4b((wuc(),vuc));uJb(Y$b(i),this.A);i.c=false;i.b=true;mpb(this.k,gVc,i);j=new e4b(n);uJb(Y$b(j),u);j.c=false;j.b=true;mpb(this.k,GTc,j);k=new e4b(t);uJb(Y$b(k),this.B);k.c=true;k.b=true;mpb(this.k,'terrain',k);o=new GXb(this.u,this.t);p=new d1b;Z0b(p,new $4b(0));this.r=new kZb(o,p);$7b(this.r._,-500);jQb(this.s,this.r);g=new HXb(6000,6000,64,64);WRb(g);this.v=new kZb(g,k);Y7b(this.v._,0,-125,0);l5b(this.v.cb,-1.5707963267948966);uQb(this.v,false);jQb(this.H,this.v);$Hb(this.G.k,this.H.a.c,1);this.G.k.X=true;this.G.k.Y=true;tGb(this.G.k,false);q=new HIc(this.H,this.b);f=new sIc(0.6);e=new KIc(new NIc);NNb(yv(SSb(Y$b(e.b).i,WTc),226),new skb(0.65));this.f=new KIc(new hKc);this.D=new KIc(new kLc);NNb(yv(SSb(Y$b(this.f.b).i,VUc),226),new skb(6/this.u));NNb(yv(SSb(Y$b(this.D.b).i,WUc),226),new skb(6/this.t));NNb(yv(SSb(Y$b(this.f.b).i,hVc),226),new skb(0.5));NNb(yv(SSb(Y$b(this.D.b).i,hVc),226),new skb(0.5));this.D.a=true;r=new jPb(this.u,this.t);BOb(s,SEb);zOb(s,LEb);wOb(s,fDb);s.f=false;s.r=false;a=new AIc(this.G.k,r);Yqb(a.b,q);Yqb(a.b,f);Yqb(a.b,e);yIc(a,this.f);yIc(a,this.D);this.n=new grb;new ezc('./static/models/animated/parrot.js',new nuc(this));new ezc(UUc,new quc(this));new ezc('./static/models/animated/stork.js',new tuc(this));this.p=yi()};_.ob=function iuc(a){var b,c,d,e,f;b=(yi()-this.p)*0.001;if(this.v.gb){qxb(this.d);this.j=v5b(this.j+0.5*b*this.i,0.4,0.825);f=(this.j-0.4)/0.42499999999999993;e=0.95+f*-0.7;V4b(this.H.a.c,0.1,e,this.j);$Hb(this.G.k,this.H.a.c,1);MZb(this.e,0.1+f*1.0499999999999998);w$b(this.q,0.9+f*0.6);NNb(yv(SSb(this.B,lUc),226),new skb(0.6+f*2.9));if(this.C){this.a=v5b(this.a+-7.5E-4,0,0.05);NNb(yv(hpb(this.A,tUc),226),new skb(yv(yv(hpb(this.A,tUc),226).d,150).a+b*this.a));e7b(yv(yv(hpb(this.A,fVc),226).d,302),b*0.05);j7b(yv(yv(SSb(this.B,iVc),226).d,302),4*yv(yv(hpb(this.A,fVc),226).d,302).c);aUb(this.r,yv(hpb(this.k,gVc),287));QHb(this.G.k,this.s,this.c,this.g,true);aUb(this.r,yv(hpb(this.k,GTc),287));QHb(this.G.k,this.s,this.c,this.o,true);this.C=false}for(c=0;c<this.n.b;c++){d=yv(_qb(this.n,c),310);v9b(d,Gv(1000*b));e7b(d._,d.d*b);d._.c>2000&&j7b(d._,-1500-zlb()*500)}QHb(this.G.k,this.H,this.b,null,false)}this.p=yi()};_.a=0;_.i=0;_.j=0;_.p=0;_.t=0;_.u=0;_.w=0;_.C=false;DV(1262,1,{},kuc);_.Ud=function luc(a){duc(this.a);cuc(this.a,new AKc,a,this.b)};DV(1263,1,{},nuc);_.Cf=function ouc(a,b){_yc((yv(a,345),yv(b,243)));buc(this.a,yv(b,243),500,-3500,500,700);buc(this.a,yv(b,243),500,-3000-zlb()*500,500,-200);buc(this.a,yv(b,243),500,-3000-zlb()*500,500,200);buc(this.a,yv(b,243),500,-3000-zlb()*500,500,1000)};DV(1264,1,{},quc);_.Cf=function ruc(a,b){_yc((yv(a,345),yv(b,243)));buc(this.a,yv(b,243),1000,-3000-zlb()*500,350,40)};DV(1265,1,{},tuc);_.Cf=function uuc(a,b){_yc((yv(a,345),yv(b,243)));buc(this.a,yv(b,243),1000,-3000-zlb()*500,350,340)};var vuc;DV(1266,1,{},Auc);_.Od=function Buc(){return Juc(),yuc};_.Pd=function Cuc(){return Kuc(),zuc};var yuc,zuc;DV(1267,1,{},Euc);_.nc=function Fuc(){return '//\n// Description : Array and textureless GLSL 3D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110409 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//\n\nuniform float time;\nvarying vec2 vUv;\n\nvec4 permute( vec4 x ) {\n\n\treturn mod( ( ( x * 34.0 ) + 1.0 ) * x, 289.0 );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nfloat snoise( vec3 v ) {\n\n\tconst vec2 C = vec2( 1.0 / 6.0, 1.0 / 3.0 );\n\tconst vec4 D = vec4( 0.0, 0.5, 1.0, 2.0 );\n\n\t// First corner\n\n\tvec3 i  = floor( v + dot( v, C.yyy ) );\n\tvec3 x0 = v - i + dot( i, C.xxx );\n\n\t// Other corners\n\n\tvec3 g = step( x0.yzx, x0.xyz );\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\tvec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\tvec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\tvec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t// Permutations\n\n\ti = mod( i, 289.0 );\n\tvec4 p = permute( permute( permute(\n \t\t   i.z + vec4( 0.0, i1.z, i2.z, 1.0 ) )\n\t\t   + i.y + vec4( 0.0, i1.y, i2.y, 1.0 ) )\n\t\t   + i.x + vec4( 0.0, i1.x, i2.x, 1.0 ) );\n\n\t// Gradients\n\t// ( N*N points uniformly over a square, mapped onto an octahedron.)\n\n\tfloat n_ = 1.0 / 7.0; // N=7\n\n\tvec3 ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor( p * ns.z *ns.z );  //  mod(p,N*N)\n\n\tvec4 x_ = floor( j * ns.z );\n\tvec4 y_ = floor( j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs( x ) - abs( y );\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\n\tvec4 s0 = floor( b0 ) * 2.0 + 1.0;\n\tvec4 s1 = floor( b1 ) * 2.0 + 1.0;\n\tvec4 sh = -step( h, vec4( 0.0 ) );\n\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\tvec3 p0 = vec3( a0.xy, h.x );\n\tvec3 p1 = vec3( a0.zw, h.y );\n\tvec3 p2 = vec3( a1.xy, h.z );\n\tvec3 p3 = vec3( a1.zw, h.w );\n\n\t// Normalise gradients\n\n\tvec4 norm = taylorInvSqrt( vec4( dot( p0, p0 ), dot( p1, p1 ), dot( p2, p2 ), dot( p3, p3 ) ) );\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\n\tvec4 m = max( 0.6 - vec4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot( p0, x0 ), dot( p1, x1 ),\n\t\t  dot( p2, x2 ), dot( p3, x3 ) ) );\n\n}\n\nfloat surface3( vec3 coord ) {\n\n\tfloat n = 0.0;\n\n\tn += 1.0 * abs( snoise( coord ) );\n\tn += 0.5 * abs( snoise( coord * 2.0 ) );\n\tn += 0.25 * abs( snoise( coord * 4.0 ) );\n\tn += 0.125 * abs( snoise( coord * 8.0 ) );\n\n\treturn n;\n\n}\n\nvoid main( void ) {\n\n\tvec3 coord = vec3( vUv, -time );\n\tfloat n = surface3( coord );\n\n\tgl_FragColor = vec4( vec3( n, n, n ), 1.0 );\n\n}\n'};DV(1268,1,{},Huc);_.nc=function Iuc(){return 'varying vec2 vUv;\nuniform vec2 scale;\nuniform vec2 offset;\n\nvoid main( void ) {\n\n\tvUv = uv * scale + offset;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};DV(1329,742,QNc,Yxc);_.Ld=function Zxc(){uJb(this,kOb());uJb(this,lOb());uJb(this,mOb());nJb(this,aVc,new PNb((gOb(),XNb),(tjb(),tjb(),rjb)));nJb(this,bVc,new PNb(XNb,rjb));nJb(this,KTc,new PNb(XNb,rjb));nJb(this,jVc,new PNb(XNb,rjb));nJb(this,ZUc,new ONb($Nb));nJb(this,$Uc,new ONb($Nb));nJb(this,_Uc,new ONb($Nb));nJb(this,kUc,new ONb($Nb));nJb(this,mUc,new ONb($Nb));nJb(this,YUc,new ONb($Nb));nJb(this,lUc,new PNb(UNb,new skb(1)));nJb(this,kVc,new PNb(UNb,new skb(0)));nJb(this,cVc,new PNb(UNb,new skb(1)));nJb(this,QTc,new PNb(TNb,new $4b(15658734)));nJb(this,RTc,new PNb(TNb,new $4b(1118481)));nJb(this,PTc,new PNb(TNb,new $4b(328965)));nJb(this,pUc,new PNb(UNb,new skb(30)));nJb(this,WTc,new PNb(UNb,new skb(1)));nJb(this,'uRepeatBase',new PNb(aOb,new m7b(1,1)));nJb(this,dVc,new PNb(aOb,new m7b(1,1)));nJb(this,iVc,new PNb(aOb,new m7b(0,0)))};_.Md=function $xc(a){var b,c;c=new Frb(ov(zT,xMc,1,[XTc,YTc]));b=new Frb(ov(zT,xMc,1,[$Tc,_Tc,aUc]));wJb(this,EJb(a,ov(CT,xMc,173,[c,b])))};_.Nd=function _xc(a){var b,c;c=new Frb(ov(zT,xMc,1,[bUc]));b=new Frb(ov(zT,xMc,1,[cUc]));xJb(this,EJb(a,ov(CT,xMc,173,[c,b])))};var ayc;DV(1330,1,{},fyc);_.Od=function gyc(){return oyc(),dyc};_.Pd=function hyc(){return pyc(),eyc};var dyc,eyc;DV(1331,1,{},jyc);_.nc=function kyc(){return 'uniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\nuniform bool enableDiffuse1;\r\nuniform bool enableDiffuse2;\r\nuniform bool enableSpecular;\r\n\r\nuniform sampler2D tDiffuse1;\r\nuniform sampler2D tDiffuse2;\r\nuniform sampler2D tDetail;\r\nuniform sampler2D tNormal;\r\nuniform sampler2D tSpecular;\r\nuniform sampler2D tDisplacement;\r\n\r\nuniform float uNormalScale;\r\n\r\nuniform vec2 uRepeatOverlay;\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform vec2 uOffset;\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec3 specularTex = vec3( 1.0 );\r\n\r\n\tvec2 uvOverlay = uRepeatOverlay * vUv + uOffset;\r\n\tvec2 uvBase = uRepeatBase * vUv;\r\n\r\n\tvec3 normalTex = texture2D( tDetail, uvOverlay ).xyz * 2.0 - 1.0;\r\n\tnormalTex.xy *= uNormalScale;\r\n\tnormalTex = normalize( normalTex );\r\n\r\n\tif( enableDiffuse1 && enableDiffuse2 ) {\r\n\r\n\t\tvec4 colDiffuse1 = texture2D( tDiffuse1, uvOverlay );\r\n\t\tvec4 colDiffuse2 = texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t\t#ifdef GAMMA_INPUT\r\n\r\n\t\t\tcolDiffuse1.xyz *= colDiffuse1.xyz;\r\n\t\t\tcolDiffuse2.xyz *= colDiffuse2.xyz;\r\n\r\n\t\t#endif\r\n\r\n\t\tgl_FragColor = gl_FragColor * mix ( colDiffuse1, colDiffuse2, 1.0 - texture2D( tDisplacement, uvBase ) );\r\n\r\n\t } else if( enableDiffuse1 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse1, uvOverlay );\r\n\r\n\t} else if( enableDiffuse2 ) {\r\n\r\n\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse2, uvOverlay );\r\n\r\n\t}\r\n\r\n\tif( enableSpecular )\r\n\t\tspecularTex = texture2D( tSpecular, uvOverlay ).xyz;\r\n\r\n\tmat3 tsb = mat3( vTangent, vBinormal, vNormal );\r\n\tvec3 finalNormal = tsb * normalTex;\r\n\r\n\tvec3 normal = normalize( finalNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\t\t\t\t// point lights\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointDiffuse = vec3( 0.0 );\r\n\t\tvec3 pointSpecular = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat pointDistance = lDistance;\r\n\r\n\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeight = max( dot( normal, lVector ), 0.0 );\r\n\r\n\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\r\n\t\t\tpointSpecular += pointDistance * pointLightColor[ i ] * specular * pointSpecularWeight * pointDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirDiffuse = vec3( 0.0 );\r\n\t\tvec3 dirSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\r\n\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\r\n\r\n\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\r\n\t\t\tdirSpecular += directionalLightColor[ i ] * specular * dirSpecularWeight * dirDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiDiffuse  = vec3( 0.0 );\r\n\t\tvec3 hemiSpecular = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\t\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiDiffuse += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\r\n\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\t\themiSpecularWeight += specularTex.r * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\r\n\r\n\t\t\themiSpecular += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * hemiDiffuseWeight;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalDiffuse = vec3( 0.0 );\r\n\tvec3 totalSpecular = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += dirDiffuse;\r\n\t\ttotalSpecular += dirSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += hemiDiffuse;\r\n\t\ttotalSpecular += hemiSpecular;\r\n\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\ttotalDiffuse += pointDiffuse;\r\n\t\ttotalSpecular += pointSpecular;\r\n\r\n\t#endif\r\n\r\n\t//"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient) + totalSpecular;\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\r\n\r\n[*]\r\n\r\n}\r\n'};DV(1332,1,{},myc);_.nc=function nyc(){return 'attribute vec4 tangent;\r\n\r\nuniform vec2 uRepeatBase;\r\n\r\nuniform sampler2D tNormal;\r\n\r\n#ifdef VERTEX_TEXTURES\r\n\r\n\tuniform sampler2D tDisplacement;\r\n\tuniform float uDisplacementScale;\r\n\tuniform float uDisplacementBias;\r\n\r\n#endif\r\n\r\nvarying vec3 vTangent;\r\nvarying vec3 vBinormal;\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\t// tangent and binormal vectors\r\n\r\n\tvTangent = normalize( normalMatrix * tangent.xyz );\r\n\r\n\tvBinormal = cross( vNormal, vTangent ) * tangent.w;\r\n\tvBinormal = normalize( vBinormal );\r\n\r\n\t// texture coordinates\r\n\r\n\tvUv = uv;\r\n\r\n\tvec2 uvBase = uv * uRepeatBase;\r\n\r\n\t// displacement mapping\r\n\r\n\t#ifdef VERTEX_TEXTURES\r\n\r\n\t\tvec3 dv = texture2D( tDisplacement, uvBase ).xyz;\r\n\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\r\n\t\tvec3 displacedPosition = normal * df + position;\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvec3 normalTex = texture2D( tNormal, uvBase ).xyz * 2.0 - 1.0;\r\n\tvNormal = normalMatrix * normalTex;\r\n\r\n[*]\r\n\r\n}\r\n'};DV(1424,742,QNc,NIc);_.Ld=function OIc(){nJb(this,MTc,new ONb((gOb(),$Nb)));nJb(this,WTc,new PNb(UNb,new skb(1)))};var PIc;DV(1425,1,{},UIc);_.Od=function VIc(){return bJc(),SIc};_.Pd=function WIc(){return cJc(),TIc};var SIc,TIc;DV(1426,1,{},YIc);_.nc=function ZIc(){return 'uniform float opacity;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 base = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\r\n\tfloat lum = dot( lumCoeff, base.rgb );\r\n\tvec3 blend = vec3( lum );\r\n\r\n\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\r\n\r\n\tvec3 result1 = 2.0 * base.rgb * blend;\r\n\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\r\n\r\n\tvec3 newColor = mix( result1, result2, L );\r\n\r\n\tfloat A2 = opacity * base.a;\r\n\tvec3 mixRGB = A2 * newColor.rgb;\r\n\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\r\n\r\n\tgl_FragColor = vec4( mixRGB, base.a );\r\n\r\n}\r\n'};DV(1427,1,{},_Ic);_.nc=function aJc(){return BUc};DV(1448,742,QNc,hKc);_.Ld=function iKc(){nJb(this,MTc,new ONb((gOb(),$Nb)));nJb(this,VUc,new PNb(UNb,new skb(0.001953125)));nJb(this,hVc,new PNb(UNb,new skb(0.35)))};var jKc;DV(1449,1,{},oKc);_.Od=function pKc(){return xKc(),mKc};_.Pd=function qKc(){return yKc(),nKc};var mKc,nKc;DV(1450,1,{},sKc);_.nc=function tKc(){return 'uniform sampler2D tDiffuse;\r\nuniform float h;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat hh = h * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, \t\t  \t vUv.y ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};DV(1451,1,{},vKc);_.nc=function wKc(){return BUc};DV(1454,742,QNc,AKc);_.Ld=function BKc(){nJb(this,MTc,new ONb((gOb(),$Nb)))};var CKc;DV(1455,1,{},HKc);_.Od=function IKc(){return QKc(),FKc};_.Pd=function JKc(){return RKc(),GKc};var FKc,GKc;DV(1456,1,{},LKc);_.nc=function MKc(){return 'uniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\r\n\r\n\tfloat v = dot( texel.xyz, luma );\r\n\r\n\tgl_FragColor = vec4( v, v, v, texel.w );\r\n\r\n}\r\n'};DV(1457,1,{},OKc);_.nc=function PKc(){return BUc};DV(1460,742,QNc,TKc);_.Ld=function UKc(){nJb(this,XUc,new ONb((gOb(),$Nb)));nJb(this,qUc,new PNb(aOb,new m7b(512,512)));nJb(this,eVc,new PNb(aOb,new m7b(1,1)));nJb(this,CQc,new PNb(UNb,new skb(0.05)))};var VKc;DV(1461,1,{},$Kc);_.Od=function _Kc(){return hLc(),YKc};_.Pd=function aLc(){return iLc(),ZKc};var YKc,ZKc;DV(1462,1,{},cLc);_.nc=function dLc(){return 'uniform float height;\r\nuniform vec2 resolution;\r\nuniform sampler2D heightMap;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tfloat val = texture2D( heightMap, vUv ).x;\r\n\r\n\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\r\n\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\r\n\r\n\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\r\n\r\n}\r\n'};DV(1463,1,{},fLc);_.nc=function gLc(){return BUc};DV(1466,742,QNc,kLc);_.Ld=function lLc(){nJb(this,MTc,new ONb((gOb(),$Nb)));nJb(this,WUc,new PNb(UNb,new skb(0.001953125)));nJb(this,hVc,new PNb(UNb,new skb(0.35)))};var mLc;DV(1467,1,{},rLc);_.Od=function sLc(){return ALc(),pLc};_.Pd=function tLc(){return BLc(),qLc};var pLc,qLc;DV(1468,1,{},vLc);_.nc=function wLc(){return 'uniform sampler2D tDiffuse;\r\nuniform float v;\r\nuniform float r;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\tvec4 sum = vec4( 0.0 );\r\n\r\n\tfloat vv = v * abs( r - vUv.y );\r\n\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y\t\t\t   ) ) * 0.1633;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\r\n\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\r\n\r\n\tgl_FragColor = sum;\r\n\r\n}\r\n'};DV(1469,1,{},yLc);_.nc=function zLc(){return BUc};var NP=gkb(aTc,'TerrainDynamic$DemoScene',1261),JP=gkb(aTc,'TerrainDynamic$DemoScene$1',1262),KP=gkb(aTc,'TerrainDynamic$DemoScene$2',1263),LP=gkb(aTc,'TerrainDynamic$DemoScene$3',1264),MP=gkb(aTc,'TerrainDynamic$DemoScene$4',1265),DS=gkb(DUc,lVc,1460),BQ=gkb(SSc,'TerrainShader',1329),fS=gkb(DUc,'BleachBypassShader',1424),vS=gkb(DUc,'HorizontalTiltShiftShader',1448),HS=gkb(DUc,'VerticalTiltShiftShader',1466),QP=gkb(aTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator',1266),OP=gkb(aTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$1',1267),PP=gkb(aTc,'TerrainDynamic_Resources_default_InlineClientBundleGenerator$2',1268),CS=gkb(DUc,mVc,1461),AS=gkb(DUc,nVc,1462),BS=gkb(DUc,oVc,1463),AQ=gkb(SSc,'TerrainShader_Resources_default_InlineClientBundleGenerator',1330),yQ=gkb(SSc,'TerrainShader_Resources_default_InlineClientBundleGenerator$1',1331),zQ=gkb(SSc,'TerrainShader_Resources_default_InlineClientBundleGenerator$2',1332),eS=gkb(DUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator',1425),cS=gkb(DUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$1',1426),dS=gkb(DUc,'BleachBypassShader_Resources_default_InlineClientBundleGenerator$2',1427),uS=gkb(DUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1449),sS=gkb(DUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1450),tS=gkb(DUc,'HorizontalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1451),GS=gkb(DUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator',1467),ES=gkb(DUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$1',1468),FS=gkb(DUc,'VerticalTiltShiftShader_Resources_default_InlineClientBundleGenerator$2',1469),zS=gkb(DUc,'LuminosityShader',1454),yS=gkb(DUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator',1455),wS=gkb(DUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$1',1456),xS=gkb(DUc,'LuminosityShader_Resources_default_InlineClientBundleGenerator$2',1457);qOc(Ej)(38);