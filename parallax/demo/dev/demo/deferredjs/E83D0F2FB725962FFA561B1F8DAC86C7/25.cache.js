function IGb(){}
function MGb(){}
function PGb(){}
function EGb(){EGb=tDc;DGb=new IGb}
function RGb(){RGb=tDc;GGb=new MGb}
function SGb(){SGb=tDc;HGb=new PGb}
function BGb(){XEb.call(this,(EGb(),DGb))}
function Lgc(){$4b.call(this);this.d=0;this.e=0}
kT(733,709,IEc,BGb);_.Sd=function CGb(){LEb(this,'mRefractionRatio',new eJb((xJb(),jJb),new gib(1.02)));LEb(this,'mFresnelBias',new eJb(jJb,new gib(0.1)));LEb(this,'mFresnelPower',new eJb(jJb,new gib(2)));LEb(this,'mFresnelScale',new eJb(jJb,new gib(1)));LEb(this,XKc,new dJb(pJb))};var DGb;kT(734,1,{},IGb);_.Vd=function JGb(){return RGb(),GGb};_.Wd=function KGb(){return SGb(),HGb};var GGb,HGb;kT(735,1,{},MGb);_.mc=function NGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};kT(736,1,{},PGb);_.mc=function QGb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};kT(1105,1,UEc);_.Gb=function Jgc(){X4b(this.c,new Lgc(this.b))};kT(1106,940,{267:1},Lgc);_.rb=function Mgc(){var a,b,c,d,e,f,g,i,j;this.b=new BMb(60,BDb(this.H.o),1,100000);L1b(this.b.bb,3200);this.c=new BMb(60,BDb(this.H.o),1,100000);this.f=new _3b;a=new USb(100,32,16);j=new kKb('./static/textures/cube/park2/*.jpg');NJb(j,(CAb(),AAb));g=new BGb;cJb(Uu(mOb(g.j,XKc),168),j);c=new r$b(g);this.g=new Vob;for(b=0;b<500;b++){e=new h3b(a,c);b1b(e.bb,njb()*10000-5000);c1b(e.bb,njb()*10000-5000);L1b(e.bb,njb()*10000-5000);G1b(e.gb,njb()*3+1);xLb(this.I,e);Lob(this.g,e)}this.I.X=false;i=new xFb;cJb(Uu(mOb(i.j,XKc),168),j);f=new r$b(i);RVb(f,(EXb(),BXb));d=new h3b(new mSb(100000,100000,100000),f);xLb(this.f,d);this.H.o.S=false};_.sb=function Ngc(a){var b,c,d,e;e=1.0E-4*a;Y0b(this.b.bb,(this.d-this.b.bb.d)*0.05);Z0b(this.b.bb,(-this.e-this.b.bb.e)*0.05);bMb(this.b,this.I.bb);this.c.eb.zf(this.b.eb);for(b=0,c=this.g.c;b<c;b++){d=Uu(Oob(this.g,b),242);b1b(d.bb,5000*Math.cos(e+b));c1b(d.bb,5000*Math.sin(e+b*1.1))}yDb(this.H.o);GDb(this.H.o,this.f,this.c,null,false);GDb(this.H.o,this.I,this.b,null,false)};_.d=0;_.e=0;var EM=Whb(NJc,'MaterialsCubemapFresnel$DemoScene',1106),rG=Whb(UKc,'FresnelShader',733),qG=Whb(UKc,'FresnelShader_Resources_default_InlineClientBundleGenerator',734),oG=Whb(UKc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',735),pG=Whb(UKc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',736);fFc(Ei)(25);