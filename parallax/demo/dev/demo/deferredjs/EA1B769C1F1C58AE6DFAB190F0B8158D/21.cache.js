function iKb(){}
function mKb(){}
function pKb(){}
function eKb(){eKb=ZJc;dKb=new iKb}
function rKb(){rKb=ZJc;gKb=new mKb}
function sKb(){sKb=ZJc;hKb=new pKb}
function bKb(){sIb.call(this,(eKb(),dKb))}
function Qkc(){z9b.call(this);this.c=0;this.d=0}
ZT(754,730,vLc,bKb);_.Ld=function cKb(){gIb(this,'mRefractionRatio',new IMb((_Mb(),NMb),new Fjb(1.02)));gIb(this,'mFresnelBias',new IMb(NMb,new Fjb(0.1)));gIb(this,'mFresnelPower',new IMb(NMb,new Fjb(2)));gIb(this,'mFresnelScale',new IMb(NMb,new Fjb(1)));gIb(this,GRc,new HMb(TMb))};var dKb;ZT(755,1,{},iKb);_.Od=function jKb(){return rKb(),gKb};_.Pd=function kKb(){return sKb(),hKb};var gKb,hKb;ZT(756,1,{},mKb);_.nc=function nKb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};ZT(757,1,{},pKb);_.nc=function qKb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};ZT(1139,1,ILc);_.zb=function Okc(){_8b(this.b,new Qkc(this.a))};ZT(1140,972,{327:1},Qkc);_.nb=function Rkc(){var a,b,c,d,e,f,g,i,j;this.a=new fQb(60,vGb(this.G.k),1,100000);R5b(this.a._,3200);this.b=new fQb(60,vGb(this.G.k),1,100000);this.e=new e8b;a=new EWb(100,32,16);j=new QNb('./static/textures/cube/park2/*.jpg');pNb(j,(rCb(),pCb));g=new bKb;GMb(qu(HRb(g.i,GRc),225),j);c=new k2b(g);this.f=new tqb;for(b=0;b<500;b++){d=new r7b(a,c);c5b(d._,Mkb()*10000-5000);d5b(d._,Mkb()*10000-5000);R5b(d._,Mkb()*10000-5000);O5b(d.eb,Mkb()*3+1);cPb(this.H,d);jqb(this.f,d)}this.H.W=false;i=new UIb;GMb(qu(HRb(i.i,GRc),225),j);f=new k2b(i);nZb(f,(_$b(),Y$b));e=new r7b(new PVb(100000,100000,100000),f);cPb(this.e,e);PGb(this.G.k,false)};_.ob=function Skc(a){var b,c,d,e;e=1.0E-4*a;Z4b(this.a._,(this.c-this.a._.c)*0.05);$4b(this.a._,(-this.d-this.a._.d)*0.05);BPb(this.a,this.H._);f3b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(mqb(this.f,b),304);c5b(d._,5000*Math.cos(e+b));d5b(d._,5000*Math.sin(e+b*1.1))}oGb(this.G.k,true);HGb(this.G.k,this.e,this.b,null,false);HGb(this.G.k,this.H,this.a,null,false)};_.c=0;_.d=0;var yM=tjb(zQc,'MaterialsCubemapFresnel$DemoScene',1140),$F=tjb(HRc,'FresnelShader',754),ZF=tjb(HRc,'FresnelShader_Resources_default_InlineClientBundleGenerator',755),XF=tjb(HRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',756),YF=tjb(HRc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',757);WLc(xi)(21);