function Ajc(){}
function Gjc(){}
function cuc(){}
function luc(){}
function iuc(){}
function quc(){}
function puc(){}
function uuc(){}
function tuc(){}
function txc(){}
function lxc(){}
function wxc(){}
function Bxc(){}
function Axc(){}
function Fxc(){}
function Exc(){}
function Cjc(){H7b.call(this)}
function Hjc(a,b){this.a=a;this.b=b}
function huc(){huc=gLc;guc=new luc}
function xuc(){xuc=gLc;juc=new quc}
function yuc(){yuc=gLc;kuc=new uuc}
function sxc(){sxc=gLc;rxc=new wxc}
function Ixc(){Ixc=gLc;uxc=new Bxc}
function Jxc(){Jxc=gLc;vxc=new Fxc}
function mxc(){cFb.call(this,(sxc(),rxc))}
function duc(){cFb.call(this,(huc(),guc))}
function Bjc(a,b){var c,d,e,f,g,i;d=new YKb(xPc);d.k=4;VSb(d.x,0.998,0.998);VSb(d.w,0.001,0.001);VKb(d,(ZCb(),YCb));WKb(d,YCb);LKb(d,(qAb(),oAb));e=new YKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');VSb(e.x,0.998,0.998);VSb(e.w,0.001,0.001);VKb(e,YCb);WKb(e,YCb);LKb(e,oAb);c=new YKb('./static/models/obj/leeperrysmith/Map-COL.jpg');VSb(c.x,0.998,0.998);VSb(c.w,0.001,0.001);VKb(c,YCb);WKb(c,YCb);LKb(c,oAb);g=new mxc;i=g.i;$Jb(Qq(i.a[zPc],166),(zeb(),zeb(),yeb));$Jb(Qq(i.a[APc],166),yeb);$Jb(Qq(i.a[BPc],166),a.b.e);$Jb(Qq(i.a[CPc],166),c);$Jb(Qq(i.a[DPc],166),d);$Jb(Qq(i.a[EPc],166),e);YNb(Qq(Qq(i.a[FPc],166).d,178),10526880);YNb(Qq(Qq(i.a[GPc],166).d,178),10526880);YNb(Qq(Qq(i.a[HPc],166).d,178),10526880);$Jb(Qq(i.a[IPc],166),new xfb(0.145));$Jb(Qq(i.a[JPc],166),new xfb(0.75));$Jb(Qq(i.a[KPc],166),new xfb(16));jUb(Qq(Qq(i.a[LPc],166).d,194),0.001,0.001,0.998,0.998);f=new N4b(g);f.c=true;a.c=new z5b(b,f);a.c.W.d=-50;yTb(a.c._,100);a.c.M=true;a.c.N=true;IMb(a.D,a.c)}
var zPc='enableBump',BPc='tBeckmann',IPc='uRoughness',JPc='uSpecularBrightness';_=vjc.prototype;_.vb=function zjc(){D7b(this.b,new Cjc(this.a))};_=Cjc.prototype=Ajc.prototype=new G7b;_.gC=function Djc(){return oG};_.mb=function Ejc(){var a,b,c,d,e,f,g,i,j;this.a=new HNb(27,CDb(this.C.n),1,10000);this.a.W.b=1200;IMb(this.D,new k$b(5592405));f=new h_b(16777215,1.5,1000);xTb(f.W,0,0,600);IMb(this.D,f);i=new v_b(1);xTb(i.W,0.05,0.05,1);IMb(this.D,i);i.W.Ae(700);i.M=true;i.u=true;i.E=2048;i.C=2048;i.y=200;i.x=1500;i.c=40;i.v=-0.005;i.A=0.15;b=new P$b(16777215,0.85);xTb(b.W,1,-0.5,1);XNb(b.H,0.6,0.3,1);IMb(this.D,b);b.W.Ae(500);b.M=true;b.E=2048;b.C=2048;b.y=200;b.x=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.v=-0.005;b.A=0.15;c=new P$b(16777215,0.85);xTb(c.W,1,-0.5,-1);IMb(this.D,c);new FGc(new duc);d=new FGc(new BHc);d.a=true;j=new DLb(512,512);PKb(j,(DBb(),xBb));NKb(j,(rBb(),pBb));LKb(j,(qAb(),oAb));j.f=false;this.b=new sGc(this.C.n,j);e=new wyc;try{jyc(e,yPc,new Hjc(this,e))}catch(a){a=kM(a);if(Tq(a,41)){xMb();VP(wMb,(BP(),zP),gPc)}else throw a}PDb(this.C.n,5001561,1);g=new qDb(this.C.n,this.D);g.f=false;this.C.n.N=false;this.C.n.P=true;this.C.n.Q=true;this.C.n.S=true};_.nb=function Fjc(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){RSb(this.c.Z,0.05*(b-this.c.Z.d));QSb(this.c.Z,0.05*(c-this.c.Z.c))}zDb(this.C.n);HDb(this.C.n,this.D,this.a,null,false)};_.cM={261:1};_.a=null;_.b=null;_.c=null;_.d=0;_.e=0;_=Hjc.prototype=Gjc.prototype=new Jb;_.gC=function Ijc(){return nG};_.zf=function Jjc(){Bjc(this.a,this.b.a)};_.a=null;_.b=null;_=duc.prototype=cuc.prototype=new QEb;_.gC=function euc(){return uI};_.Jd=function fuc(){};_.cM={164:1};var guc;_=luc.prototype=iuc.prototype=new Jb;_.gC=function muc(){return tI};_.Md=function nuc(){return xuc(),juc};_.Nd=function ouc(){return yuc(),kuc};var juc=null,kuc=null;_=quc.prototype=puc.prototype=new Jb;_.gC=function ruc(){return rI};_.Yb=function suc(){return 'varying vec2 vUv;\r\n\r\nfloat PHBeckmann( float ndoth, float m ) {\r\n\r\n\tfloat alpha = acos( ndoth );\r\n\tfloat ta = tan( alpha );\r\n\r\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\r\n\treturn val;\r\n\r\n}\r\n\r\nfloat KSTextureCompute( vec2 tex ) {\r\n\r\n\t// Scale the value to fit within [0,1]  invert upon lookup.\r\n\r\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tfloat x = KSTextureCompute( vUv );\r\n\r\n\tgl_FragColor = vec4( x, x, x, 1.0 );\r\n\r\n}\r\n'};_=uuc.prototype=tuc.prototype=new Jb;_.gC=function vuc(){return sI};_.Yb=function wuc(){return MPc};_=mxc.prototype=lxc.prototype=new QEb;_.gC=function nxc(){return HI};_.Jd=function oxc(){$Eb(this,zKb());$Eb(this,AKb());$Eb(this,BKb());TEb(this,zPc,new aKb((uKb(),jKb),igb(0)));TEb(this,APc,new aKb(jKb,igb(0)));TEb(this,CPc,new _Jb(mKb));TEb(this,BPc,new _Jb(mKb));TEb(this,GPc,new aKb(fKb,new bOb(15658734)));TEb(this,HPc,new aKb(fKb,new bOb(1118481)));TEb(this,FPc,new aKb(fKb,new bOb(328965)));TEb(this,NPc,new aKb(gKb,new xfb(1)));TEb(this,IPc,new aKb(gKb,new xfb(0.15)));TEb(this,JPc,new aKb(gKb,new xfb(0.75)));TEb(this,DPc,new _Jb(mKb));TEb(this,KPc,new aKb(gKb,new xfb(1)));TEb(this,EPc,new _Jb(mKb));TEb(this,LPc,new aKb(sKb,new mUb(0,0,1,1)));TEb(this,'uWrapRGB',new aKb(qKb,new DTb(0.75,0.375,0.1875)))};_.Kd=function pxc(a){var b,c;c=new rnb(Hq(cL,{88:1,106:1},1,[OPc,PPc,QPc]));b=new rnb(Hq(cL,{88:1,106:1},1,[RPc,SPc,TPc]));aFb(this,iFb(a,Hq(gL,{88:1,106:1},117,[c,b])))};_.Ld=function qxc(a){var b,c;c=new rnb(Hq(cL,{88:1,106:1},1,[UPc]));b=new rnb(Hq(cL,{88:1,106:1},1,[VPc]));bFb(this,iFb(a,Hq(gL,{88:1,106:1},117,[c,b])))};_.cM={164:1};var rxc;_=wxc.prototype=txc.prototype=new Jb;_.gC=function xxc(){return GI};_.Md=function yxc(){return Ixc(),uxc};_.Nd=function zxc(){return Jxc(),vxc};var uxc=null,vxc=null;_=Bxc.prototype=Axc.prototype=new Jb;_.gC=function Cxc(){return EI};_.Yb=function Dxc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 uAmbientColor;\r\nuniform vec3 uDiffuseColor;\r\nuniform vec3 uSpecularColor;\r\nuniform float uOpacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightPosition[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), uOpacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * uDiffuseColor * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * uSpecularColor * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// directional lights\r\n\t\t\t\t\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += uDiffuseColor * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += uSpecularColor * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( hemisphereLightPosition[ i ], 1.0 );\r\n\t\t\tvec3 lVector = normalize( lPosition.xyz + vViewPosition.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += uDiffuseColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = normalize( -lPosition.xyz + vViewPosition.xyz );\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += uSpecularColor * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * uAmbientColor ) + specularTotal;\r\n\r\n[*]\r\n\r\n}'};_=Fxc.prototype=Exc.prototype=new Jb;_.gC=function Gxc(){return FI};_.Yb=function Hxc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalMatrix * normal;\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var oG=mfb(XOc,'MaterialsBumpmapSkin$DemoScene',XD),nG=mfb(XOc,'MaterialsBumpmapSkin$DemoScene$1',Nx),uI=mfb($Oc,'BeckmannShader',eB),tI=mfb($Oc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',Nx),rI=mfb($Oc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',Nx),sI=mfb($Oc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',Nx),HI=mfb($Oc,'SkinSimpleShader',eB),GI=mfb($Oc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',Nx),EI=mfb($Oc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',Nx),FI=mfb($Oc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',Nx);xLc(Wd)(23);