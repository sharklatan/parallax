function ZGb(){}
function gHb(){}
function dHb(){}
function lHb(){}
function kHb(){}
function pHb(){}
function oHb(){}
function Elc(){}
function Flc(){H7b.call(this)}
function $Gb(){cFb.call(this,(cHb(),bHb))}
function cHb(){cHb=gLc;bHb=new gHb}
function sHb(){sHb=gLc;eHb=new lHb}
function tHb(){tHb=gLc;fHb=new pHb}
_=$Gb.prototype=ZGb.prototype=new QEb;_.gC=function _Gb(){return JA};_.Jd=function aHb(){TEb(this,'mRefractionRatio',new aKb((uKb(),gKb),new xfb(1.02)));TEb(this,'mFresnelBias',new aKb(gKb,new xfb(0.1)));TEb(this,'mFresnelPower',new aKb(gKb,new xfb(2)));TEb(this,'mFresnelScale',new aKb(gKb,new xfb(1)));TEb(this,cQc,new _Jb(mKb))};_.cM={164:1};var bHb;_=gHb.prototype=dHb.prototype=new Jb;_.gC=function hHb(){return IA};_.Md=function iHb(){return sHb(),eHb};_.Nd=function jHb(){return tHb(),fHb};var eHb=null,fHb=null;_=lHb.prototype=kHb.prototype=new Jb;_.gC=function mHb(){return GA};_.Yb=function nHb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};_=pHb.prototype=oHb.prototype=new Jb;_.gC=function qHb(){return HA};_.Yb=function rHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};_=zlc.prototype;_.vb=function Dlc(){D7b(this.b,new Flc(this.a))};_=Flc.prototype=Elc.prototype=new G7b;_.gC=function Glc(){return LG};_.mb=function Hlc(){var a,b,c,d,e,f,g,i;this.a=new HNb(60,CDb(this.C.n),1,100000);this.a.W.b=3200;this.b=new HNb(60,CDb(this.C.n),1,100000);this.e=new x6b;a=new DYb(100,32,16);i=new kLb('./static/textures/cube/park2/*.jpg');LKb(i,(qAb(),oAb));f=new $Gb;$Jb(Qq(f.i.a[cQc],166),i);c=new N4b(f);this.f=new Qmb;for(b=0;b<500;++b){d=new z5b(a,c);WSb(d.W,Math.random()*10000-5000);XSb(d.W,Math.random()*10000-5000);ATb(d.W,Math.random()*10000-5000);yTb(d._,Math.random()*3+1);IMb(this.D,d);Emb(this.f,d)}this.D.R=false;g=new KFb;$Jb(Qq(g.i.a[cQc],166),i);e=new N4b(g);Z_b(e,(S1b(),P1b));d=new z5b(new NXb(100000,100000,100000),e);IMb(this.e,d);this.C.n.N=false};_.nb=function Ilc(a){var b,c,d,e;e=1.0E-4*a;QSb(this.a.W,(this.c-this.a.W.c)*0.05);RSb(this.a.W,(-this.d-this.a.W.d)*0.05);hNb(this.a,this.D.W);this.b.Z.ye(this.a.Z);for(b=0,c=this.f.b;b<c;++b){d=Qq(Imb(this.f,b),240);WSb(d.W,5000*Math.cos(e+b));XSb(d.W,5000*Math.sin(e+b*1.1))}zDb(this.C.n);HDb(this.C.n,this.e,this.b,null,false);HDb(this.C.n,this.D,this.a,null,false)};_.cM={265:1};_.a=null;_.b=null;_.c=0;_.d=0;_.e=null;_.f=null;var JA=mfb(_Pc,'FresnelShader',eB),IA=mfb(_Pc,'FresnelShader_Resources_default_InlineClientBundleGenerator',Nx),GA=mfb(_Pc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',Nx),HA=mfb(_Pc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',Nx),LG=mfb(XOc,'MaterialsCubemapFresnel$DemoScene',XD);xLc(Wd)(28);