function Dmc(){}
function twc(){}
function Cwc(){}
function zwc(){}
function Hwc(){}
function Gwc(){}
function Lwc(){}
function Kwc(){}
function lGc(){}
function XHc(){}
function eIc(){}
function bIc(){}
function jIc(){}
function iIc(){}
function nIc(){}
function mIc(){}
function Emc(){H7b.call(this)}
function uwc(){cFb.call(this,(ywc(),xwc))}
function YHc(){cFb.call(this,(aIc(),_Hc))}
function qIc(){qIc=gLc;cIc=new jIc}
function rIc(){rIc=gLc;dIc=new nIc}
function aIc(){aIc=gLc;_Hc=new eIc}
function ywc(){ywc=gLc;xwc=new Cwc}
function Owc(){Owc=gLc;Awc=new Hwc}
function Pwc(){Pwc=gLc;Bwc=new Lwc}
function mGc(){this.b=new N4b(new YHc);$Jb(Qq(O_b(this.b).i.a[qQc],166),(zeb(),zeb(),xeb));$Jb(Qq(O_b(this.b).i.a[rQc],166),new xfb(0.35));$Jb(Qq(O_b(this.b).i.a[sQc],166),new xfb(0.95));$Jb(Qq(O_b(this.b).i.a[tQc],166),igb(2048));this.e=true;this.f=true}
var qQc='grayscale',rQc='nIntensity',tQc='sCount',sQc='sIntensity',jQc='texture1',lQc='texture2';_=ymc.prototype;_.vb=function Cmc(){D7b(this.b,new Emc(this.a))};_=Emc.prototype=Dmc.prototype=new G7b;_.gC=function Fmc(){return VG};_.Gd=function Gmc(a){WSb(Qq(Qq(this.d.a[iQc],166).d,192),a.a.o);XSb(Qq(Qq(this.d.a[iQc],166).d,192),a.a.n)};_.mb=function Hmc(){var a,b,c,d,e,f,g;pp((xvb(),wvb),(Ivb(),Hvb),this);this.a=new HNb(35,CDb(this.C.n),1,3000);this.a.W.b=4;d=new N4b(new uwc);this.d=O_b(d).i;f=new YKb('./static/textures/lava/cloud.png');VKb(f,(ZCb(),YCb));WKb(f,YCb);$Jb(Qq(this.d.a[jQc],166),f);g=new YKb(kQc);VKb(g,YCb);WKb(g,YCb);$Jb(Qq(this.d.a[lQc],166),g);this.b=new z5b(new NYb(0.65,0.3,30,30),d);this.b.Z.c=0.3;IMb(this.D,this.b);a=new rGc(this.C.n);e=new BGc(this.D,this.a);b=new iGc(1.25);c=new mGc;c.a=true;Emb(a.b,e);Emb(a.b,b);Emb(a.b,c);this.C.n.N=false;this.c=Uc()};_.nb=function Imc(a){var b;b=(Uc()-this.c)*0.001*5;$Jb(Qq(this.d.a[mQc],166),new xfb(Qq(Qq(this.d.a[mQc],166).d,95).a+0.2*b));QSb(this.b.Z,0.05*b);RSb(this.b.Z,0.0125*b);zDb(this.C.n);this.c=Uc();HDb(this.C.n,this.D,this.a,null,false)};_.cM={38:1,131:1};_.a=null;_.b=null;_.c=0;_.d=null;_=uwc.prototype=twc.prototype=new QEb;_.gC=function vwc(){return zI};_.Jd=function wwc(){TEb(this,nQc,new aKb((uKb(),gKb),new xfb(0.45)));TEb(this,oQc,new aKb(qKb,new DTb(0,0,0)));TEb(this,mQc,new aKb(gKb,new xfb(1)));TEb(this,iQc,new aKb(oKb,new YSb));TEb(this,pQc,new aKb(oKb,new ZSb(3,1)));TEb(this,jQc,new _Jb(mKb));TEb(this,lQc,new _Jb(mKb))};_.cM={164:1};var xwc;_=Cwc.prototype=zwc.prototype=new Jb;_.gC=function Dwc(){return yI};_.Md=function Ewc(){return Owc(),Awc};_.Nd=function Fwc(){return Pwc(),Bwc};var Awc=null,Bwc=null;_=Hwc.prototype=Gwc.prototype=new Jb;_.gC=function Iwc(){return wI};_.Yb=function Jwc(){return 'uniform float time;\r\nuniform vec2 resolution;\r\n\r\nuniform float fogDensity;\r\nuniform vec3 fogColor;\r\n\r\nuniform sampler2D texture1;\r\nuniform sampler2D texture2;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main( void ) {\r\n\r\n\tvec2 position = -1.0 + 2.0 * vUv;\r\n\r\n\tvec4 noise = texture2D( texture1, vUv );\r\n\tvec2 T1 = vUv + vec2( 1.5, -1.5 ) * time  *0.02;\r\n\tvec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;\r\n\r\n\tT1.x += noise.x * 2.0;\r\n\tT1.y += noise.y * 2.0;\r\n\tT2.x -= noise.y * 0.2;\r\n\tT2.y += noise.z * 0.2;\r\n\r\n\tfloat p = texture2D( texture1, T1 * 2.0 ).a;\r\n\r\n\tvec4 color = texture2D( texture2, T2 * 2.0 );\r\n\tvec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );\r\n\r\n\tif( temp.r > 1.0 ){ temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }\r\n\tif( temp.g > 1.0 ){ temp.rb += temp.g - 1.0; }\r\n\tif( temp.b > 1.0 ){ temp.rg += temp.b - 1.0; }\r\n\r\n\tgl_FragColor = temp;\r\n\r\n\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\tconst float LOG2 = 1.442695;\r\n\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\r\n\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\r\n\r\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\r\n\r\n}\r\n'};_=Lwc.prototype=Kwc.prototype=new Jb;_.gC=function Mwc(){return xI};_.Yb=function Nwc(){return 'uniform vec2 uvScale;\r\nvarying vec2 vUv;\r\n\r\nvoid main()\r\n{\r\n\r\n\tvUv = uvScale * uv;\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}'};_=mGc.prototype=lGc.prototype=new dGc;_.gC=function nGc(){return HJ};_.Hg=function oGc(a,b,c){$Jb(Qq(O_b(this.b).i.a[CPc],166),a.d);$Jb(Qq(O_b(this.b).i.a[mQc],166),new xfb(Qq(Qq(O_b(this.b).i.a[mQc],166).d,95).a+b));GZb(a.c,this.b);this.a?HDb(a.n,a.o,a.a,null,false):HDb(a.n,a.o,a.a,a.g,false)};_.cM={283:1};_.a=false;_.b=null;_=YHc.prototype=XHc.prototype=new QEb;_.gC=function ZHc(){return aK};_.Jd=function $Hc(){TEb(this,CPc,new _Jb((uKb(),mKb)));TEb(this,mQc,new aKb(gKb,new xfb(0)));TEb(this,rQc,new aKb(gKb,new xfb(0.5)));TEb(this,sQc,new aKb(gKb,new xfb(0.05)));TEb(this,tQc,new aKb(jKb,igb(4096)));TEb(this,qQc,new aKb(jKb,(zeb(),zeb(),yeb)))};_.cM={164:1};var _Hc;_=eIc.prototype=bIc.prototype=new Jb;_.gC=function fIc(){return _J};_.Md=function gIc(){return qIc(),cIc};_.Nd=function hIc(){return rIc(),dIc};var cIc=null,dIc=null;_=jIc.prototype=iIc.prototype=new Jb;_.gC=function kIc(){return ZJ};_.Yb=function lIc(){return '// control parameter\r\nuniform float time;\r\n\r\nuniform bool grayscale;\r\n\r\n// noise effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float nIntensity;\r\n\r\n// scanlines effect intensity value (0 = no effect, 1 = full effect)\r\nuniform float sIntensity;\r\n\r\n// scanlines effect count value (0 = no effect, 4096 = full effect)\r\nuniform float sCount;\r\n\r\nuniform sampler2D tDiffuse;\r\n\r\nvarying vec2 vUv;\r\n\r\nvoid main() {\r\n\r\n\t// sample the source\r\n\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\r\n\r\n\t// make some noise\r\n\tfloat x = vUv.x * vUv.y * time *  1000.0;\r\n\tx = mod( x, 13.0 ) * mod( x, 123.0 );\r\n\tfloat dx = mod( x, 0.01 );\r\n\r\n\t// add noise\r\n\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\r\n\r\n\t// get us a sine and cosine\r\n\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\r\n\r\n\t// add scanlines\r\n\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\r\n\r\n\t// interpolate between source and result by intensity\r\n\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\r\n\r\n\t// convert to grayscale if desired\r\n\tif( grayscale ) {\r\n\r\n\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\r\n\r\n\t}\r\n\r\n\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\r\n\r\n}\r\n'};_=nIc.prototype=mIc.prototype=new Jb;_.gC=function oIc(){return $J};_.Yb=function pIc(){return MPc};var VG=mfb(XOc,'MaterialsShaderLava$DemoScene',XD),zI=mfb($Oc,'LavaShader',eB),yI=mfb($Oc,'LavaShader_Resources_default_InlineClientBundleGenerator',Nx),wI=mfb($Oc,'LavaShader_Resources_default_InlineClientBundleGenerator$1',Nx),xI=mfb($Oc,'LavaShader_Resources_default_InlineClientBundleGenerator$2',Nx),HJ=mfb(uQc,'FilmPass',IJ),aK=mfb(vQc,'FilmShader',eB),_J=mfb(vQc,'FilmShader_Resources_default_InlineClientBundleGenerator',Nx),ZJ=mfb(vQc,'FilmShader_Resources_default_InlineClientBundleGenerator$1',Nx),$J=mfb(vQc,'FilmShader_Resources_default_InlineClientBundleGenerator$2',Nx);xLc(Wd)(30);