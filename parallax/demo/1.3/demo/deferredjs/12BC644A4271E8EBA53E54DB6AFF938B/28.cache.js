function iHb(){}
function rHb(){}
function oHb(){}
function wHb(){}
function vHb(){}
function AHb(){}
function zHb(){}
function Plc(){}
function Qlc(){S7b.call(this)}
function jHb(){nFb.call(this,(nHb(),mHb))}
function nHb(){nHb=rLc;mHb=new rHb}
function DHb(){DHb=rLc;pHb=new wHb}
function EHb(){EHb=rLc;qHb=new AHb}
_=jHb.prototype=iHb.prototype=new _Eb;_.gC=function kHb(){return cB};_.Md=function lHb(){cFb(this,'mRefractionRatio',new lKb((FKb(),rKb),new Ifb(1.02)));cFb(this,'mFresnelBias',new lKb(rKb,new Ifb(0.1)));cFb(this,'mFresnelPower',new lKb(rKb,new Ifb(2)));cFb(this,'mFresnelScale',new lKb(rKb,new Ifb(1)));cFb(this,pQc,new kKb(xKb))};_.cM={164:1};var mHb;_=rHb.prototype=oHb.prototype=new Jb;_.gC=function sHb(){return bB};_.Pd=function tHb(){return DHb(),pHb};_.Qd=function uHb(){return EHb(),qHb};var pHb=null,qHb=null;_=wHb.prototype=vHb.prototype=new Jb;_.gC=function xHb(){return _A};_._b=function yHb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};_=AHb.prototype=zHb.prototype=new Jb;_.gC=function BHb(){return aB};_._b=function CHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};_=Klc.prototype;_.zb=function Olc(){O7b(this.c,new Qlc(this.b))};_=Qlc.prototype=Plc.prototype=new R7b;_.gC=function Rlc(){return eH};_.nb=function Slc(){var a,b,c,d,e,f,g,i;this.b=new SNb(60,NDb(this.D.o),1,100000);this.b.X.c=3200;this.c=new SNb(60,NDb(this.D.o),1,100000);this.f=new I6b;a=new OYb(100,32,16);i=new vLb('./static/textures/cube/park2/*.jpg');WKb(i,(BAb(),zAb));f=new jHb;jKb(ir(f.j.b[pQc],166),i);c=new Y4b(f);this.g=new _mb;for(b=0;b<500;++b){d=new K5b(a,c);fTb(d.X,Math.random()*10000-5000);gTb(d.X,Math.random()*10000-5000);LTb(d.X,Math.random()*10000-5000);JTb(d.ab,Math.random()*3+1);TMb(this.E,d);Pmb(this.g,d)}this.E.S=false;g=new VFb;jKb(ir(g.j.b[pQc],166),i);e=new Y4b(g);i0b(e,(b2b(),$1b));d=new K5b(new YXb(100000,100000,100000),e);TMb(this.f,d);this.D.o.O=false};_.ob=function Tlc(a){var b,c,d,e;e=1.0E-4*a;_Sb(this.b.X,(this.d-this.b.X.d)*0.05);aTb(this.b.X,(-this.e-this.b.X.e)*0.05);sNb(this.b,this.E.X);this.c.$.Be(this.b.$);for(b=0,c=this.g.c;b<c;++b){d=ir(Tmb(this.g,b),240);fTb(d.X,5000*Math.cos(e+b));gTb(d.X,5000*Math.sin(e+b*1.1))}KDb(this.D.o);SDb(this.D.o,this.f,this.c,null,false);SDb(this.D.o,this.E,this.b,null,false)};_.cM={265:1};_.b=null;_.c=null;_.d=0;_.e=0;_.f=null;_.g=null;var cB=xfb(mQc,'FresnelShader',zB),bB=xfb(mQc,'FresnelShader_Resources_default_InlineClientBundleGenerator',gy),_A=xfb(mQc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',gy),aB=xfb(mQc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',gy),eH=xfb(iPc,'MaterialsCubemapFresnel$DemoScene',qE);ILc(ge)(28);