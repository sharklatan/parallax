function IGb(){}
function MGb(){}
function PGb(){}
function EGb(){EGb=Nyc;DGb=new IGb}
function RGb(){RGb=Nyc;GGb=new MGb}
function SGb(){SGb=Nyc;HGb=new PGb}
function BGb(){lFb.call(this,(EGb(),DGb))}
function dgc(){a5b.call(this);this.c=0;this.d=0}
QR(735,717,dAc,BGb);_.Jd=function CGb(){_Eb(this,'mRefractionRatio',new gJb((zJb(),lJb),new Qgb(1.02)));_Eb(this,'mFresnelBias',new gJb(lJb,new Qgb(0.1)));_Eb(this,'mFresnelPower',new gJb(lJb,new Qgb(2)));_Eb(this,'mFresnelScale',new gJb(lJb,new Qgb(1)));_Eb(this,kGc,new fJb(rJb))};var DGb;QR(736,1,{},IGb);_.Md=function JGb(){return RGb(),GGb};_.Nd=function KGb(){return SGb(),HGb};var GGb,HGb;QR(737,1,{},MGb);_.bc=function NGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};QR(738,1,{},PGb);_.bc=function QGb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};QR(1100,1,rAc);_.yb=function bgc(){Z4b(this.b,new dgc(this.a))};QR(1101,944,{272:1},dgc);_.mb=function egc(){var a,b,c,d,e,f,g,i,j;this.a=new zMb(60,xDb(this.D.n),1,100000);V1b(this.a._,3200);this.b=new zMb(60,xDb(this.D.n),1,100000);this.e=new d4b;a=new TSb(100,32,16);j=new oKb('./static/textures/cube/park2/*.jpg');PJb(j,(ozb(),mzb));g=new BGb;eJb(ru(YNb(g.i,kGc),174),j);c=new o$b(g);this.f=new Cnb;for(b=0;b<500;b++){d=new u3b(a,c);h1b(d._,Xhb()*10000-5000);i1b(d._,Xhb()*10000-5000);V1b(d._,Xhb()*10000-5000);S1b(d.eb,Xhb()*3+1);ALb(this.F,d);snb(this.f,d)}this.F.W=false;i=new NFb;eJb(ru(YNb(i.i,kGc),174),j);f=new o$b(i);CVb(f,(pXb(),mXb));e=new u3b(new cSb(100000,100000,100000),f);ALb(this.e,e);this.D.n.Y=false};_.nb=function fgc(a){var b,c,d,e;e=1.0E-4*a;c1b(this.a._,(this.c-this.a._.c)*0.05);d1b(this.a._,(-this.d-this.a._.d)*0.05);ZLb(this.a,this.F._);k_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=ru(vnb(this.f,b),251);h1b(d._,5000*Math.cos(e+b));i1b(d._,5000*Math.sin(e+b*1.1))}sDb(this.D.n);JDb(this.D.n,this.e,this.b,null,false);JDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var VL=Egb(aFc,'MaterialsCubemapFresnel$DemoScene',1101),PF=Egb(lGc,'FresnelShader',735),OF=Egb(lGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',736),MF=Egb(lGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',737),NF=Egb(lGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',738);DAc(xi)(21);