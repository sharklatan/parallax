function dmc(){}
function hmc(){}
function kmc(){}
function _oc(){}
function dpc(){}
function gpc(){}
function ipc(){ipc=nzc;Zoc=new dpc}
function jpc(){jpc=nzc;$oc=new gpc}
function _lc(){_lc=nzc;$lc=new dmc}
function mmc(){mmc=nzc;bmc=new hmc}
function nmc(){nmc=nzc;cmc=new kmc}
function Xoc(){Xoc=nzc;Woc=new _oc}
function Lec(a,b){this.a=a;this.b=b}
function Hec(){k5b.call(this);this.d=0;this.e=0}
function Ylc(){pFb.call(this,(_lc(),$lc))}
function Soc(){pFb.call(this,(Xoc(),Woc))}
function Gec(a,b){var c,d,e,f,g,i;d=new jKb(kGc);d.k=4;p1b(d.B,0.998,0.998);p1b(d.A,0.001,0.001);dKb(d,(yCb(),xCb));eKb(d,xCb);TJb(d,(rzb(),pzb));e=new jKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');p1b(e.B,0.998,0.998);p1b(e.A,0.001,0.001);dKb(e,xCb);eKb(e,xCb);TJb(e,pzb);c=new jKb('./static/models/obj/leeperrysmith/Map-COL.jpg');p1b(c.B,0.998,0.998);p1b(c.A,0.001,0.001);dKb(c,xCb);eKb(c,xCb);TJb(c,pzb);g=new Soc;i=g.i;iJb(qu(i.a[nGc],174),(Xfb(),Xfb(),Wfb));iJb(qu(i.a[oGc],174),Wfb);iJb(qu(i.a[pGc],174),a.b.e);iJb(qu(i.a[qGc],174),c);iJb(qu(i.a[rGc],174),d);iJb(qu(i.a[sGc],174),e);i_b(qu(qu(i.a[tGc],174).d,241),10526880);i_b(qu(qu(i.a[uGc],174).d,241),10526880);i_b(qu(qu(i.a[vGc],174).d,241),10526880);iJb(qu(i.a[wGc],174),new Tgb(0.145));iJb(qu(i.a[xGc],174),new Tgb(0.75));iJb(qu(i.a[yGc],174),new Tgb(16));Q2b(qu(qu(i.a[zGc],174).d,249),0.001,0.001,0.998,0.998);f=new w$b(g);f.c=true;a.c=new D3b(b,f);r1b(a.c._,-50);_1b(a.c.eb,100);JLb(a.c,true);a.c.U=true;ELb(a.F,a.c)}
var nGc='enableBump',pGc='tBeckmann',wGc='uRoughness',xGc='uSpecularBrightness';TR(1077,1,TAc);_.yb=function Eec(){h5b(this.b,new Hec(this.a))};TR(1078,944,{269:1},Hec);_.mb=function Iec(){var b,c,d,e,f,g,i,j;this.a=new DMb(27,BDb(this.D.n),1,10000);c2b(this.a._,1200);ELb(this.F,new bUb(5592405));f=new WUb(16777215,1.5,1000);a2b(f._,0,0,600);ELb(this.F,f);i=new cVb(1);a2b(i._,0.05,0.05,1);ELb(this.F,i);i._.kf(700);i.S=true;i.t=true;i.I=2048;i.G=2048;i.A=200;i.w=1500;i.d=40;i.u=-0.005;i.D=0.15;b=new EUb(16777215,0.85);a2b(b._,1,-0.5,1);h_b(b.L,0.6,1,0.85);ELb(this.F,b);b._.kf(500);b.S=true;b.I=2048;b.G=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.D=0.15;c=new EUb(16777215,0.85);a2b(c._,1,-0.5,-1);ELb(this.F,c);new mxc(new Ylc);d=new mxc(new Ixc);d.a=true;j=new GKb(512,512);YJb(j,(gBb(),aBb));WJb(j,(XAb(),VAb));TJb(j,(rzb(),pzb));j.f=false;this.b=new cxc(this.D.n,j);e=new Upc;try{Jpc(e,lGc,new Lec(this,e))}catch(a){a=YQ(a);if(tu(a,46)){sLb();_T(rLb,(lrb(),jrb),mGc)}else throw XQ(a)}YDb(this.D.n,new l_b(5001561),1);g=new SCb(this.D.n,this.F);g.g=false;this.D.n.Y=false;this.D.n.$=true;this.D.n._=true};_.nb=function Jec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){r_b(this.c.cb,0.05*(b-this.c.cb.d));q_b(this.c.cb,0.05*(c-this.c.cb.c))}wDb(this.D.n);NDb(this.D.n,this.F,this.a,null,false)};_.d=0;_.e=0;TR(1079,1,{},Lec);_.vf=function Mec(){Gec(this.a,this.b.a)};TR(1179,717,FAc,Ylc);_.Jd=function Zlc(){};var $lc;TR(1180,1,{},dmc);_.Md=function emc(){return mmc(),bmc};_.Nd=function fmc(){return nmc(),cmc};var bmc,cmc;TR(1181,1,{},hmc);_.bc=function imc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};TR(1182,1,{},kmc);_.bc=function lmc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};TR(1246,717,FAc,Soc);_.Jd=function Toc(){kFb(this,HJb());kFb(this,IJb());kFb(this,JJb());dFb(this,nGc,new kJb((DJb(),sJb),zhb(0)));dFb(this,oGc,new kJb(sJb,zhb(0)));dFb(this,qGc,new jJb(vJb));dFb(this,pGc,new jJb(vJb));dFb(this,uGc,new kJb(oJb,new l_b(15658734)));dFb(this,vGc,new kJb(oJb,new l_b(1118481)));dFb(this,tGc,new kJb(oJb,new l_b(328965)));dFb(this,AGc,new kJb(pJb,new Tgb(1)));dFb(this,wGc,new kJb(pJb,new Tgb(0.15)));dFb(this,xGc,new kJb(pJb,new Tgb(0.75)));dFb(this,rGc,new jJb(vJb));dFb(this,yGc,new kJb(pJb,new Tgb(1)));dFb(this,sGc,new jJb(vJb));dFb(this,zGc,new kJb(BJb,new U2b(0,0,1,1)));dFb(this,'uWrapRGB',new kJb(zJb,new g2b(0.75,0.375,0.1875)))};_.Kd=function Uoc(a){var b,c;c=new bob(gu(NP,szc,1,[BGc,CGc,DGc]));b=new bob(gu(NP,szc,1,[EGc,FGc,GGc]));mFb(this,uFb(a,gu(QP,szc,121,[c,b])))};_.Ld=function Voc(a){var b,c;c=new bob(gu(NP,szc,1,[HGc]));b=new bob(gu(NP,szc,1,[IGc]));nFb(this,uFb(a,gu(QP,szc,121,[c,b])))};var Woc;TR(1247,1,{},_oc);_.Md=function apc(){return ipc(),Zoc};_.Nd=function bpc(){return jpc(),$oc};var Zoc,$oc;TR(1248,1,{},dpc);_.bc=function epc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};TR(1249,1,{},gpc);_.bc=function hpc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var xL=Hgb(CFc,'MaterialsBumpmapSkin$DemoScene',1078),wL=Hgb(CFc,'MaterialsBumpmapSkin$DemoScene$1',1079),pN=Hgb(vFc,'BeckmannShader',1179),oN=Hgb(vFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1180),mN=Hgb(vFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1181),nN=Hgb(vFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1182),EN=Hgb(vFc,'SkinSimpleShader',1246),DN=Hgb(vFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1247),BN=Hgb(vFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1248),CN=Hgb(vFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1249);dBc(wi)(17);