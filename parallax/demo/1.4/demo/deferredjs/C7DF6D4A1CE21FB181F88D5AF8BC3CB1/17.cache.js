function mmc(){}
function qmc(){}
function tmc(){}
function ipc(){}
function mpc(){}
function ppc(){}
function epc(){epc=wzc;dpc=new ipc}
function rpc(){rpc=wzc;gpc=new mpc}
function spc(){spc=wzc;hpc=new ppc}
function imc(){imc=wzc;hmc=new mmc}
function vmc(){vmc=wzc;kmc=new qmc}
function wmc(){wmc=wzc;lmc=new tmc}
function Uec(a,b){this.a=a;this.b=b}
function Qec(){w5b.call(this);this.d=0;this.e=0}
function fmc(){BFb.call(this,(imc(),hmc))}
function _oc(){BFb.call(this,(epc(),dpc))}
function Pec(a,b){var c,d,e,f,g,i;d=new vKb(DGc);d.k=4;B1b(d.B,0.998,0.998);B1b(d.A,0.001,0.001);pKb(d,(KCb(),JCb));qKb(d,JCb);dKb(d,(Dzb(),Bzb));e=new vKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');B1b(e.B,0.998,0.998);B1b(e.A,0.001,0.001);pKb(e,JCb);qKb(e,JCb);dKb(e,Bzb);c=new vKb('./static/models/obj/leeperrysmith/Map-COL.jpg');B1b(c.B,0.998,0.998);B1b(c.A,0.001,0.001);pKb(c,JCb);qKb(c,JCb);dKb(c,Bzb);g=new _oc;i=g.i;uJb(Au(i.a[GGc],174),(hgb(),hgb(),ggb));uJb(Au(i.a[HGc],174),ggb);uJb(Au(i.a[IGc],174),a.b.e);uJb(Au(i.a[JGc],174),c);uJb(Au(i.a[KGc],174),d);uJb(Au(i.a[LGc],174),e);u_b(Au(Au(i.a[MGc],174).d,241),10526880);u_b(Au(Au(i.a[NGc],174).d,241),10526880);u_b(Au(Au(i.a[OGc],174).d,241),10526880);uJb(Au(i.a[PGc],174),new dhb(0.145));uJb(Au(i.a[QGc],174),new dhb(0.75));uJb(Au(i.a[RGc],174),new dhb(16));a3b(Au(Au(i.a[SGc],174).d,249),0.001,0.001,0.998,0.998);f=new I$b(g);f.c=true;a.c=new P3b(b,f);D1b(a.c._,-50);l2b(a.c.eb,100);VLb(a.c,true);a.c.U=true;QLb(a.F,a.c)}
var GGc='enableBump',IGc='tBeckmann',PGc='uRoughness',QGc='uSpecularBrightness';cS(1076,1,aBc);_.yb=function Nec(){t5b(this.b,new Qec(this.a))};cS(1077,943,{269:1},Qec);_.mb=function Rec(){var b,c,d,e,f,g,i,j;this.a=new PMb(27,NDb(this.D.n),1,10000);o2b(this.a._,1200);QLb(this.F,new nUb(5592405));f=new gVb(16777215,1.5,1000);m2b(f._,0,0,600);QLb(this.F,f);i=new oVb(1);m2b(i._,0.05,0.05,1);QLb(this.F,i);i._.kf(700);i.S=true;i.t=true;i.I=2048;i.G=2048;i.A=200;i.w=1500;i.d=40;i.u=-0.005;i.D=0.15;b=new QUb(16777215,0.85);m2b(b._,1,-0.5,1);t_b(b.L,0.6,1,0.85);QLb(this.F,b);b._.kf(500);b.S=true;b.I=2048;b.G=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.D=0.15;c=new QUb(16777215,0.85);m2b(c._,1,-0.5,-1);QLb(this.F,c);new vxc(new fmc);d=new vxc(new Rxc);d.a=true;j=new SKb(512,512);iKb(j,(sBb(),mBb));gKb(j,(hBb(),fBb));dKb(j,(Dzb(),Bzb));j.f=false;this.b=new lxc(this.D.n,j);e=new bqc;try{Spc(e,EGc,new Uec(this,e))}catch(a){a=hR(a);if(Du(a,46)){ELb();kU(DLb,(xrb(),vrb),FGc)}else throw gR(a)}iEb(this.D.n,new x_b(5001561),1);g=new cDb(this.D.n,this.F);g.g=false;this.D.n.Y=false;this.D.n.$=true;this.D.n._=true};_.nb=function Sec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){D_b(this.c.cb,0.05*(b-this.c.cb.d));C_b(this.c.cb,0.05*(c-this.c.cb.c))}IDb(this.D.n);ZDb(this.D.n,this.F,this.a,null,false)};_.d=0;_.e=0;cS(1078,1,{},Uec);_.vf=function Vec(){Pec(this.a,this.b.a)};cS(1178,716,OAc,fmc);_.Jd=function gmc(){};var hmc;cS(1179,1,{},mmc);_.Md=function nmc(){return vmc(),kmc};_.Nd=function omc(){return wmc(),lmc};var kmc,lmc;cS(1180,1,{},qmc);_.bc=function rmc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};cS(1181,1,{},tmc);_.bc=function umc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};cS(1245,716,OAc,_oc);_.Jd=function apc(){wFb(this,TJb());wFb(this,UJb());wFb(this,VJb());pFb(this,GGc,new wJb((PJb(),EJb),Lhb(0)));pFb(this,HGc,new wJb(EJb,Lhb(0)));pFb(this,JGc,new vJb(HJb));pFb(this,IGc,new vJb(HJb));pFb(this,NGc,new wJb(AJb,new x_b(15658734)));pFb(this,OGc,new wJb(AJb,new x_b(1118481)));pFb(this,MGc,new wJb(AJb,new x_b(328965)));pFb(this,TGc,new wJb(BJb,new dhb(1)));pFb(this,PGc,new wJb(BJb,new dhb(0.15)));pFb(this,QGc,new wJb(BJb,new dhb(0.75)));pFb(this,KGc,new vJb(HJb));pFb(this,RGc,new wJb(BJb,new dhb(1)));pFb(this,LGc,new vJb(HJb));pFb(this,SGc,new wJb(NJb,new e3b(0,0,1,1)));pFb(this,'uWrapRGB',new wJb(LJb,new s2b(0.75,0.375,0.1875)))};_.Kd=function bpc(a){var b,c;c=new nob(qu(YP,Bzc,1,[UGc,VGc,WGc]));b=new nob(qu(YP,Bzc,1,[XGc,YGc,ZGc]));yFb(this,GFb(a,qu(_P,Bzc,121,[c,b])))};_.Ld=function cpc(a){var b,c;c=new nob(qu(YP,Bzc,1,[$Gc]));b=new nob(qu(YP,Bzc,1,[_Gc]));zFb(this,GFb(a,qu(_P,Bzc,121,[c,b])))};var dpc;cS(1246,1,{},ipc);_.Md=function jpc(){return rpc(),gpc};_.Nd=function kpc(){return spc(),hpc};var gpc,hpc;cS(1247,1,{},mpc);_.bc=function npc(){return '#define USE_BUMPMAP\n#extension GL_OES_standard_derivatives : enable\n\nuniform bool enableBump;\nuniform bool enableSpecular;\n\nuniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 specular;\nuniform float opacity;\n\nuniform float uRoughness;\nuniform float uSpecularBrightness;\n\nuniform vec3 uWrapRGB;\n\nuniform sampler2D tDiffuse;\nuniform sampler2D tBeckmann;\n\nuniform sampler2D specularMap;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\n\t\t\t// Fresnel term\n\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\n\n\tfloat base = 1.0 - dot( V, H );\n\tfloat exponential = pow( base, 5.0 );\n\n\treturn exponential + F0 * ( 1.0 - exponential );\n\n}\n\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\n\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\n\t\t\t\t\t\tfloat m,  \t// Roughness\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\n\t\t\t\t\t\t) {\n\n\tfloat result = 0.0;\n\tfloat ndotl = dot( N, L );\n\n\tif( ndotl > 0.0 ) {\n\n\t\tvec3 h = L + V; // Unnormalized half-way vector\n\t\tvec3 H = normalize( h );\n\n\t\tfloat ndoth = dot( N, H );\n\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\n\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\n\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\n\n\t}\n\n\treturn result;\n\n}\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\n\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\n\tcolDiffuse.rgb *= colDiffuse.rgb;\n\n\tgl_FragColor = gl_FragColor * colDiffuse;\n\n\tvec3 normal = normalize( vNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\tfloat specularStrength;\n\n\tif ( enableSpecular ) {\n\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\t\tspecularStrength = texelSpecular.r;\n\n\t} else {\n\n\t\tspecularStrength = 1.0;\n\n\t}\n\n\t#ifdef USE_BUMPMAP\n\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n\t#endif\n\n\t\t\t\t// point lights\n\n\tvec3 specularTotal = vec3( 0.0 );\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// directional lights\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirTotal = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\t\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = -lVector;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// all lights contribution summation\n\n\tvec3 totalLight = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalLight += dirTotal;\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalLight += pointTotal;\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalLight += hemiTotal;\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\n\n[*]\n\n}\n'};cS(1248,1,{},ppc);_.bc=function qpc(){return 'uniform vec4 offsetRepeat;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvNormal = normalize( normalMatrix * normal );\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n[*]\n\n}\n'};var IL=Tgb(VFc,'MaterialsBumpmapSkin$DemoScene',1077),HL=Tgb(VFc,'MaterialsBumpmapSkin$DemoScene$1',1078),AN=Tgb(OFc,'BeckmannShader',1178),zN=Tgb(OFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1179),xN=Tgb(OFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1180),yN=Tgb(OFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1181),PN=Tgb(OFc,'SkinSimpleShader',1245),ON=Tgb(OFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1246),MN=Tgb(OFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1247),NN=Tgb(OFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1248);mBc(wi)(17);