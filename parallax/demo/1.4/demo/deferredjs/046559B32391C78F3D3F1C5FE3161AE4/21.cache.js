function UGb(){}
function YGb(){}
function _Gb(){}
function QGb(){QGb=szc;PGb=new UGb}
function bHb(){bHb=szc;SGb=new YGb}
function cHb(){cHb=szc;TGb=new _Gb}
function NGb(){xFb.call(this,(QGb(),PGb))}
function fgc(){s5b.call(this);this.c=0;this.d=0}
XR(737,719,KAc,NGb);_.Jd=function OGb(){lFb(this,'mRefractionRatio',new sJb((LJb(),xJb),new _gb(1.02)));lFb(this,'mFresnelBias',new sJb(xJb,new _gb(0.1)));lFb(this,'mFresnelPower',new sJb(xJb,new _gb(2)));lFb(this,'mFresnelScale',new sJb(xJb,new _gb(1)));lFb(this,VGc,new rJb(DJb))};var PGb;XR(738,1,{},UGb);_.Md=function VGb(){return bHb(),SGb};_.Nd=function WGb(){return cHb(),TGb};var SGb,TGb;XR(739,1,{},YGb);_.bc=function ZGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};XR(740,1,{},_Gb);_.bc=function aHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};XR(1099,1,YAc);_.yb=function dgc(){p5b(this.b,new fgc(this.a))};XR(1100,946,{273:1},fgc);_.mb=function ggc(){var a,b,c,d,e,f,g,i,j;this.a=new LMb(60,JDb(this.D.n),1,100000);k2b(this.a._,3200);this.b=new LMb(60,JDb(this.D.n),1,100000);this.e=new v4b;a=new bTb(100,32,16);j=new AKb('./static/textures/cube/park2/*.jpg');_Jb(j,(zzb(),xzb));g=new NGb;qJb(su(iOb(g.i,VGc),174),j);c=new E$b(g);this.f=new Nnb;for(b=0;b<500;b++){e=new L3b(a,c);y1b(e._,gib()*10000-5000);z1b(e._,gib()*10000-5000);k2b(e._,gib()*10000-5000);h2b(e.eb,gib()*3+1);MLb(this.F,e);Dnb(this.f,e)}this.F.W=false;i=new ZFb;qJb(su(iOb(i.i,VGc),174),j);f=new E$b(i);MVb(f,(zXb(),wXb));d=new L3b(new oSb(100000,100000,100000),f);MLb(this.e,d);this.D.n.Y=false};_.nb=function hgc(a){var b,c,d,e;e=1.0E-4*a;t1b(this.a._,(this.c-this.a._.c)*0.05);u1b(this.a._,(-this.d-this.a._.d)*0.05);jMb(this.a,this.F._);A_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=su(Gnb(this.f,b),252);y1b(d._,5000*Math.cos(e+b));z1b(d._,5000*Math.sin(e+b*1.1))}EDb(this.D.n);VDb(this.D.n,this.e,this.b,null,false);VDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var VL=Pgb(IFc,'MaterialsCubemapFresnel$DemoScene',1100),SF=Pgb(WGc,'FresnelShader',737),RF=Pgb(WGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',738),PF=Pgb(WGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',739),QF=Pgb(WGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',740);iBc(wi)(21);