function SGb(){}
function WGb(){}
function ZGb(){}
function OGb(){OGb=Xyc;NGb=new SGb}
function _Gb(){_Gb=Xyc;QGb=new WGb}
function aHb(){aHb=Xyc;RGb=new ZGb}
function LGb(){vFb.call(this,(OGb(),NGb))}
function ngc(){k5b.call(this);this.c=0;this.d=0}
UR(737,719,nAc,LGb);_.Jd=function MGb(){jFb(this,'mRefractionRatio',new qJb((JJb(),vJb),new $gb(1.02)));jFb(this,'mFresnelBias',new qJb(vJb,new $gb(0.1)));jFb(this,'mFresnelPower',new qJb(vJb,new $gb(2)));jFb(this,'mFresnelScale',new qJb(vJb,new $gb(1)));jFb(this,wGc,new pJb(BJb))};var NGb;UR(738,1,{},SGb);_.Md=function TGb(){return _Gb(),QGb};_.Nd=function UGb(){return aHb(),RGb};var QGb,RGb;UR(739,1,{},WGb);_.bc=function XGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};UR(740,1,{},ZGb);_.bc=function $Gb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};UR(1102,1,BAc);_.yb=function lgc(){h5b(this.b,new ngc(this.a))};UR(1103,946,{272:1},ngc);_.mb=function ogc(){var a,b,c,d,e,f,g,i,j;this.a=new JMb(60,HDb(this.D.n),1,100000);d2b(this.a._,3200);this.b=new JMb(60,HDb(this.D.n),1,100000);this.e=new n4b;a=new bTb(100,32,16);j=new yKb('./static/textures/cube/park2/*.jpg');ZJb(j,(yzb(),wzb));g=new LGb;oJb(tu(gOb(g.i,wGc),174),j);c=new y$b(g);this.f=new Mnb;for(b=0;b<500;b++){d=new E3b(a,c);r1b(d._,fib()*10000-5000);s1b(d._,fib()*10000-5000);d2b(d._,fib()*10000-5000);a2b(d.eb,fib()*3+1);KLb(this.F,d);Cnb(this.f,d)}this.F.W=false;i=new XFb;oJb(tu(gOb(i.i,wGc),174),j);f=new y$b(i);MVb(f,(zXb(),wXb));e=new E3b(new mSb(100000,100000,100000),f);KLb(this.e,e);this.D.n.Y=false};_.nb=function pgc(a){var b,c,d,e;e=1.0E-4*a;m1b(this.a._,(this.c-this.a._.c)*0.05);n1b(this.a._,(-this.d-this.a._.d)*0.05);hMb(this.a,this.F._);u_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=tu(Fnb(this.f,b),251);r1b(d._,5000*Math.cos(e+b));s1b(d._,5000*Math.sin(e+b*1.1))}CDb(this.D.n);TDb(this.D.n,this.e,this.b,null,false);TDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var ZL=Ogb(mFc,'MaterialsCubemapFresnel$DemoScene',1103),TF=Ogb(xGc,'FresnelShader',737),SF=Ogb(xGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',738),QF=Ogb(xGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',739),RF=Ogb(xGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',740);NAc(xi)(21);