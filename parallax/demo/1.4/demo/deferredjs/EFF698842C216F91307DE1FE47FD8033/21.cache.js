function NGb(){}
function RGb(){}
function UGb(){}
function JGb(){JGb=pzc;IGb=new NGb}
function WGb(){WGb=pzc;LGb=new RGb}
function XGb(){XGb=pzc;MGb=new UGb}
function GGb(){qFb.call(this,(JGb(),IGb))}
function cgc(){m5b.call(this);this.c=0;this.d=0}
UR(735,717,HAc,GGb);_.Jd=function HGb(){eFb(this,'mRefractionRatio',new lJb((EJb(),qJb),new Ugb(1.02)));eFb(this,'mFresnelBias',new lJb(qJb,new Ugb(0.1)));eFb(this,'mFresnelPower',new lJb(qJb,new Ugb(2)));eFb(this,'mFresnelScale',new lJb(qJb,new Ugb(1)));eFb(this,QGc,new kJb(wJb))};var IGb;UR(736,1,{},NGb);_.Md=function OGb(){return WGb(),LGb};_.Nd=function PGb(){return XGb(),MGb};var LGb,MGb;UR(737,1,{},RGb);_.bc=function SGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};UR(738,1,{},UGb);_.bc=function VGb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};UR(1098,1,VAc);_.yb=function agc(){j5b(this.b,new cgc(this.a))};UR(1099,945,{273:1},cgc);_.mb=function dgc(){var a,b,c,d,e,f,g,i,j;this.a=new EMb(60,CDb(this.D.n),1,100000);e2b(this.a._,3200);this.b=new EMb(60,CDb(this.D.n),1,100000);this.e=new p4b;a=new YSb(100,32,16);j=new tKb('./static/textures/cube/park2/*.jpg');UJb(j,(szb(),qzb));g=new GGb;jJb(qu(bOb(g.i,QGc),174),j);c=new z$b(g);this.f=new Gnb;for(b=0;b<500;b++){e=new F3b(a,c);s1b(e._,_hb()*10000-5000);t1b(e._,_hb()*10000-5000);e2b(e._,_hb()*10000-5000);b2b(e.eb,_hb()*3+1);FLb(this.F,e);wnb(this.f,e)}this.F.W=false;i=new SFb;jJb(qu(bOb(i.i,QGc),174),j);f=new z$b(i);HVb(f,(uXb(),rXb));d=new F3b(new hSb(100000,100000,100000),f);FLb(this.e,d);this.D.n.Y=false};_.nb=function egc(a){var b,c,d,e;e=1.0E-4*a;n1b(this.a._,(this.c-this.a._.c)*0.05);o1b(this.a._,(-this.d-this.a._.d)*0.05);cMb(this.a,this.F._);v_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(znb(this.f,b),252);s1b(d._,5000*Math.cos(e+b));t1b(d._,5000*Math.sin(e+b*1.1))}xDb(this.D.n);ODb(this.D.n,this.e,this.b,null,false);ODb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var SL=Igb(EFc,'MaterialsCubemapFresnel$DemoScene',1099),OF=Igb(RGc,'FresnelShader',735),NF=Igb(RGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',736),LF=Igb(RGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',737),MF=Igb(RGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',738);fBc(wi)(21);