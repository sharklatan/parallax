function $Gb(){}
function cHb(){}
function fHb(){}
function hHb(){hHb=Bzc;YGb=new cHb}
function iHb(){iHb=Bzc;ZGb=new fHb}
function WGb(){WGb=Bzc;VGb=new $Gb}
function TGb(){DFb.call(this,(WGb(),VGb))}
function ogc(){y5b.call(this);this.c=0;this.d=0}
cS(734,716,TAc,TGb);_.Jd=function UGb(){rFb(this,'mRefractionRatio',new yJb((RJb(),DJb),new fhb(1.02)));rFb(this,'mFresnelBias',new yJb(DJb,new fhb(0.1)));rFb(this,'mFresnelPower',new yJb(DJb,new fhb(2)));rFb(this,'mFresnelScale',new yJb(DJb,new fhb(1)));rFb(this,mHc,new xJb(JJb))};var VGb;cS(735,1,{},$Gb);_.Md=function _Gb(){return hHb(),YGb};_.Nd=function aHb(){return iHb(),ZGb};var YGb,ZGb;cS(736,1,{},cHb);_.bc=function dHb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};cS(737,1,{},fHb);_.bc=function gHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};cS(1096,1,fBc);_.yb=function mgc(){v5b(this.b,new ogc(this.a))};cS(1097,943,{273:1},ogc);_.mb=function pgc(){var a,b,c,d,e,f,g,i,j;this.a=new RMb(60,PDb(this.D.n),1,100000);q2b(this.a._,3200);this.b=new RMb(60,PDb(this.D.n),1,100000);this.e=new B4b;a=new hTb(100,32,16);j=new GKb('./static/textures/cube/park2/*.jpg');fKb(j,(Fzb(),Dzb));g=new TGb;wJb(Au(oOb(g.i,mHc),174),j);c=new K$b(g);this.f=new Tnb;for(b=0;b<500;b++){e=new R3b(a,c);E1b(e._,mib()*10000-5000);F1b(e._,mib()*10000-5000);q2b(e._,mib()*10000-5000);n2b(e.eb,mib()*3+1);SLb(this.F,e);Jnb(this.f,e)}this.F.W=false;i=new dGb;wJb(Au(oOb(i.i,mHc),174),j);f=new K$b(i);SVb(f,(FXb(),CXb));d=new R3b(new uSb(100000,100000,100000),f);SLb(this.e,d);this.D.n.Y=false};_.nb=function qgc(a){var b,c,d,e;e=1.0E-4*a;z1b(this.a._,(this.c-this.a._.c)*0.05);A1b(this.a._,(-this.d-this.a._.d)*0.05);pMb(this.a,this.F._);G_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=Au(Mnb(this.f,b),252);E1b(d._,5000*Math.cos(e+b));F1b(d._,5000*Math.sin(e+b*1.1))}KDb(this.D.n);_Db(this.D.n,this.e,this.b,null,false);_Db(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var aM=Vgb(_Fc,'MaterialsCubemapFresnel$DemoScene',1097),ZF=Vgb(nHc,'FresnelShader',734),YF=Vgb(nHc,'FresnelShader_Resources_default_InlineClientBundleGenerator',735),WF=Vgb(nHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',736),XF=Vgb(nHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',737);rBc(wi)(21);