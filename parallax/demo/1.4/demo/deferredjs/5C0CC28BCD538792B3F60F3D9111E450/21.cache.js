function sHb(){}
function wHb(){}
function zHb(){}
function oHb(){oHb=xzc;nHb=new sHb}
function BHb(){BHb=xzc;qHb=new wHb}
function CHb(){CHb=xzc;rHb=new zHb}
function lHb(){XFb.call(this,(oHb(),nHb))}
function Pgc(){M5b.call(this);this.d=0;this.e=0}
BS(737,719,QAc,lHb);_.Qd=function mHb(){LFb(this,'mRefractionRatio',new SJb((jKb(),XJb),new zhb(1.02)));LFb(this,'mFresnelBias',new SJb(XJb,new zhb(0.1)));LFb(this,'mFresnelPower',new SJb(XJb,new zhb(2)));LFb(this,'mFresnelScale',new SJb(XJb,new zhb(1)));LFb(this,fHc,new RJb(bKb))};var nHb;BS(738,1,{},sHb);_.Td=function tHb(){return BHb(),qHb};_.Ud=function uHb(){return CHb(),rHb};var qHb,rHb;BS(739,1,{},wHb);_.ic=function xHb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};BS(740,1,{},zHb);_.ic=function AHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};BS(1102,1,cBc);_.Cb=function Ngc(){J5b(this.c,new Pgc(this.b))};BS(1103,946,{272:1},Pgc);_.nb=function Qgc(){var a,b,c,d,e,f,g,i,j;this.b=new jNb(60,hEb(this.F.o),1,100000);F2b(this.b.ab,3200);this.c=new jNb(60,hEb(this.F.o),1,100000);this.f=new P4b;a=new DTb(100,32,16);j=new $Kb('./static/textures/cube/park2/*.jpg');zKb(j,($zb(),Yzb));g=new lHb;QJb(Yu(IOb(g.j,fHc),174),j);c=new $$b(g);this.g=new mob;for(b=0;b<500;b++){d=new e4b(a,c);T1b(d.ab,Gib()*10000-5000);U1b(d.ab,Gib()*10000-5000);F2b(d.ab,Gib()*10000-5000);C2b(d.fb,Gib()*3+1);kMb(this.G,d);cob(this.g,d)}this.G.X=false;i=new xGb;QJb(Yu(IOb(i.j,fHc),174),j);f=new $$b(i);mWb(f,(_Xb(),YXb));e=new e4b(new OSb(100000,100000,100000),f);kMb(this.f,e);this.F.o.Z=false};_.ob=function Rgc(a){var b,c,d,e;e=1.0E-4*a;O1b(this.b.ab,(this.d-this.b.ab.d)*0.05);P1b(this.b.ab,(-this.e-this.b.ab.e)*0.05);JMb(this.b,this.G.ab);W_b(this.c.db,this.b.db);for(b=0,c=this.g.c;b<c;b++){d=Yu(fob(this.g,b),251);T1b(d.ab,5000*Math.cos(e+b));U1b(d.ab,5000*Math.sin(e+b*1.1))}cEb(this.F.o);tEb(this.F.o,this.f,this.c,null,false);tEb(this.F.o,this.G,this.b,null,false)};_.d=0;_.e=0;var HM=nhb(XFc,'MaterialsCubemapFresnel$DemoScene',1103),AG=nhb(gHc,'FresnelShader',737),zG=nhb(gHc,'FresnelShader_Resources_default_InlineClientBundleGenerator',738),xG=nhb(gHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',739),yG=nhb(gHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',740);oBc(Ii)(21);