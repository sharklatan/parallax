function pmc(){}
function tmc(){}
function wmc(){}
function lpc(){}
function ppc(){}
function spc(){}
function hpc(){hpc=zzc;gpc=new lpc}
function upc(){upc=zzc;jpc=new ppc}
function vpc(){vpc=zzc;kpc=new spc}
function lmc(){lmc=zzc;kmc=new pmc}
function ymc(){ymc=zzc;nmc=new tmc}
function zmc(){zmc=zzc;omc=new wmc}
function Xec(a,b){this.b=a;this.c=b}
function Tec(){z5b.call(this);this.e=0;this.f=0}
function cpc(){EFb.call(this,(hpc(),gpc))}
function imc(){EFb.call(this,(lmc(),kmc))}
function Sec(a,b){var c,d,e,f,g,i;d=new yKb(BGc);d.n=4;E1b(d.C,0.998,0.998);E1b(d.B,0.001,0.001);sKb(d,(NCb(),MCb));tKb(d,MCb);gKb(d,(Gzb(),Ezb));e=new yKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');E1b(e.C,0.998,0.998);E1b(e.B,0.001,0.001);sKb(e,MCb);tKb(e,MCb);gKb(e,Ezb);c=new yKb('./static/models/obj/leeperrysmith/Map-COL.jpg');E1b(c.C,0.998,0.998);E1b(c.B,0.001,0.001);sKb(c,MCb);tKb(c,MCb);gKb(c,Ezb);g=new cpc;i=g.j;xJb(Fu(i.b[EGc],174),(kgb(),kgb(),jgb));xJb(Fu(i.b[FGc],174),jgb);xJb(Fu(i.b[GGc],174),a.c.f);xJb(Fu(i.b[HGc],174),c);xJb(Fu(i.b[IGc],174),d);xJb(Fu(i.b[JGc],174),e);x_b(Fu(Fu(i.b[KGc],174).e,241),10526880);x_b(Fu(Fu(i.b[LGc],174).e,241),10526880);x_b(Fu(Fu(i.b[MGc],174).e,241),10526880);xJb(Fu(i.b[NGc],174),new ghb(0.145));xJb(Fu(i.b[OGc],174),new ghb(0.75));xJb(Fu(i.b[PGc],174),new ghb(16));d3b(Fu(Fu(i.b[QGc],174).e,249),0.001,0.001,0.998,0.998);f=new L$b(g);f.d=true;a.d=new S3b(b,f);G1b(a.d.ab,-50);o2b(a.d.fb,100);YLb(a.d,true);a.d.V=true;TLb(a.G,a.d)}
var EGc='enableBump',GGc='tBeckmann',NGc='uRoughness',OGc='uSpecularBrightness';hS(1073,1,eBc);_.Cb=function Qec(){w5b(this.c,new Tec(this.b))};hS(1074,940,{269:1},Tec);_.nb=function Uec(){var b,c,d,e,f,g,i,j;this.b=new SMb(27,QDb(this.F.o),1,10000);r2b(this.b.ab,1200);TLb(this.G,new qUb(5592405));f=new jVb(16777215,1.5,1000);p2b(f.ab,0,0,600);TLb(this.G,f);i=new rVb(1);p2b(i.ab,0.05,0.05,1);TLb(this.G,i);i.ab.nf(700);i.T=true;i.u=true;i.J=2048;i.H=2048;i.B=200;i.A=1500;i.e=40;i.v=-0.005;i.F=0.15;b=new TUb(16777215,0.85);p2b(b.ab,1,-0.5,1);w_b(b.M,0.6,1,0.85);TLb(this.G,b);b.ab.nf(500);b.T=true;b.J=2048;b.H=2048;b.B=200;b.A=1500;b.f=-500;b.g=500;b.i=500;b.e=-500;b.v=-0.005;b.F=0.15;c=new TUb(16777215,0.85);p2b(c.ab,1,-0.5,-1);TLb(this.G,c);new yxc(new imc);d=new yxc(new Uxc);d.b=true;j=new VKb(512,512);lKb(j,(vBb(),pBb));jKb(j,(kBb(),iBb));gKb(j,(Gzb(),Ezb));j.g=false;this.c=new oxc(this.F.o,j);e=new eqc;try{Vpc(e,CGc,new Xec(this,e))}catch(a){a=mR(a);if(Iu(a,46)){HLb();kU(GLb,(Arb(),yrb),DGc)}else throw lR(a)}lEb(this.F.o,new A_b(5001561),1);g=new fDb(this.F.o,this.G);g.i=false;this.F.o.Z=false;this.F.o._=true;this.F.o.ab=true};_.ob=function Vec(a){var b,c;b=this.e*0.001;c=this.f*0.001;if(this.d){G_b(this.d.db,0.05*(b-this.d.db.e));F_b(this.d.db,0.05*(c-this.d.db.d))}LDb(this.F.o);aEb(this.F.o,this.G,this.b,null,false)};_.e=0;_.f=0;hS(1075,1,{},Xec);_.yf=function Yec(){Sec(this.b,this.c.b)};hS(1175,713,SAc,imc);_.Md=function jmc(){};var kmc;hS(1176,1,{},pmc);_.Pd=function qmc(){return ymc(),nmc};_.Qd=function rmc(){return zmc(),omc};var nmc,omc;hS(1177,1,{},tmc);_.ec=function umc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};hS(1178,1,{},wmc);_.ec=function xmc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};hS(1242,713,SAc,cpc);_.Md=function dpc(){zFb(this,WJb());zFb(this,XJb());zFb(this,YJb());sFb(this,EGc,new zJb((SJb(),HJb),Ohb(0)));sFb(this,FGc,new zJb(HJb,Ohb(0)));sFb(this,HGc,new yJb(KJb));sFb(this,GGc,new yJb(KJb));sFb(this,LGc,new zJb(DJb,new A_b(15658734)));sFb(this,MGc,new zJb(DJb,new A_b(1118481)));sFb(this,KGc,new zJb(DJb,new A_b(328965)));sFb(this,RGc,new zJb(EJb,new ghb(1)));sFb(this,NGc,new zJb(EJb,new ghb(0.15)));sFb(this,OGc,new zJb(EJb,new ghb(0.75)));sFb(this,IGc,new yJb(KJb));sFb(this,PGc,new zJb(EJb,new ghb(1)));sFb(this,JGc,new yJb(KJb));sFb(this,QGc,new zJb(QJb,new h3b(0,0,1,1)));sFb(this,'uWrapRGB',new zJb(OJb,new v2b(0.75,0.375,0.1875)))};_.Nd=function epc(a){var b,c;c=new qob(vu(bQ,Fzc,1,[SGc,TGc,UGc]));b=new qob(vu(bQ,Fzc,1,[VGc,WGc,XGc]));BFb(this,JFb(a,vu(eQ,Fzc,121,[c,b])))};_.Od=function fpc(a){var b,c;c=new qob(vu(bQ,Fzc,1,[YGc]));b=new qob(vu(bQ,Fzc,1,[ZGc]));CFb(this,JFb(a,vu(eQ,Fzc,121,[c,b])))};var gpc;hS(1243,1,{},lpc);_.Pd=function mpc(){return upc(),jpc};_.Qd=function npc(){return vpc(),kpc};var jpc,kpc;hS(1244,1,{},ppc);_.ec=function qpc(){return '#define USE_BUMPMAP\n#extension GL_OES_standard_derivatives : enable\n\nuniform bool enableBump;\nuniform bool enableSpecular;\n\nuniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 specular;\nuniform float opacity;\n\nuniform float uRoughness;\nuniform float uSpecularBrightness;\n\nuniform vec3 uWrapRGB;\n\nuniform sampler2D tDiffuse;\nuniform sampler2D tBeckmann;\n\nuniform sampler2D specularMap;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\nvarying vec3 vViewPosition;\n\n[*]\n\n\t\t\t// Fresnel term\n\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\n\n\tfloat base = 1.0 - dot( V, H );\n\tfloat exponential = pow( base, 5.0 );\n\n\treturn exponential + F0 * ( 1.0 - exponential );\n\n}\n\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\n\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\n\t\t\t\t\t\tfloat m,  \t// Roughness\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\n\t\t\t\t\t\t) {\n\n\tfloat result = 0.0;\n\tfloat ndotl = dot( N, L );\n\n\tif( ndotl > 0.0 ) {\n\n\t\tvec3 h = L + V; // Unnormalized half-way vector\n\t\tvec3 H = normalize( h );\n\n\t\tfloat ndoth = dot( N, H );\n\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\n\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\n\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\n\n\t}\n\n\treturn result;\n\n}\n\nvoid main() {\n\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\n\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\n\tcolDiffuse.rgb *= colDiffuse.rgb;\n\n\tgl_FragColor = gl_FragColor * colDiffuse;\n\n\tvec3 normal = normalize( vNormal );\n\tvec3 viewPosition = normalize( vViewPosition );\n\n\tfloat specularStrength;\n\n\tif ( enableSpecular ) {\n\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\t\tspecularStrength = texelSpecular.r;\n\n\t} else {\n\n\t\tspecularStrength = 1.0;\n\n\t}\n\n\t#ifdef USE_BUMPMAP\n\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n\t#endif\n\n\t\t\t\t// point lights\n\n\tvec3 specularTotal = vec3( 0.0 );\n\n\t#if MAX_POINT_LIGHTS > 0\n\n\t\tvec3 pointTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\t\tfloat lDistance = 1.0;\n\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// directional lights\n\n\t#if MAX_DIR_LIGHTS > 0\n\n\t\tvec3 dirTotal = vec3( 0.0 );\n\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\n\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// hemisphere lights\n\n\t#if MAX_HEMI_LIGHTS > 0\n\n\t\tvec3 hemiTotal = vec3( 0.0 );\n\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t\t\t\t\t// specular (sky light)\n\n\t\t\tfloat hemiSpecularWeight = 0.0;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\t\t\t\t// specular (ground light)\n\n\t\t\tvec3 lVectorGround = -lVector;\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\n\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\n\n\t\t}\n\n\t#endif\n\n\t\t\t\t// all lights contribution summation\n\n\tvec3 totalLight = vec3( 0.0 );\n\n\t#if MAX_DIR_LIGHTS > 0\n\t\ttotalLight += dirTotal;\n\t#endif\n\n\t#if MAX_POINT_LIGHTS > 0\n\t\ttotalLight += pointTotal;\n\t#endif\n\n\t#if MAX_HEMI_LIGHTS > 0\n\t\ttotalLight += hemiTotal;\n\t#endif\n\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\n\n[*]\n\n}\n'};hS(1245,1,{},spc);_.ec=function tpc(){return 'uniform vec4 offsetRepeat;\n\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\nvarying vec3 vViewPosition;\n\n[*]\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\tvViewPosition = -mvPosition.xyz;\n\n\tvNormal = normalize( normalMatrix * normal );\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n[*]\n\n}\n'};var NL=Wgb(TFc,'MaterialsBumpmapSkin$DemoScene',1074),ML=Wgb(TFc,'MaterialsBumpmapSkin$DemoScene$1',1075),FN=Wgb(MFc,'BeckmannShader',1175),EN=Wgb(MFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1176),CN=Wgb(MFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1177),DN=Wgb(MFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1178),UN=Wgb(MFc,'SkinSimpleShader',1242),TN=Wgb(MFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1243),RN=Wgb(MFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1244),SN=Wgb(MFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1245);qBc(Gi)(17);