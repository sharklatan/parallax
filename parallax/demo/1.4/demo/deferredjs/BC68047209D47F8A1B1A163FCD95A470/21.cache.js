function WGb(){}
function $Gb(){}
function bHb(){}
function dHb(){dHb=xzc;UGb=new $Gb}
function eHb(){eHb=xzc;VGb=new bHb}
function SGb(){SGb=xzc;RGb=new WGb}
function PGb(){zFb.call(this,(SGb(),RGb))}
function kgc(){u5b.call(this);this.c=0;this.d=0}
XR(737,719,PAc,PGb);_.Jd=function QGb(){nFb(this,'mRefractionRatio',new uJb((NJb(),zJb),new bhb(1.02)));nFb(this,'mFresnelBias',new uJb(zJb,new bhb(0.1)));nFb(this,'mFresnelPower',new uJb(zJb,new bhb(2)));nFb(this,'mFresnelScale',new uJb(zJb,new bhb(1)));nFb(this,_Gc,new tJb(FJb))};var RGb;XR(738,1,{},WGb);_.Md=function XGb(){return dHb(),UGb};_.Nd=function YGb(){return eHb(),VGb};var UGb,VGb;XR(739,1,{},$Gb);_.bc=function _Gb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};XR(740,1,{},bHb);_.bc=function cHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};XR(1099,1,bBc);_.yb=function igc(){r5b(this.b,new kgc(this.a))};XR(1100,946,{273:1},kgc);_.mb=function lgc(){var a,b,c,d,e,f,g,i,j;this.a=new NMb(60,LDb(this.D.n),1,100000);m2b(this.a._,3200);this.b=new NMb(60,LDb(this.D.n),1,100000);this.e=new x4b;a=new dTb(100,32,16);j=new CKb('./static/textures/cube/park2/*.jpg');bKb(j,(Bzb(),zzb));g=new PGb;sJb(su(kOb(g.i,_Gc),174),j);c=new G$b(g);this.f=new Pnb;for(b=0;b<500;b++){e=new N3b(a,c);A1b(e._,iib()*10000-5000);B1b(e._,iib()*10000-5000);m2b(e._,iib()*10000-5000);j2b(e.eb,iib()*3+1);OLb(this.F,e);Fnb(this.f,e)}this.F.W=false;i=new _Fb;sJb(su(kOb(i.i,_Gc),174),j);f=new G$b(i);OVb(f,(BXb(),yXb));d=new N3b(new qSb(100000,100000,100000),f);OLb(this.e,d);this.D.n.Y=false};_.nb=function mgc(a){var b,c,d,e;e=1.0E-4*a;v1b(this.a._,(this.c-this.a._.c)*0.05);w1b(this.a._,(-this.d-this.a._.d)*0.05);lMb(this.a,this.F._);C_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=su(Inb(this.f,b),252);A1b(d._,5000*Math.cos(e+b));B1b(d._,5000*Math.sin(e+b*1.1))}GDb(this.D.n);XDb(this.D.n,this.e,this.b,null,false);XDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var VL=Rgb(OFc,'MaterialsCubemapFresnel$DemoScene',1100),SF=Rgb(aHc,'FresnelShader',737),RF=Rgb(aHc,'FresnelShader_Resources_default_InlineClientBundleGenerator',738),PF=Rgb(aHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',739),QF=Rgb(aHc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',740);nBc(wi)(21);