function WGb(){}
function $Gb(){}
function bHb(){}
function dHb(){dHb=_yc;UGb=new $Gb}
function eHb(){eHb=_yc;VGb=new bHb}
function SGb(){SGb=_yc;RGb=new WGb}
function PGb(){zFb.call(this,(SGb(),RGb))}
function rgc(){o5b.call(this);this.c=0;this.d=0}
_R(734,716,rAc,PGb);_.Jd=function QGb(){nFb(this,'mRefractionRatio',new uJb((NJb(),zJb),new chb(1.02)));nFb(this,'mFresnelBias',new uJb(zJb,new chb(0.1)));nFb(this,'mFresnelPower',new uJb(zJb,new chb(2)));nFb(this,'mFresnelScale',new uJb(zJb,new chb(1)));nFb(this,JGc,new tJb(FJb))};var RGb;_R(735,1,{},WGb);_.Md=function XGb(){return dHb(),UGb};_.Nd=function YGb(){return eHb(),VGb};var UGb,VGb;_R(736,1,{},$Gb);_.bc=function _Gb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};_R(737,1,{},bHb);_.bc=function cHb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};_R(1099,1,FAc);_.yb=function pgc(){l5b(this.b,new rgc(this.a))};_R(1100,943,{272:1},rgc);_.mb=function sgc(){var a,b,c,d,e,f,g,i,j;this.a=new NMb(60,LDb(this.D.n),1,100000);h2b(this.a._,3200);this.b=new NMb(60,LDb(this.D.n),1,100000);this.e=new r4b;a=new fTb(100,32,16);j=new CKb('./static/textures/cube/park2/*.jpg');bKb(j,(Czb(),Azb));g=new PGb;sJb(Bu(kOb(g.i,JGc),174),j);c=new C$b(g);this.f=new Qnb;for(b=0;b<500;b++){e=new I3b(a,c);v1b(e._,jib()*10000-5000);w1b(e._,jib()*10000-5000);h2b(e._,jib()*10000-5000);e2b(e.eb,jib()*3+1);OLb(this.F,e);Gnb(this.f,e)}this.F.W=false;i=new _Fb;sJb(Bu(kOb(i.i,JGc),174),j);f=new C$b(i);QVb(f,(DXb(),AXb));d=new I3b(new qSb(100000,100000,100000),f);OLb(this.e,d);this.D.n.Y=false};_.nb=function tgc(a){var b,c,d,e;e=1.0E-4*a;q1b(this.a._,(this.c-this.a._.c)*0.05);r1b(this.a._,(-this.d-this.a._.d)*0.05);lMb(this.a,this.F._);y_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=Bu(Jnb(this.f,b),251);v1b(d._,5000*Math.cos(e+b));w1b(d._,5000*Math.sin(e+b*1.1))}GDb(this.D.n);XDb(this.D.n,this.e,this.b,null,false);XDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var eM=Sgb(zFc,'MaterialsCubemapFresnel$DemoScene',1100),$F=Sgb(KGc,'FresnelShader',734),ZF=Sgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',735),XF=Sgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',736),YF=Sgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',737);RAc(xi)(21);