function KGb(){}
function OGb(){}
function RGb(){}
function GGb(){GGb=izc;FGb=new KGb}
function TGb(){TGb=izc;IGb=new OGb}
function UGb(){UGb=izc;JGb=new RGb}
function DGb(){nFb.call(this,(GGb(),FGb))}
function Xfc(){i5b.call(this);this.c=0;this.d=0}
TR(735,717,AAc,DGb);_.Jd=function EGb(){bFb(this,'mRefractionRatio',new iJb((BJb(),nJb),new Rgb(1.02)));bFb(this,'mFresnelBias',new iJb(nJb,new Rgb(0.1)));bFb(this,'mFresnelPower',new iJb(nJb,new Rgb(2)));bFb(this,'mFresnelScale',new iJb(nJb,new Rgb(1)));bFb(this,JGc,new hJb(tJb))};var FGb;TR(736,1,{},KGb);_.Md=function LGb(){return TGb(),IGb};_.Nd=function MGb(){return UGb(),JGb};var IGb,JGb;TR(737,1,{},OGb);_.bc=function PGb(){return 'uniform samplerCube tCube;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\r\n\tvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\r\n\r\n\trefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\r\n\trefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\r\n\trefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\r\n\trefractedColor.a = 1.0;\r\n\r\n\tgl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\r\n\r\n}\r\n'};TR(738,1,{},RGb);_.bc=function SGb(){return 'uniform float mRefractionRatio;\r\nuniform float mFresnelBias;\r\nuniform float mFresnelScale;\r\nuniform float mFresnelPower;\r\n\r\nvarying vec3 vReflect;\r\nvarying vec3 vRefract[3];\r\nvarying float vReflectionFactor;\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 mPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvec3 nWorld = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n\r\n\tvec3 I = mPosition.xyz - cameraPosition;\r\n\r\n\tvReflect = reflect( I, nWorld );\r\n\tvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\r\n\tvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\r\n\tvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\r\n\tvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n}\r\n'};TR(1097,1,OAc);_.yb=function Vfc(){f5b(this.b,new Xfc(this.a))};TR(1098,944,{273:1},Xfc);_.mb=function Yfc(){var a,b,c,d,e,f,g,i,j;this.a=new BMb(60,zDb(this.D.n),1,100000);a2b(this.a._,3200);this.b=new BMb(60,zDb(this.D.n),1,100000);this.e=new l4b;a=new TSb(100,32,16);j=new qKb('./static/textures/cube/park2/*.jpg');RJb(j,(pzb(),nzb));g=new DGb;gJb(qu($Nb(g.i,JGc),174),j);c=new u$b(g);this.f=new Dnb;for(b=0;b<500;b++){d=new B3b(a,c);o1b(d._,Yhb()*10000-5000);p1b(d._,Yhb()*10000-5000);a2b(d._,Yhb()*10000-5000);Z1b(d.eb,Yhb()*3+1);CLb(this.F,d);tnb(this.f,d)}this.F.W=false;i=new PFb;gJb(qu($Nb(i.i,JGc),174),j);f=new u$b(i);CVb(f,(pXb(),mXb));e=new B3b(new eSb(100000,100000,100000),f);CLb(this.e,e);this.D.n.Y=false};_.nb=function Zfc(a){var b,c,d,e;e=1.0E-4*a;j1b(this.a._,(this.c-this.a._.c)*0.05);k1b(this.a._,(-this.d-this.a._.d)*0.05);_Lb(this.a,this.F._);q_b(this.b.cb,this.a.cb);for(b=0,c=this.f.b;b<c;b++){d=qu(wnb(this.f,b),252);o1b(d._,5000*Math.cos(e+b));p1b(d._,5000*Math.sin(e+b*1.1))}uDb(this.D.n);LDb(this.D.n,this.e,this.b,null,false);LDb(this.D.n,this.F,this.a,null,false)};_.c=0;_.d=0;var RL=Fgb(wFc,'MaterialsCubemapFresnel$DemoScene',1098),OF=Fgb(KGc,'FresnelShader',735),NF=Fgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator',736),LF=Fgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$1',737),MF=Fgb(KGc,'FresnelShader_Resources_default_InlineClientBundleGenerator$2',738);$Ac(wi)(21);