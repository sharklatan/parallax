function rmc(){}
function vmc(){}
function ymc(){}
function npc(){}
function rpc(){}
function upc(){}
function jpc(){jpc=Bzc;ipc=new npc}
function wpc(){wpc=Bzc;lpc=new rpc}
function xpc(){xpc=Bzc;mpc=new upc}
function nmc(){nmc=Bzc;mmc=new rmc}
function Amc(){Amc=Bzc;pmc=new vmc}
function Bmc(){Bmc=Bzc;qmc=new ymc}
function kmc(){DFb.call(this,(nmc(),mmc))}
function epc(){DFb.call(this,(jpc(),ipc))}
function Vec(){y5b.call(this);this.d=0;this.e=0}
function Zec(a,b){this.a=a;this.b=b}
function Uec(a,b){var c,d,e,f,g,i;d=new xKb(JGc);d.k=4;D1b(d.B,0.998,0.998);D1b(d.A,0.001,0.001);rKb(d,(MCb(),LCb));sKb(d,LCb);fKb(d,(Fzb(),Dzb));e=new xKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');D1b(e.B,0.998,0.998);D1b(e.A,0.001,0.001);rKb(e,LCb);sKb(e,LCb);fKb(e,Dzb);c=new xKb('./static/models/obj/leeperrysmith/Map-COL.jpg');D1b(c.B,0.998,0.998);D1b(c.A,0.001,0.001);rKb(c,LCb);sKb(c,LCb);fKb(c,Dzb);g=new epc;i=g.i;wJb(Au(i.a[MGc],174),(jgb(),jgb(),igb));wJb(Au(i.a[NGc],174),igb);wJb(Au(i.a[OGc],174),a.b.e);wJb(Au(i.a[PGc],174),c);wJb(Au(i.a[QGc],174),d);wJb(Au(i.a[RGc],174),e);w_b(Au(Au(i.a[SGc],174).d,241),10526880);w_b(Au(Au(i.a[TGc],174).d,241),10526880);w_b(Au(Au(i.a[UGc],174).d,241),10526880);wJb(Au(i.a[VGc],174),new fhb(0.145));wJb(Au(i.a[WGc],174),new fhb(0.75));wJb(Au(i.a[XGc],174),new fhb(16));c3b(Au(Au(i.a[YGc],174).d,249),0.001,0.001,0.998,0.998);f=new K$b(g);f.c=true;a.c=new R3b(b,f);F1b(a.c._,-50);n2b(a.c.eb,100);XLb(a.c,true);a.c.U=true;SLb(a.F,a.c)}
var MGc='enableBump',OGc='tBeckmann',VGc='uRoughness',WGc='uSpecularBrightness';cS(1076,1,fBc);_.yb=function Sec(){v5b(this.b,new Vec(this.a))};cS(1077,943,{269:1},Vec);_.mb=function Wec(){var b,c,d,e,f,g,i,j;this.a=new RMb(27,PDb(this.D.n),1,10000);q2b(this.a._,1200);SLb(this.F,new pUb(5592405));f=new iVb(16777215,1.5,1000);o2b(f._,0,0,600);SLb(this.F,f);i=new qVb(1);o2b(i._,0.05,0.05,1);SLb(this.F,i);i._.kf(700);i.S=true;i.t=true;i.I=2048;i.G=2048;i.A=200;i.w=1500;i.d=40;i.u=-0.005;i.D=0.15;b=new SUb(16777215,0.85);o2b(b._,1,-0.5,1);v_b(b.L,0.6,1,0.85);SLb(this.F,b);b._.kf(500);b.S=true;b.I=2048;b.G=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.D=0.15;c=new SUb(16777215,0.85);o2b(c._,1,-0.5,-1);SLb(this.F,c);new Axc(new kmc);d=new Axc(new Wxc);d.a=true;j=new UKb(512,512);kKb(j,(uBb(),oBb));iKb(j,(jBb(),hBb));fKb(j,(Fzb(),Dzb));j.f=false;this.b=new qxc(this.D.n,j);e=new gqc;try{Xpc(e,KGc,new Zec(this,e))}catch(a){a=hR(a);if(Du(a,46)){GLb();kU(FLb,(zrb(),xrb),LGc)}else throw gR(a)}kEb(this.D.n,new z_b(5001561),1);g=new eDb(this.D.n,this.F);g.g=false;this.D.n.Y=false;this.D.n.$=true;this.D.n._=true};_.nb=function Xec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){F_b(this.c.cb,0.05*(b-this.c.cb.d));E_b(this.c.cb,0.05*(c-this.c.cb.c))}KDb(this.D.n);_Db(this.D.n,this.F,this.a,null,false)};_.d=0;_.e=0;cS(1078,1,{},Zec);_.vf=function $ec(){Uec(this.a,this.b.a)};cS(1178,716,TAc,kmc);_.Jd=function lmc(){};var mmc;cS(1179,1,{},rmc);_.Md=function smc(){return Amc(),pmc};_.Nd=function tmc(){return Bmc(),qmc};var pmc,qmc;cS(1180,1,{},vmc);_.bc=function wmc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};cS(1181,1,{},ymc);_.bc=function zmc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};cS(1245,716,TAc,epc);_.Jd=function fpc(){yFb(this,VJb());yFb(this,WJb());yFb(this,XJb());rFb(this,MGc,new yJb((RJb(),GJb),Nhb(0)));rFb(this,NGc,new yJb(GJb,Nhb(0)));rFb(this,PGc,new xJb(JJb));rFb(this,OGc,new xJb(JJb));rFb(this,TGc,new yJb(CJb,new z_b(15658734)));rFb(this,UGc,new yJb(CJb,new z_b(1118481)));rFb(this,SGc,new yJb(CJb,new z_b(328965)));rFb(this,ZGc,new yJb(DJb,new fhb(1)));rFb(this,VGc,new yJb(DJb,new fhb(0.15)));rFb(this,WGc,new yJb(DJb,new fhb(0.75)));rFb(this,QGc,new xJb(JJb));rFb(this,XGc,new yJb(DJb,new fhb(1)));rFb(this,RGc,new xJb(JJb));rFb(this,YGc,new yJb(PJb,new g3b(0,0,1,1)));rFb(this,'uWrapRGB',new yJb(NJb,new u2b(0.75,0.375,0.1875)))};_.Kd=function gpc(a){var b,c;c=new pob(qu(YP,Gzc,1,[$Gc,_Gc,aHc]));b=new pob(qu(YP,Gzc,1,[bHc,cHc,dHc]));AFb(this,IFb(a,qu(_P,Gzc,121,[c,b])))};_.Ld=function hpc(a){var b,c;c=new pob(qu(YP,Gzc,1,[eHc]));b=new pob(qu(YP,Gzc,1,[fHc]));BFb(this,IFb(a,qu(_P,Gzc,121,[c,b])))};var ipc;cS(1246,1,{},npc);_.Md=function opc(){return wpc(),lpc};_.Nd=function ppc(){return xpc(),mpc};var lpc,mpc;cS(1247,1,{},rpc);_.bc=function spc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};cS(1248,1,{},upc);_.bc=function vpc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var IL=Vgb(_Fc,'MaterialsBumpmapSkin$DemoScene',1077),HL=Vgb(_Fc,'MaterialsBumpmapSkin$DemoScene$1',1078),AN=Vgb(UFc,'BeckmannShader',1178),zN=Vgb(UFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1179),xN=Vgb(UFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1180),yN=Vgb(UFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1181),PN=Vgb(UFc,'SkinSimpleShader',1245),ON=Vgb(UFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1246),MN=Vgb(UFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1247),NN=Vgb(UFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1248);rBc(wi)(17);