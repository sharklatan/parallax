function nmc(){}
function rmc(){}
function umc(){}
function jpc(){}
function npc(){}
function qpc(){}
function fpc(){fpc=xzc;epc=new jpc}
function spc(){spc=xzc;hpc=new npc}
function tpc(){tpc=xzc;ipc=new qpc}
function jmc(){jmc=xzc;imc=new nmc}
function wmc(){wmc=xzc;lmc=new rmc}
function xmc(){xmc=xzc;mmc=new umc}
function Vec(a,b){this.a=a;this.b=b}
function Rec(){u5b.call(this);this.d=0;this.e=0}
function gmc(){zFb.call(this,(jmc(),imc))}
function apc(){zFb.call(this,(fpc(),epc))}
function Qec(a,b){var c,d,e,f,g,i;d=new tKb(wGc);d.k=4;z1b(d.B,0.998,0.998);z1b(d.A,0.001,0.001);nKb(d,(ICb(),HCb));oKb(d,HCb);bKb(d,(Bzb(),zzb));e=new tKb('./static/models/obj/leeperrysmith/Map-SPEC.jpg');z1b(e.B,0.998,0.998);z1b(e.A,0.001,0.001);nKb(e,HCb);oKb(e,HCb);bKb(e,zzb);c=new tKb('./static/models/obj/leeperrysmith/Map-COL.jpg');z1b(c.B,0.998,0.998);z1b(c.A,0.001,0.001);nKb(c,HCb);oKb(c,HCb);bKb(c,zzb);g=new apc;i=g.i;sJb(su(i.a[zGc],174),(fgb(),fgb(),egb));sJb(su(i.a[AGc],174),egb);sJb(su(i.a[BGc],174),a.b.e);sJb(su(i.a[CGc],174),c);sJb(su(i.a[DGc],174),d);sJb(su(i.a[EGc],174),e);s_b(su(su(i.a[FGc],174).d,241),10526880);s_b(su(su(i.a[GGc],174).d,241),10526880);s_b(su(su(i.a[HGc],174).d,241),10526880);sJb(su(i.a[IGc],174),new bhb(0.145));sJb(su(i.a[JGc],174),new bhb(0.75));sJb(su(i.a[KGc],174),new bhb(16));$2b(su(su(i.a[LGc],174).d,249),0.001,0.001,0.998,0.998);f=new G$b(g);f.c=true;a.c=new N3b(b,f);B1b(a.c._,-50);j2b(a.c.eb,100);TLb(a.c,true);a.c.U=true;OLb(a.F,a.c)}
var zGc='enableBump',BGc='tBeckmann',IGc='uRoughness',JGc='uSpecularBrightness';XR(1079,1,bBc);_.yb=function Oec(){r5b(this.b,new Rec(this.a))};XR(1080,946,{269:1},Rec);_.mb=function Sec(){var b,c,d,e,f,g,i,j;this.a=new NMb(27,LDb(this.D.n),1,10000);m2b(this.a._,1200);OLb(this.F,new lUb(5592405));f=new eVb(16777215,1.5,1000);k2b(f._,0,0,600);OLb(this.F,f);i=new mVb(1);k2b(i._,0.05,0.05,1);OLb(this.F,i);i._.kf(700);i.S=true;i.t=true;i.I=2048;i.G=2048;i.A=200;i.w=1500;i.d=40;i.u=-0.005;i.D=0.15;b=new OUb(16777215,0.85);k2b(b._,1,-0.5,1);r_b(b.L,0.6,1,0.85);OLb(this.F,b);b._.kf(500);b.S=true;b.I=2048;b.G=2048;b.A=200;b.w=1500;b.e=-500;b.f=500;b.g=500;b.d=-500;b.u=-0.005;b.D=0.15;c=new OUb(16777215,0.85);k2b(c._,1,-0.5,-1);OLb(this.F,c);new wxc(new gmc);d=new wxc(new Sxc);d.a=true;j=new QKb(512,512);gKb(j,(qBb(),kBb));eKb(j,(fBb(),dBb));bKb(j,(Bzb(),zzb));j.f=false;this.b=new mxc(this.D.n,j);e=new cqc;try{Tpc(e,xGc,new Vec(this,e))}catch(a){a=aR(a);if(vu(a,46)){CLb();dU(BLb,(vrb(),trb),yGc)}else throw _Q(a)}gEb(this.D.n,new v_b(5001561),1);g=new aDb(this.D.n,this.F);g.g=false;this.D.n.Y=false;this.D.n.$=true;this.D.n._=true};_.nb=function Tec(a){var b,c;b=this.d*0.001;c=this.e*0.001;if(this.c){B_b(this.c.cb,0.05*(b-this.c.cb.d));A_b(this.c.cb,0.05*(c-this.c.cb.c))}GDb(this.D.n);XDb(this.D.n,this.F,this.a,null,false)};_.d=0;_.e=0;XR(1081,1,{},Vec);_.vf=function Wec(){Qec(this.a,this.b.a)};XR(1181,719,PAc,gmc);_.Jd=function hmc(){};var imc;XR(1182,1,{},nmc);_.Md=function omc(){return wmc(),lmc};_.Nd=function pmc(){return xmc(),mmc};var lmc,mmc;XR(1183,1,{},rmc);_.bc=function smc(){return 'varying vec2 vUv;\n\nfloat PHBeckmann( float ndoth, float m ) {\n\n\tfloat alpha = acos( ndoth );\n\tfloat ta = tan( alpha );\n\n\tfloat val = 1.0 / ( m * m * pow( ndoth, 4.0 ) ) * exp( -( ta * ta ) / ( m * m ) );\n\treturn val;\n\n}\n\nfloat KSTextureCompute( vec2 tex ) {\n\n\t// Scale the value to fit within [0,1]  invert upon lookup.\n\n\treturn 0.5 * pow( PHBeckmann( tex.x, tex.y ), 0.1 );\n\n}\n\nvoid main() {\n\n\tfloat x = KSTextureCompute( vUv );\n\n\tgl_FragColor = vec4( x, x, x, 1.0 );\n\n}\n'};XR(1184,1,{},umc);_.bc=function vmc(){return 'varying vec2 vUv;\n\nvoid main() {\n\n\tvUv = uv;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}\n'};XR(1248,719,PAc,apc);_.Jd=function bpc(){uFb(this,RJb());uFb(this,SJb());uFb(this,TJb());nFb(this,zGc,new uJb((NJb(),CJb),Jhb(0)));nFb(this,AGc,new uJb(CJb,Jhb(0)));nFb(this,CGc,new tJb(FJb));nFb(this,BGc,new tJb(FJb));nFb(this,GGc,new uJb(yJb,new v_b(15658734)));nFb(this,HGc,new uJb(yJb,new v_b(1118481)));nFb(this,FGc,new uJb(yJb,new v_b(328965)));nFb(this,MGc,new uJb(zJb,new bhb(1)));nFb(this,IGc,new uJb(zJb,new bhb(0.15)));nFb(this,JGc,new uJb(zJb,new bhb(0.75)));nFb(this,DGc,new tJb(FJb));nFb(this,KGc,new uJb(zJb,new bhb(1)));nFb(this,EGc,new tJb(FJb));nFb(this,LGc,new uJb(LJb,new c3b(0,0,1,1)));nFb(this,'uWrapRGB',new uJb(JJb,new q2b(0.75,0.375,0.1875)))};_.Kd=function cpc(a){var b,c;c=new lob(iu(RP,Czc,1,[NGc,OGc,PGc]));b=new lob(iu(RP,Czc,1,[QGc,RGc,SGc]));wFb(this,EFb(a,iu(UP,Czc,121,[c,b])))};_.Ld=function dpc(a){var b,c;c=new lob(iu(RP,Czc,1,[TGc]));b=new lob(iu(RP,Czc,1,[UGc]));xFb(this,EFb(a,iu(UP,Czc,121,[c,b])))};var epc;XR(1249,1,{},jpc);_.Md=function kpc(){return spc(),hpc};_.Nd=function lpc(){return tpc(),ipc};var hpc,ipc;XR(1250,1,{},npc);_.bc=function opc(){return '#define USE_BUMPMAP\r\n#extension GL_OES_standard_derivatives : enable\r\n\r\nuniform bool enableBump;\r\nuniform bool enableSpecular;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\nuniform float opacity;\r\n\r\nuniform float uRoughness;\r\nuniform float uSpecularBrightness;\r\n\r\nuniform vec3 uWrapRGB;\r\n\r\nuniform sampler2D tDiffuse;\r\nuniform sampler2D tBeckmann;\r\n\r\nuniform sampler2D specularMap;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nuniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\n\t\t\t// Fresnel term\r\n\r\nfloat fresnelReflectance( vec3 H, vec3 V, float F0 ) {\r\n\r\n\tfloat base = 1.0 - dot( V, H );\r\n\tfloat exponential = pow( base, 5.0 );\r\n\r\n\treturn exponential + F0 * ( 1.0 - exponential );\r\n\r\n}\r\n\r\n\t\t\t// Kelemen/Szirmay-Kalos specular BRDF\r\n\r\nfloat KS_Skin_Specular( vec3 N, \t\t// Bumped surface normal\r\n\t\t\t\t\t\tvec3 L, \t\t// Points to light\r\n\t\t\t\t\t\tvec3 V, \t\t// Points to eye\r\n\t\t\t\t\t\tfloat m,  \t// Roughness\r\n\t\t\t\t\t\tfloat rho_s \t// Specular brightness\r\n\t\t\t\t\t\t) {\r\n\r\n\tfloat result = 0.0;\r\n\tfloat ndotl = dot( N, L );\r\n\r\n\tif( ndotl > 0.0 ) {\r\n\r\n\t\tvec3 h = L + V; // Unnormalized half-way vector\r\n\t\tvec3 H = normalize( h );\r\n\r\n\t\tfloat ndoth = dot( N, H );\r\n\r\n\t\tfloat PH = pow( 2.0 * texture2D( tBeckmann, vec2( ndoth, m ) ).x, 10.0 );\r\n\r\n\t\tfloat F = fresnelReflectance( H, V, 0.028 );\r\n\t\tfloat frSpec = max( PH * F / dot( h, h ), 0.0 );\r\n\r\n\t\tresult = ndotl * rho_s * frSpec; // BRDF * dot(N,L) * rho_s\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nvoid main() {\r\n\r\n\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\r\n\r\n\tvec4 colDiffuse = texture2D( tDiffuse, vUv );\r\n\tcolDiffuse.rgb *= colDiffuse.rgb;\r\n\r\n\tgl_FragColor = gl_FragColor * colDiffuse;\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\tvec3 viewPosition = normalize( vViewPosition );\r\n\r\n\tfloat specularStrength;\r\n\r\n\tif ( enableSpecular ) {\r\n\r\n\t\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\t\tspecularStrength = texelSpecular.r;\r\n\r\n\t} else {\r\n\r\n\t\tspecularStrength = 1.0;\r\n\r\n\t}\r\n\r\n\t#ifdef USE_BUMPMAP\r\n\r\n\t\tif ( enableBump ) normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// point lights\r\n\r\n\tvec3 specularTotal = vec3( 0.0 );\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\r\n\t\tvec3 pointTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\r\n\t\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\t\tfloat lDistance = 1.0;\r\n\r\n\t\t\tif ( pointLightDistance[ i ] > 0.0 )\r\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, lVector ), 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, lVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat pointSpecularWeight = KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tpointTotal    += lDistance * diffuse * pointLightColor[ i ] * pointDiffuseWeight;\r\n\t\t\tspecularTotal += lDistance * specular * pointLightColor[ i ] * pointSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// directional lights\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\r\n\t\tvec3 dirTotal = vec3( 0.0 );\r\n\r\n\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\r\n\r\n\t\t\tvec3 dirVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dot( normal, dirVector ), 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3 ( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), uWrapRGB );\r\n\r\n\t\t\tfloat dirSpecularWeight =  KS_Skin_Specular( normal, dirVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tdirTotal \t   += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\r\n\t\t\tspecularTotal += specular * directionalLightColor[ i ] * dirSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// hemisphere lights\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\r\n\t\tvec3 hemiTotal = vec3( 0.0 );\r\n\r\n\t\tfor ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\r\n\t\t\tvec3 lVector = normalize( lDirection.xyz );\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\t\themiTotal += diffuse * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t\t\t\t\t// specular (sky light)\r\n\r\n\t\t\tfloat hemiSpecularWeight = 0.0;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVector, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\t\t\t\t// specular (ground light)\r\n\r\n\t\t\tvec3 lVectorGround = -lVector;\r\n\t\t\themiSpecularWeight += KS_Skin_Specular( normal, lVectorGround, viewPosition, uRoughness, uSpecularBrightness );\r\n\r\n\t\t\tspecularTotal += specular * mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight ) * hemiSpecularWeight * specularStrength;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n\t\t\t\t// all lights contribution summation\r\n\r\n\tvec3 totalLight = vec3( 0.0 );\r\n\r\n\t#if MAX_DIR_LIGHTS > 0\r\n\t\ttotalLight += dirTotal;\r\n\t#endif\r\n\r\n\t#if MAX_POINT_LIGHTS > 0\r\n\t\ttotalLight += pointTotal;\r\n\t#endif\r\n\r\n\t#if MAX_HEMI_LIGHTS > 0\r\n\t\ttotalLight += hemiTotal;\r\n\t#endif\r\n\r\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalLight + ambientLightColor * ambient ) + specularTotal;\r\n\r\n[*]\r\n\r\n}\r\n'};XR(1251,1,{},qpc);_.bc=function rpc(){return 'uniform vec4 offsetRepeat;\r\n\r\nvarying vec3 vNormal;\r\nvarying vec2 vUv;\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n[*]\r\n\r\nvoid main() {\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\tvViewPosition = -mvPosition.xyz;\r\n\r\n\tvNormal = normalize( normalMatrix * normal );\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n[*]\r\n\r\n}\r\n'};var BL=Rgb(OFc,'MaterialsBumpmapSkin$DemoScene',1080),AL=Rgb(OFc,'MaterialsBumpmapSkin$DemoScene$1',1081),tN=Rgb(HFc,'BeckmannShader',1181),sN=Rgb(HFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator',1182),qN=Rgb(HFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$1',1183),rN=Rgb(HFc,'BeckmannShader_Resources_default_InlineClientBundleGenerator$2',1184),IN=Rgb(HFc,'SkinSimpleShader',1248),HN=Rgb(HFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator',1249),FN=Rgb(HFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$1',1250),GN=Rgb(HFc,'SkinSimpleShader_Resources_default_InlineClientBundleGenerator$2',1251);nBc(wi)(17);